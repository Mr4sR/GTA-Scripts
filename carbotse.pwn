//-----------------------------------------------------------------
//-----------------------------------------------------------------
//-----------------------------------------------------------------
//-------------------------C-a-r---B-o-t-s-------------------------
//|    Made by: Tjong                                             |
//-----------------------------------------------------------------
//|    You can use it but not sell/post/link/share it without my  |
//|    permission, thanks                                         |
//|    Please consider that this aren't real "Bots", but I think  |
//|    it's a good solution ;-)                                   |
//-----------------------------------------------------------------
//|    Have fun with this Script ^_^                              |
//-----------------------------------------------------------------
//-----------------------------------------------------------------
//-----------------------------------------------------------------
#include <a_samp>
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_PINK 0xF020F0
#define MAX_CARS 250
#define MAX_POINTS 309
#define pi 3.14159265
new tmpstring[256];
new Float:DrivePoints[309][3] ={
{0.000000,0.000000,0.000000},
{2069.030029,971.324890,10.424200},
{2144.351318,970.795227,10.812700},
{2069.661132,1187.941528,10.671898},
{2071.963867,1026.744018,10.671898},
{2126.911865,1066.955810,11.838998},
{2188.838623,1189.775878,10.979700},
{2052.779296,1187.068115,10.671898},
{2048.159667,1093.402709,10.671898},
{2043.992187,1032.449951,10.671898},
{2046.442382,977.030090,10.580598},
{2006.638549,971.694091,10.671898},
{2159.938232,1101.943359,12.630000},
{2185.692626,1153.818481,11.680898},
{1873.186035,1095.756103,10.793684},
{1865.289916,1091.136840,10.794721},
{1874.850830,1090.285156,10.770083},
{1867.198730,934.215698,10.671875},
{2006.478149,931.857543,10.671875},
{2011.241210,967.305847,10.671875},
{2037.783325,970.329284,10.507884},
{2003.139038,937.727172,10.671875},
{1872.371704,936.894714,10.671875},
{1869.834838,1085.519409,10.729228},
{2144.687500,917.524841,10.767271},
{2187.822509,914.170898,10.820311},
{2151.767089,917.562438,10.793498},
{2149.860839,952.868957,10.787966},
{2149.853271,966.189697,10.744853},
{2157.733398,970.465637,10.677720},
{2147.875000,976.265014,10.751502},
{2167.660400,969.935180,10.753146},
{2281.477294,970.899658,10.764949},
{2170.347412,985.073303,10.820311},
{2173.053466,975.861877,10.770638},
{2179.443603,1003.784118,10.820311},
{2178.500976,1022.084411,10.820311},
{2172.965576,1039.077636,10.820311},
{2161.269531,1038.984741,10.820311},
{2155.255859,1026.785766,10.820311},
{2155.206542,1003.931823,10.820311},
{2164.738281,983.897705,10.741579},
{2157.624267,976.182800,10.674760},
{2284.895019,962.699096,10.671875},
{2284.563232,930.597778,10.778841},
{2264.391601,921.592224,10.661478},
{2231.527832,906.612121,9.794798},
{2196.035156,880.643676,7.541965},
{2158.802734,859.382446,6.734375},
{2113.062500,854.929931,6.734375},
{2069.771484,863.572448,6.745526},
{2062.928222,969.428710,10.461606},
{2056.768554,973.553894,10.524024},
{2033.244995,976.392944,10.598347},
{2063.217041,1026.975219,10.671875},
{2076.850097,1037.286865,10.791381},
{2104.651123,1043.682373,10.690179},
{2144.659912,1074.769165,12.400374},
{2062.696044,1186.390625,10.671875},
{2038.739990,1090.401489,10.681414},
{2051.545410,1000.957336,10.671875},
{2081.509033,1196.425048,10.679657},
{2055.149414,978.750488,10.609047},
{2078.027099,971.180297,10.771459},
{2077.330078,976.587341,10.802631},
{2182.587890,1190.138549,10.937080},
{2180.015136,1149.603149,11.977753},
{2146.485839,1084.896118,12.590996},
{2051.031250,953.363952,10.121750},
{2044.699707,953.702270,10.129933},
{2052.154785,861.676269,6.734375},
{2044.633056,861.716491,6.734375},
{2053.101074,843.497131,6.703125},
{2142.398193,831.274353,6.734375},
{2183.094238,814.624267,6.733025},
{2224.955322,783.394836,9.557232},
{2257.703369,764.499816,10.566732},
{2281.948730,760.858398,10.912244},
{2289.442138,773.040344,10.674028},
{2289.598876,837.482666,14.631114},
{2289.855224,919.081542,10.928419},
{2290.688720,968.490783,10.800736},
{2274.611572,976.385742,10.671875},
{2176.732177,1196.038574,10.671875},
{2189.875976,1203.522827,10.671875},
{2184.529296,1198.758300,10.903369},
{2190.165527,1368.243530,10.812524},
{2184.708496,1368.115356,10.813219},
{2176.955566,1370.806396,10.679672},
{2178.377685,1375.660034,10.697630},
{2070.906005,1366.480590,10.679657},
{2062.226562,1364.635864,10.671875},
{2082.600097,1370.632324,10.671875},
{2082.021240,1375.905761,10.679657},
{2056.571044,1367.570556,10.679657},
{2051.290283,1361.184814,10.671875},
{2062.882080,1267.713623,10.671875},
{2068.589599,1266.664428,10.671875},
{2052.353271,1266.769897,10.671875},
{2112.239501,1375.740112,10.790472},
{2101.333007,1375.615722,10.746793},
{2103.770751,1370.775390,10.779636},
{2110.284912,1370.472900,10.766404},
{2110.170654,1385.758666,10.820311},
{2104.629394,1384.598510,10.820311},
{2114.827636,1391.265502,10.820311},
{2148.166503,1391.181762,10.820311},
{2156.658203,1396.645019,10.820311},
{2159.490234,1405.265869,10.820311},
{2156.040039,1412.879882,10.820311},
{2147.577636,1415.402343,10.820311},
{2111.698974,1414.938720,10.820311},
{2093.756591,1411.129028,10.820311},
{2091.452880,1399.567260,10.820311},
{2197.138916,1190.625854,10.681571},
{2227.850341,1190.485717,10.763015},
{2229.312988,1203.537475,10.676162},
{2225.552001,1203.514404,10.675662},
{2218.150878,1195.389404,10.683667},
{2198.865966,1195.653564,10.679661},
{2229.156250,1362.827514,10.675539},
{2225.529296,1362.769653,10.676404},
{2216.670898,1370.598510,10.671875},
{2216.907226,1374.863525,10.671875},
{2194.072021,1376.590087,10.747546},
{2236.152832,1371.593627,10.697423},
{2339.290771,1191.651000,10.715437},
{2345.052978,1183.247558,10.671157},
{2349.714599,1183.140014,10.671875},
{2338.178466,1196.359252,10.691264},
{2354.989746,1196.567382,10.724664},
{2234.300048,1195.884399,10.745515},
{2345.514160,1075.289672,10.801842},
{2344.182861,997.173095,10.743606},
{2341.922851,975.633850,10.671875},
{2297.916015,975.639099,10.671875},
{2347.451171,973.213806,10.671875},
{2350.352294,988.954711,10.787583},
{2349.985107,1067.456665,10.757444},
{2144.459472,944.889648,10.713379},
{2144.211669,957.898986,10.781758},
{2132.624023,950.029785,10.812988},
{2125.608886,923.420715,10.820311},
{2114.689941,922.727844,10.820311},
{2112.654296,922.640563,10.820311},
{2101.173583,923.002319,10.820311},
{2102.092529,930.007751,10.820311},
{2137.836425,952.894226,10.681410},
{2235.996337,1375.770996,10.703617},
{2361.293457,1371.362426,10.763519},
{2369.466308,1383.136474,10.682813},
{2364.929687,1383.458984,10.671875},
{2359.433349,1375.747436,10.718145},
{2372.399902,1370.790771,10.776416},
{2373.472656,1374.017456,10.753103},
{2419.686279,1368.923217,10.797465},
{2421.374511,1375.358276,10.878271},
{2425.508789,1363.308105,10.669621},
{2424.869628,1200.409179,10.815851},
{2417.825195,1195.757568,10.688323},
{2355.124267,1191.181640,10.712582},
{2417.735839,1191.394042,10.685585},
{2430.234130,1199.436401,10.866272},
{2430.157226,1363.426879,10.675209},
{2246.923095,1370.895874,10.783927},
{2304.958740,1370.944580,10.786059},
{2310.019287,1369.566162,10.725762},
{2310.542968,1375.441772,10.816857},
{2304.905029,1375.528442,10.832358},
{2305.774169,1386.537475,10.820311},
{2311.367187,1398.898437,10.820311},
{2294.797363,1398.021362,10.820311},
{2280.476318,1401.172973,10.823410},
{2284.427490,1505.817504,17.218750},
{2331.503173,1505.618041,17.218750},
{2330.024169,1400.578613,23.625000},
{2283.945312,1401.421386,23.631227},
{2285.881835,1505.676025,30.023437},
{2330.247314,1504.542968,30.023437},
{2329.863525,1400.486694,36.421875},
{2289.335937,1400.097167,36.421875},
{2283.506591,1505.346313,42.820312},
{2305.973876,1505.241577,42.820312},
{2309.637451,1480.823364,42.820312},
{2312.649658,1402.919677,42.820312},
{2321.951416,1396.248291,42.820312},
{2338.407226,1403.740112,42.820312},
{2317.301025,1510.056518,42.820312},
{2273.126953,1512.165405,42.820312},
{2281.276855,1394.129638,36.421875},
{2338.511474,1395.366455,36.421875},
{2334.737792,1513.045043,30.023437},
{2274.602539,1511.788085,30.023437},
{2279.151367,1394.786987,23.625000},
{2339.796386,1397.201049,23.625000},
{2335.242919,1511.564086,17.218750},
{2273.894531,1509.580200,17.218750},
{2272.947998,1396.538452,10.820311},
{2296.199707,1392.881103,10.820311},
{2302.945556,1384.368041,10.820311},
{2252.070312,1375.759887,10.789852},
{2310.831542,1526.715820,10.740991},
{2328.350097,1530.261840,10.756682},
{2363.384033,1530.958129,10.805248},
{2365.334228,1472.951293,10.805212},
{2369.881835,1468.999023,10.801582},
{2372.063720,1529.234619,10.775918},
{2365.258544,1536.522216,10.751004},
{2331.498779,1535.625976,10.795968},
{2307.210449,1536.530029,10.750661},
{2308.749511,1505.503540,10.820311},
{2309.062011,1402.694946,10.820311},
{2325.854248,1445.138793,10.820311},
{2150.292724,956.023315,10.769075},
{2144.692138,845.218322,13.909811},
{2150.162841,845.441162,13.903931},
{2144.789306,758.285888,10.775938},
{2144.928955,713.837585,10.786995},
{2156.838623,710.144653,10.688958},
{2283.231445,710.770996,10.963127},
{2290.332275,720.442382,10.819996},
{2289.816650,756.862731,10.854039},
{2284.644042,753.357055,10.672756},
{2285.153808,717.690307,10.957260},
{2152.599365,716.141723,10.804161},
{2149.679199,754.054687,10.786747},
{2284.499511,841.438842,13.915192},
{2285.475341,766.710815,10.979884},
{2171.739501,969.503112,10.734245},
{2072.696533,1200.411499,10.679657},
{2145.294921,975.339782,10.791975},
{2123.020263,929.147460,10.820311},
{2116.744384,927.744873,10.820311},
{2115.234375,927.491210,10.820311},
{2110.559326,930.995849,10.820311},
{2144.143554,837.195495,6.741998},
{2466.683837,837.072143,6.734375},
{2524.764892,850.744689,6.734375},
{2525.093261,844.233703,6.734375},
{2582.573242,868.225036,6.734375},
{2580.936767,875.498352,6.734375},
{2644.817138,915.046936,6.734375},
{2638.829345,919.482055,6.734375},
{2690.061035,974.720703,6.742077},
{2683.879394,977.309143,6.734375},
{2720.428710,1043.995605,6.734375},
{2714.497314,1048.452758,6.734375},
{2729.449951,1119.124511,6.734375},
{2723.342285,1121.079711,6.734375},
{2729.646728,1329.927490,6.734375},
{2729.569091,1964.615234,6.734375},
{2723.331542,2288.774169,6.734375},
{2729.196289,2286.919921,6.734375},
{2714.312500,2366.166503,6.734375},
{2720.804687,2366.411865,6.742077},
{2688.842773,2437.458740,6.734375},
{2694.634765,2439.412597,6.734375},
{2645.972656,2502.516845,6.676309},
{2649.812011,2507.527099,6.646635},
{2582.741943,2562.533691,5.209569},
{2587.373291,2567.783935,5.219065},
{2504.463623,2606.905029,4.901741},
{2501.107177,2614.531494,4.978972},
{2416.568603,2627.858642,6.525168},
{2419.460693,2634.166748,6.490110},
{2296.276611,2625.757080,6.750000},
{2297.939941,2631.624755,6.750000},
{2120.792968,2590.174316,6.781140},
{2121.217773,2596.340087,6.773437},
{1803.174926,2499.007080,6.820312},
{1796.467529,2504.921142,6.820312},
{1633.885253,2470.285644,6.835937},
{1642.501220,2477.082763,6.835937},
{1414.598999,2469.155761,6.734375},
{1411.186767,2474.982177,6.734375},
{1359.436401,2461.021728,6.734375},
{1359.926391,2467.903076,6.734375},
{1297.853881,2430.602050,6.734375},
{1298.928222,2440.698242,6.734375},
{1254.691528,2390.156494,6.734375},
{1250.375366,2395.216308,6.734375},
{1224.261718,2333.947998,6.734375},
{1218.847534,2340.157714,6.734375},
{1211.664428,2271.022216,6.734375},
{1204.969482,2271.535400,6.734375},
{1204.790527,1958.907348,6.741998},
{1211.736694,1036.600585,6.812500},
{1204.794311,1033.264038,6.812500},
{1222.442749,978.515502,6.812500},
{1215.792236,976.147460,6.812500},
{1249.739135,923.018249,6.820202},
{1242.957397,921.701782,6.812500},
{1290.772460,881.758361,6.812500},
{1285.390991,875.748718,6.812500},
{1343.784423,851.633178,6.812500},
{1340.107910,845.365173,6.812500},
{1402.174438,837.752380,6.812500},
{1402.798339,831.819335,6.812500},
{1802.169311,836.961181,10.671875},
{1782.338378,831.756652,10.671875},
{2061.446289,837.091796,6.742155},
{1658.563842,831.374572,6.780540},
{1658.819824,836.891540,6.788921},
{2041.150146,831.265014,6.734375},
{2039.755981,837.182678,6.742155},
{2440.199707,831.229553,6.734375},
{2382.905029,808.826049,7.240807},
{2338.905517,776.734802,9.959637},
{2298.413574,762.508483,10.642457}
};
new Connections[309][4] ={
{0,0,0,0},
{2,4,54,0},
{24,29,140,0},
{65,97,96,0},
{3,56,0,0},
{55,0,0,0},
{83,84,114,0},
{8,0,0,0},
{9,14,60,0},
{10,10,0,0},
{11,53,69,68},
{21,0,0,0},
{13,0,0,0},
{6,12,0,0},
{15,0,0,0},
{16,17,17,0},
{59,0,0,0},
{18,0,0,0},
{19,0,0,0},
{20,0,0,0},
{1,69,68,52},
{22,0,0,0},
{23,0,0,0},
{16,0,0,0},
{25,214,214,0},
{26,0,0,0},
{27,0,0,0},
{28,141,28,28},
{29,30,0,0},
{31,0,0,0},
{64,0,0,0},
{32,33,32,32},
{43,136,0,0},
{35,0,0,0},
{33,42,42,0},
{36,0,0,0},
{37,0,0,0},
{38,0,0,0},
{39,0,0,0},
{40,0,0,0},
{41,0,0,0},
{228,42,0,0},
{30,230,0,0},
{44,0,0,0},
{45,226,0,0},
{46,0,0,0},
{47,0,0,0},
{48,0,0,0},
{49,0,0,0},
{50,0,0,0},
{1,51,0,0},
{52,4,0,0},
{53,0,0,0},
{11,0,0,0},
{3,58,0,0},
{3,58,0,0},
{57,0,0,0},
{12,0,0,0},
{7,96,97,0},
{9,60,0,0},
{62,68,69,0},
{7,229,0,0},
{63,0,0,0},
{2,0,0,0},
{4,54,53,0},
{66,114,0,0},
{67,0,0,0},
{5,0,0,0},
{70,70,70,71},
{71,71,71,70},
{72,0,0,0},
{72,0,0,0},
{73,235,0,0},
{74,305,0,0},
{75,0,0,0},
{76,0,0,0},
{77,0,0,0},
{78,222,0,0},
{79,0,0,0},
{80,0,0,0},
{45,81,0,0},
{82,136,0,0},
{34,0,0,0},
{61,0,0,0},
{86,0,0,0},
{65,83,114,0},
{89,122,0,0},
{85,0,0,0},
{87,0,0,0},
{93,99,0,0},
{92,0,0,0},
{94,0,0,0},
{88,101,0,0},
{94,0,0,0},
{95,0,0,0},
{98,0,0,0},
{98,91,90,0},
{90,90,91,0},
{7,0,0,0},
{103,0,0,0},
{93,0,0,0},
{103,0,0,0},
{88,0,0,0},
{105,0,0,0},
{100,102,0,0},
{106,0,0,0},
{107,0,0,0},
{108,0,0,0},
{109,0,0,0},
{110,0,0,0},
{111,0,0,0},
{112,0,0,0},
{113,0,0,0},
{104,0,0,0},
{115,0,0,0},
{116,126,0,0},
{120,0,0,0},
{118,118,0,0},
{119,0,0,0},
{84,83,65,0},
{123,125,0,0},
{117,148,0,0},
{121,0,0,0},
{124,0,0,0},
{89,87,0,0},
{149,164,0,0},
{127,160,0,0},
{132,0,0,0},
{129,160,0,0},
{131,0,0,0},
{129,127,0,0},
{116,118,0,0},
{133,0,0,0},
{134,0,0,0},
{135,0,0,0},
{82,43,0,0},
{137,0,0,0},
{138,0,0,0},
{128,0,0,0},
{24,0,0,0},
{141,139,139,139},
{142,231,0,0},
{143,0,0,0},
{144,0,0,0},
{145,0,0,0},
{146,0,0,0},
{147,0,0,0},
{139,213,0,0},
{123,0,0,0},
{150,0,0,0},
{205,0,0,0},
{152,153,0,0},
{148,167,0,0},
{155,0,0,0},
{150,152,0,0},
{157,0,0,0},
{154,0,0,0},
{158,0,0,0},
{159,0,0,0},
{130,0,0,0},
{161,0,0,0},
{162,0,0,0},
{163,0,0,0},
{156,0,0,0},
{165,0,0,0},
{169,0,0,0},
{149,0,0,0},
{169,0,0,0},
{200,0,0,0},
{171,170,170,0},
{212,0,0,0},
{172,0,0,0},
{173,0,0,0},
{174,0,0,0},
{175,0,0,0},
{176,0,0,0},
{177,0,0,0},
{178,0,0,0},
{179,0,0,0},
{180,0,0,0},
{181,0,0,0},
{182,0,0,0},
{183,0,0,0},
{184,0,0,0},
{185,0,0,0},
{186,0,0,0},
{187,0,0,0},
{188,0,0,0},
{189,0,0,0},
{190,0,0,0},
{191,0,0,0},
{192,0,0,0},
{193,0,0,0},
{194,0,0,0},
{195,0,0,0},
{196,0,0,0},
{197,0,0,0},
{198,0,0,0},
{199,0,0,0},
{168,166,0,0},
{148,0,0,0},
{202,0,0,0},
{203,0,0,0},
{204,0,0,0},
{151,0,0,0},
{206,0,0,0},
{207,0,0,0},
{208,0,0,0},
{209,0,0,0},
{210,0,0,0},
{211,0,0,0},
{171,199,199,0},
{201,0,0,0},
{28,0,0,0},
{216,0,0,0},
{26,0,0,0},
{217,0,0,0},
{218,0,0,0},
{219,0,0,0},
{220,0,0,0},
{221,0,0,0},
{78,308,0,0},
{223,0,0,0},
{224,0,0,0},
{225,0,0,0},
{215,0,0,0},
{227,0,0,0},
{222,308,0,0},
{32,0,0,0},
{97,97,97,96},
{140,0,0,0},
{232,0,0,0},
{233,0,0,0},
{234,0,0,0},
{147,0,0,0},
{236,0,0,0},
{237,238,0,0},
{240,0,0,0},
{239,0,0,0},
{241,0,0,0},
{242,0,0,0},
{243,0,0,0},
{244,0,0,0},
{245,0,0,0},
{246,0,0,0},
{247,0,0,0},
{248,0,0,0},
{249,249,0,0},
{249,250,251,0},
{250,0,0,0},
{251,252,0,0},
{253,254,0,0},
{254,0,0,0},
{255,0,0,0},
{256,0,0,0},
{257,0,0,0},
{258,0,0,0},
{259,0,0,0},
{260,0,0,0},
{261,0,0,0},
{262,0,0,0},
{263,0,0,0},
{264,0,0,0},
{265,0,0,0},
{266,0,0,0},
{267,268,0,0},
{268,267,0,0},
{269,0,0,0},
{270,269,0,0},
{271,0,0,0},
{272,0,0,0},
{273,0,0,0},
{274,0,0,0},
{275,0,0,0},
{276,0,0,0},
{277,0,0,0},
{278,0,0,0},
{279,0,0,0},
{280,0,0,0},
{281,0,0,0},
{282,0,0,0},
{283,0,0,0},
{284,283,0,0},
{285,286,286,0},
{285,287,0,0},
{287,0,0,0},
{288,0,0,0},
{289,0,0,0},
{290,0,0,0},
{291,0,0,0},
{292,0,0,0},
{293,0,0,0},
{294,0,0,0},
{295,0,0,0},
{296,0,0,0},
{297,296,0,0},
{301,302,0,0},
{301,302,0,0},
{304,303,0,0},
{303,304,0,0},
{50,0,0,0},
{299,0,0,0},
{298,0,0,0},
{73,235,0,0},
{300,235,73,0},
{238,0,0,0},
{305,0,0,0},
{306,0,0,0},
{307,0,0,0}
};
new Float:KMH[309] ={
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,20.000000,25.000000,25.000000,30.000000,25.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
20.000000,20.000000,25.000000,25.000000,23.000000,20.000000,18.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,5.000000,5.000000,0.100000,2.000000,5.000000,5.000000,9.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,5.000000,0.100000,5.000000,5.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,30.000000,
25.000000,30.000000,30.000000,30.000000,28.000000,30.000000,27.000000,23.000000,20.000000
};
new ConnectionsAmount[MAX_POINTS];
new CAR_AMOUNT_USED;
new bool:calculations;
new Timers[3];
new AutomaticCars[MAX_CARS];
new CarPosition[MAX_CARS];
new LastCarPosition[MAX_CARS];
new bool:HasFreezed[MAX_PLAYERS][MAX_CARS];
new Freezed[MAX_CARS];
new BotAngle[MAX_CARS];
new bool:ObjectHasFreezed[MAX_CARS][MAX_CARS];
new oldtick;
public OnFilterScriptInit(){
	for(new i=0;i<MAX_POINTS;i++) for(new j=0;j<4;j++) if(Connections[i][j] != 0) ConnectionsAmount[i]++;

	print("\n--------------------------------------");
	print(" Automatische Autos von Tjong geladen");
	print("--------------------------------------\n");
	Timers[0] = SetTimer("ObjectUpdate",700,1);
	Timers[1] = SetTimer("ObjectToObjectUpdate",800,1);
	Timers[2] = SetTimer("Debug",100,1);
	//SetGameModeText("Car Bots Edition 0.82");
	return 1;
}
public OnFilterScriptExit(){
	for(new i=0;i<CAR_AMOUNT_USED;i++) if(IsValidObject(AutomaticCars[i])) DestroyObject(AutomaticCars[i]);
	for(new i=0;i<sizeof(Timers);i++) KillTimer(Timers[i]);
	return 1;
}
forward Float:itan(Float:opp,Float:adj);
forward ObjectUpdate();
forward ObjectToObjectUpdate();
forward Horn(playerid);
forward Debug();
enum SavePlayerPosEnum {
	Float:LastX,
	Float:LastY,
	Float:LastZ
	}
new SavePlayerPos[MAX_PLAYERS][SavePlayerPosEnum];
stock PositionsWechsel(i){
	new Float:x,Float:y,Float:z;
	GetPlayerPos(i, x, y, z);
	if(floatabs(floatabs(SavePlayerPos[i][LastX]) - floatabs(x)) + floatabs(floatabs(SavePlayerPos[i][LastY]) - floatabs(y)) > 10) return 1;
	return 0;
}
stock GetPointDistanceToPoint(Float:x,Float:y,Float:x2,Float:y2){
new Float:tmpdis;
tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x2)),2)+floatpower(floatabs(floatsub(y,y2)),2));
return floatround(tmpdis);
}
Float:GetXYInBackOfPlayer(playerid, &Float:x, &Float:y, Float:distance){
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	if (IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	else GetPlayerFacingAngle(playerid, a);
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
	return a;
}
Float:GetXYInBackOfObject(objectid, &Float:x, &Float:y, Float:distance){
	new Float:a;
	new Float:xx,Float:yy;
	GetObjectPos(AutomaticCars[objectid], x, y, a);
	GetObjectRot(AutomaticCars[objectid],xx,yy,a);
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
	return a;
}
public Debug(){
	if(calculations)
	{
		new newtick = GetTickCount();
		new diff = newtick - oldtick;
		if(diff > 100)
		format(tmpstring,sizeof(tmpstring),"~p~Server load: ~r~%d",newtick-oldtick);
		else
		format(tmpstring,sizeof(tmpstring),"~p~Server load: ~r~%d",newtick-oldtick);
		//END IF
		GameTextForAll(tmpstring,5000,6);
		oldtick = newtick;
	}
}
public ObjectToObjectUpdate(){
	for(new i=0; i<CAR_AMOUNT_USED; i++)
	{
	    new Float:x,Float:y,Float:z,Float:x2,Float:y2/*,Float:z2*/;
	    GetXYInBackOfObject(i,x2,y2,15.0);
	    for(new j=0;j<CAR_AMOUNT_USED;j++)
		{
			if(Freezed[i] > 0)
			{
				GetObjectPos(AutomaticCars[j],x,y,z);
				if(GetPointDistanceToPoint(x,y,x2,y2) < 5 && (floatabs(BotAngle[j] - BotAngle[i]) < 50 || floatabs(BotAngle[j] - BotAngle[i]) > 310) && !ObjectHasFreezed[j][i] && i!=j)
				{
					if(!ObjectHasFreezed[i][j])
					{
						StopObject(AutomaticCars[j]);
				    	ObjectHasFreezed[i][j] = true;
				    	Freezed[j]++;
				    	j=0;
				 	}
				}
			} else {
				if(ObjectHasFreezed[i][j])
				{
					Freezed[j]--;
					if(Freezed[j] < 0) Freezed[j] = 0;
					if(Freezed[j] == 0)
					{
				    	if(KMH[LastCarPosition[j]] != 0.00000)
							MoveObject(AutomaticCars[j],DrivePoints[CarPosition[j]][0],
														DrivePoints[CarPosition[j]][1],
														DrivePoints[CarPosition[j]][2],
														KMH[LastCarPosition[j]]);
	   					else
	    					MoveObject(AutomaticCars[j],DrivePoints[CarPosition[j]][0],
														DrivePoints[CarPosition[j]][1],
														DrivePoints[CarPosition[j]][2],
														15.0);
						//END IF
					}
					ObjectHasFreezed[i][j] = false;
				}
			}
		}
	}
}
public ObjectUpdate(){
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2;
			GetXYInBackOfPlayer(i,x2,y2,5.0);
			new Vi;
			Vi=GetPlayerVehicleID(i);
			new Float:vang;
			if(IsPlayerInAnyVehicle(i)) GetVehicleZAngle(Vi,vang);
			for(new j=0;j<CAR_AMOUNT_USED;j++)
			{
				GetObjectPos(AutomaticCars[j],x,y,z);
				if(GetPointDistanceToPoint(x,y,x2,y2) < 15 && (floatabs(BotAngle[j] - vang) < 50 || floatabs(BotAngle[j] - vang) > 310) && !PositionsWechsel(i) && IsPlayerInAnyVehicle(i))
				{
					if(!HasFreezed[i][j])
					{
				    	StopObject(AutomaticCars[j]);
				    	HasFreezed[i][j] = true;
				    	Freezed[j]++;
				    	PlayerPlaySound(i,1147,x,y,z);
				    	new ran = random(6);
				    	if(ran == 0)
				    		SendClientMessage(i,COLOR_BLUE,"***Car Bot: Drive, you idiot!");
				    	else if(ran == 1)
				    	    SendClientMessage(i,COLOR_BLUE,"***Car Bot: What are you waiting for?!?");
				    	else if(ran == 2)
				    	    SendClientMessage(i,COLOR_BLUE,"***Car Bot: Standing... I hate standing!!!");
				    	else if(ran == 3)
				    	    SendClientMessage(i,COLOR_BLUE,"***Car Bot: If you've found the 'W' Button let me know...");
				    	else if(ran == 4)
				    	    SendClientMessage(i,COLOR_BLUE,"***Car Bot: Mooove, MOOOVE!!!");
				    	else if(ran == 5)
				    	    SendClientMessage(i,COLOR_BLUE,"***Car Bot: Sunday Driver!!!");
				    	//END IF
				    	SetTimerEx("Horn",500,0,"t",i);
				 	}
				} else {
					if(HasFreezed[i][j])
					{
				    	Freezed[j]--;
				    	if(Freezed[j] < 0) Freezed[j] = 0;
				    	if(Freezed[j] == 0)
				    	{
				        	if(KMH[LastCarPosition[j]] != 0.00000)
								MoveObject(AutomaticCars[j],DrivePoints[CarPosition[j]][0],
															DrivePoints[CarPosition[j]][1],
															DrivePoints[CarPosition[j]][2],
															KMH[LastCarPosition[j]]);
	   						else
	    						MoveObject(AutomaticCars[j],DrivePoints[CarPosition[j]][0],DrivePoints[CarPosition[j]][1],DrivePoints[CarPosition[j]][2],15.0);
							//END IF
						}
						HasFreezed[i][j] = false;
					}
				}
			}
			SavePlayerPos[i][LastX] = x2;
			SavePlayerPos[i][LastY] = y2;
			SavePlayerPos[i][LastZ] = z2;
		}
	}
}
public Horn(playerid){
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	PlayerPlaySound(playerid,1147,x,y,z);
}
stock IsNoCrossway(Drivepoint){
	return (ConnectionsAmount[Drivepoint] > 1) ? 0 : 1;
}
stock ChooseAim(oid,Drivepoint){
	new zufall = Connections[Drivepoint][random(ConnectionsAmount[Drivepoint])];
	LastCarPosition[oid] = CarPosition[oid];
	CarPosition[oid] = zufall;
	return zufall;
}
stock str(i){
	new t[256];
	valstr(t,i);
	return t;
}
stock STM(string[]){
	SendClientMessageToAll(COLOR_GREEN,string);
}
strtok(const string[], &index){
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
stock CorrectAmount(playerid,&anzahl){
	new oid = CreateObject(3593,0.0,0.0,1000.0,0.0,0.0,0.0);
	DestroyObject(oid);
	if(oid + anzahl > 145)
	{
		anzahl = 145 - oid;
		SendClientMessage(playerid,COLOR_RED,"Attention! You've created too much Car Bots. The amount has been automatically decreased.");
		SendClientMessage(playerid,COLOR_RED,"The amount of the bots + your other server objects mustn't be above 150");
	}
}
public OnPlayerConnect(playerid){
	SendClientMessage(playerid,COLOR_GREEN,"***Loaded Car Bots by Tjong");
	return 1;
}
public OnPlayerDisconnect(playerid, reason){
	for(new i=0;i<CAR_AMOUNT_USED;i++)
	{
	    if(HasFreezed[playerid][i])
		{
			Freezed[i]--;
			if(Freezed[i] < 0) Freezed[i] = 0;
			if(Freezed[i] == 0)
			{
				if(KMH[LastCarPosition[i]] != 0.00000)
					MoveObject(AutomaticCars[i],DrivePoints[CarPosition[i]][0],
												DrivePoints[CarPosition[i]][1],
												DrivePoints[CarPosition[i]][2],
												KMH[LastCarPosition[i]]);
	   			else
	    			MoveObject(AutomaticCars[i],DrivePoints[CarPosition[i]][0],DrivePoints[CarPosition[i]][1],DrivePoints[CarPosition[i]][2],15.0);
				//endif
			}
		}
		HasFreezed[playerid][i] = false;
	}
	return 1;
}
public OnPlayerCommandText(playerid, cmdtext[]){
    new cmd[256];
	new idx;
	new tmp[256];

	cmd = strtok(cmdtext, idx);


	if (strcmp(cmd, "/startcarbots", true)==0 && IsPlayerAdmin(playerid))
	{

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_WHITE, "Benutze: /startcarbots [Amount]");
			return 1;
		}
		new amount = strval(tmp);

		for(new i=0;i<MAX_CARS;i++)
		{
			if(IsValidObject(AutomaticCars[i])) DestroyObject(AutomaticCars[i]);
		}

		CorrectAmount(playerid,amount);

		CAR_AMOUNT_USED = amount;
		for(new i=0;i<amount;i++)
		{
		    new rand = random(MAX_POINTS);
			new oid = CreateObject(3593+random(2),DrivePoints[rand][0],DrivePoints[rand][1],DrivePoints[rand][2]+20,0.0,0.0,0.0); //3593 //12957
			AutomaticCars[i] = oid;
			CarPosition[i] = rand;
			MoveObject(AutomaticCars[i],DrivePoints[rand][0],DrivePoints[rand][1],DrivePoints[rand][2],5.0);
		}


		return 1;
	}

	if (strcmp(cmd, "/stopcarbots", true)==0 && IsPlayerAdmin(playerid))
	{
		for(new i=0;i<CAR_AMOUNT_USED;i++)
		{
			if(IsValidObject(AutomaticCars[i])) DestroyObject(AutomaticCars[i]);
		}
		return 1;
	}

	if (strcmp(cmd, "/botcommands", true)==0 && IsPlayerAdmin(playerid))
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"~~~~~~~~~~~~~~~B~o~t~~~C~o~m~m~a~n~d~s~~~~~~~~~~~~~~~");
	    SendClientMessage(playerid,COLOR_GREEN,"/startcarbots [Amount (1- ~240)] ---> An amount of car bots start");
	    SendClientMessage(playerid,COLOR_GREEN,"/stopcarbots ---> Removes all Car Bots from the map");
	    SendClientMessage(playerid,COLOR_GREEN,"/calculations ---> Debug (Shows the ID of the bot that has been moved at last)");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"~~~~~~~~~~~~~~~B~o~t~~~C~o~m~m~a~n~d~s~~~~~~~~~~~~~~~");
	    return 1;
	}

	if (strcmp(cmd, "/calculations", true)==0)
	{
	    if(!calculations) calculations = true; else calculations = false;
	    return 1;
	}

	return 0;
}
public OnObjectMoved(objectid){
	new bool:IsObjectBot;
	new i;
	for(i=0;i<CAR_AMOUNT_USED;i++)
	{
	    if(objectid == AutomaticCars[i])
	    {
	        if(calculations)
	        {
	            //new newtick = GetTickCount();
	        	//format(tmpstring,sizeof(tmpstring),"Object Moved: ~g~%d~n~Server load: %d",i,newtick-oldtick);
	        	//GameTextForAll(tmpstring,5000,6);
	        	//oldtick = newtick;
	        }
	        IsObjectBot = true;
	        break;
	    }
	}

	if(IsObjectBot)
	{
	    //STM("TEST");
	    new aim;
	    if(IsNoCrossway(CarPosition[i]))
		{
			aim = Connections[CarPosition[i]][0];
			LastCarPosition[i] = CarPosition[i];
			CarPosition[i] = aim;
		} else aim = ChooseAim(i,CarPosition[i]);
		if(Connections[LastCarPosition[i]][0] == 0) aim = 1;
	    //STM(str(aim));
	    new Float:ang;
    	new Float:x,Float:y,Float:lx,Float:ly;
	    new Float:xdiff,Float:ydiff;
	    x = DrivePoints[aim][0];
	    y = DrivePoints[aim][1];
	 	lx = DrivePoints[LastCarPosition[i]][0];
	 	ly = DrivePoints[LastCarPosition[i]][1];
		xdiff = floatabs(x) - floatabs(lx);
		ydiff = floatabs(y) - floatabs(ly);
	    new eins;
	    new winkel;
	    if(xdiff >= 0 && ydiff >= 0)
	    {
			winkel = 0;
			eins = -1;
	    } else if(xdiff <= 0 && ydiff >= 0) {
            winkel = 0;
			eins = 1;
	    } else if(xdiff >= 0 && ydiff <= 0) {
            winkel = 180;
			eins = 1;
	    } else if(xdiff <= 0 && ydiff <= 0) {
            winkel = 180;
			eins = -1;
	    }

	    if(floatabs(ydiff) == 0) ydiff = 1;
		new Float:divi = floatdiv(floatabs(xdiff),floatabs(ydiff));
		if(divi > 2) divi = 2;

		ang = winkel + (floatmul(45,divi) * eins);
		BotAngle[i] = floatround(ang);
	    SetObjectRot(objectid,0.0,0.0,ang);
	    if(KMH[LastCarPosition[i]] != 0.00000)
	    {
	    	MoveObject(objectid,DrivePoints[aim][0],DrivePoints[aim][1],DrivePoints[aim][2],KMH[LastCarPosition[i]]);
	    } else {
	    	MoveObject(objectid,DrivePoints[aim][0],DrivePoints[aim][1],DrivePoints[aim][2],15.0);
	    }
	    CarPosition[i] = aim;
	}
	return 1;
}

