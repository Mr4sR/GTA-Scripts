#include <a_samp>
#include <mysql>
#undef MAX_PLAYERS
#define MAX_PLAYERS 100
/*
	registeration
	houses
	motels
	car handling
	parkings
	car shops
	mail box
	bank
	bizs
	paydays / rents
	jobs
	job tests
*/
AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}
new LastPayday = -1;
new count[MAX_PLAYERS] = 0;
new Text:startScreen[2];
new isInvisible[MAX_PLAYERS];
//new iHaveBadConnection[MAX_PLAYERS];
new badConnectionTimer[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new noooc = 1;
new Text:txtAnimHelper;
new horseShoe[50];
//new Float:hunger[MAX_PLAYERS];
new Float:markbanks[][3] ={
	{2546.290283, 1971.762695, 10.820312},
	{2885.277587, 2453.478271, 11.068956},
	{2097.767578, 2223.978515, 11.023437 },
	{ 2194.563720, 1991.017944, 12.296875},
	{2452.393310, 2064.608154, 10.820312}
};
new gymCheck[MAX_PLAYERS];
new gymJogPickup;
new racePickup;
new gymPedalPickup;
new gymBoxPickup;
new gym[MAX_PLAYERS];
new round[MAX_PLAYERS]=1;
enum sellEnum
{
	srequestid,
	sid,
	scost,
	samount,
	stype[10]
};

new sell[MAX_PLAYERS][sellEnum];
new requestPilot[MAX_PLAYERS];
//new revealTimer[MAX_PLAYERS];
new tied[MAX_PLAYERS];
new tryingtotie[MAX_PLAYERS] = -1;
new playingPointsTimer[MAX_PLAYERS];
new ringing[MAX_PLAYERS];
new onPhone[MAX_PLAYERS];
new consumedDrugs[MAX_PLAYERS];
new bombID[MAX_PLAYERS];
new dutyPoints[MAX_PLAYERS];
new bomb[MAX_PLAYERS];
new bounty[MAX_PLAYERS][MAX_PLAYERS];
new checking[MAX_PLAYERS];
new replacing[MAX_PLAYERS];
new closestCar[MAX_PLAYERS];
//new Text3D:tag1[MAX_PLAYERS];
new MySQL:TmP;

new taxi,plane,ambulance,sentinel,police;
new target[5];
new  jobName[12][20] = {
//      0       1           2           3       4               5
	"None","Taxi Driver", "Pilot", "Medic", "Gold Miner" , "Fuel Supplier",
	"Drug Dealer", "Fisherman" , "Mechanic" , "Hitman" , "Sales Man","Police"
//      6               7           8           9           10          11
};
new Float:drugPlants[][3] = {
	{ 1753.0625, 1504.09375, 15.03125},
	{ 1753.0625, 1563.09375, 14.828125},
	{ 1753.0625, 1403.15625, 14.828125},
	{ 1753.0625, 1318.257813, 14.828125},
	{ 1466.421875, 794.5390625, 15.1484375},
	{ 1553.4375, 675.828125, 15.546875},
	{ 1440.257813, 794.5390625, 15.546875},
	{ 1492.59375, 794.5390625, 15.546875},
	{ 1517.0625, 795.1953125, 14.984375},
	{ 1537.0, 792.125, 15.109375},
	{ 1402.085938, 785.1171875, 15.546875},
	{ 1402.546875, 762.4453125, 15.140625},
	{ 1402.085938, 737.8828125, 15.546875},
	{ 1402.085938, 716.03125, 15.546875},
	{ 1402.085938, 690.7265625, 15.546875},
	{ 1402.617188, 668.3828125, 15.546875},
	{ 1486.945313, 907.5546875, 13.59375},
	{ 1691.5625, 1483.390625, 14.15625},
	{ 1691.5625, 1414.53125, 13.734375},
	{ 1669.171875, 2080.828125, 15.7109375},
	{ 1694.15625, 2153.820313, 15.1640625},
	{ 1767.734375, 2110.476563, 15.2109375},
	{ 1723.796875, 2157.109375, 15.2109375},
	{ 2089.0, 1839.039063, 15.0546875},
	{ 2077.648438, 1809.789063, 15.0546875},
	{ 2036.585938, 1953.1875, 15.1796875},
	{ 2048.304688, 1762.148438, 15.0546875},
	{ 1991.21875, 1778.804688, 15.3671875},
	{ 2041.8125, 1806.75, 15.5},
	{ 2059.898438, 1778.679688, 12.7734375},
	{ 2137.03125, 1912.046875, 15.359375},
	{ 2144.5625, 1247.375, 12.0703125},
	{ 2125.5, 1244.5, 12.0703125},
	{ 2155.742188, 1221.523438, 15.3046875},
	{ 2137.515625, 1220.0625, 15.3046875},
	{ 2116.71875, 1220.585938, 15.3046875},
	{ 2170.414063, 1229.203125, 15.359375},
	{ 2166.484375, 1338.023438, 15.3046875},
	{ 2151.429688, 1346.09375, 14.53125},
	{ 2136.835938, 1346.09375, 14.53125},
	{ 2120.710938, 1346.09375, 14.53125},
	{ 2170.90625, 1246.351563, 15.3046875},
	{ 2019.851563, 1500.375, 14.828125},
	{ 1956.0625, 1468.710938, 14.828125},
	{ 1877.648438, 1468.710938, 14.828125},
	{ 1848.554688, 1504.09375, 14.828125},
	{ 1848.554688, 1570.820313, 14.828125},
	{ 2492.765625, 1413.359375, 13.3203125},
	{ 2492.765625, 1485.101563, 15.2265625},
	{ 2439.164063, 1528.414063, 15.2265625},
	{ 2439.015625, 1577.0, 15.2265625},
	{ 2538.71875, 1601.65625, 15.2265625},
	{ 2595.757813, 1552.765625, 15.2265625},
	{ 2521.945313, 1485.101563, 15.2265625},
	{ 2454.148438, 1601.554688, 15.2265625},
	{ 2597.210938, 704.9296875, 15.2265625},
	{ 2578.007813, 761.0546875, 15.2265625},
	{ 2617.382813, 761.0546875, 15.2265625},
	{ 2551.15625, 761.0546875, 15.2265625},
	{ 2646.21875, 761.0546875, 15.2265625},
	{ 2560.945313, 1720.820313, 15.3359375},
	{ 2519.914063, 1725.226563, 15.3359375},
	{ 2519.804688, 1940.734375, 15.421875},
	{ 2610.742188, 1939.28125, 15.421875},
	{ 2673.882813, 1905.398438, 15.421875},
	{ 2673.882813, 1789.984375, 15.421875},
	{ 2673.882813, 1709.914063, 15.421875},
	{ 2412.640625, 1700.617188, 15.4375},
	{ 2420.398438, 1626.640625, 15.4375},
	{ 2435.078125, 1626.640625, 15.4375},
	{ 1845.226563, 1146.773438, 15.421875},
	{ 2503.3125, 1580.640625, 15.2265625},
	{ 2494.398438, 1560.804688, 15.2265625},
	{ 2495.992188, 1545.84375, 15.2265625},
	{ 2517.632813, 1537.296875, 15.2265625},
	{ 2548.289063, 1535.851563, 15.2265625},
	{ 2570.351563, 1519.34375, 15.2265625},
	{ 2013.328125, 1047.484375, 15.3046875},
	{ 2005.921875, 1059.867188, 15.3046875},
	{ 2005.921875, 1048.226563, 15.3046875},
	{ 2005.921875, 1036.585938, 15.3046875},
	{ 2025.914063, 993.0390625, 15.3046875},
	{ 2025.914063, 1022.984375, 15.3046875},
	{ 2025.914063, 1033.25, 15.3046875},
	{ 2025.914063, 1048.789063, 15.3046875},
	{ 2025.914063, 1064.492188, 15.3046875},
	{ 1881.835938, 1077.382813, 15.3046875},
	{ 1881.835938, 1051.03125, 15.3046875},
	{ 1881.835938, 1024.6875, 15.3046875},
	{ 1881.835938, 998.3359375, 15.3046875},
	{ 1881.835938, 971.9921875, 15.3046875},
	{ 1881.835938, 948.5234375, 15.3046875},
	{ 2819.710938, 1299.0, 15.421875},
	{ 2819.710938, 1281.15625, 15.421875},
	{ 2278.742188, 2008.25, 13.375},
	{ 2297.585938, 2008.890625, 15.359375},
	{ 2327.742188, 2007.132813, 15.359375},
	{ 2330.0625, 1992.015625, 13.921875}
};

new rankName[11][20] = {
	"None","New","Beginner","Rookie","Intermediate","Skilled","Advanced",
	"Professional","Expert","Elite","Ultimate"
};

new copRank[13][40] ={
// ASP, DSP, SP, DIGP ,IGP, DGP
    "None","Recruit","Constable","Senior Constable","Head Constable","Sub-Inspector of Police",
	"Inspector of Police","Assistant Superintendent of Police","Deputy Superintendent of Police",
	"Superintendent of Police","Deputy Inspector General of Police","Inspector General of Police",
	"Director General of Police"
};

/*
	taxi driver -

	pilot - 1 Air Pilot, 2 Pilot Officer , 3 Flying Officer,4 Flight Lieutenant,5 Squadron Leader,6 Wing Commander
	7 Air Commodore,8 Air Vice-Marshal,9 Air Marshal,10 Air Chief Marshal, 11 Marshal of the Royal Air Force

	gold miner
	drug dealer
	fisherman
	mechanic
	medic
	hitman

	police - 1 Constable,2 Senior Police Constable 3 Head Constable,4 Sub-Inspector of Police,
	5 Sub-Inspector of Police,6 Assistant Superintendent of Police, 7 Deputy Superintendent of Police,
	8 Superintendent of Police, 9 Deputy Inspector General of Police, 10 Inspector General of Police,
	11 Director General of Police

*/

stock Float:checkPlayerBankMoney( playerid )
{
	new strg[256];
	format(strg,256,"SELECT balance FROM bank WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new Float:bal;
	mysql_fetch_row(strg,"|",TmP);
	mysql_free_result(TmP);
	bal = floatstr(strg);
	return bal;
}
stock Float:getPlayerBankMoney( name[] )
{
	new strg[256];
	format(strg,256,"SELECT balance FROM bank WHERE userid = '%s'",name);
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new Float:bal;
	mysql_fetch_row(strg,"|",TmP);
	mysql_free_result(TmP);
	bal = floatstr(strg);
	return bal;
}

stock Float:todaysGoldRate(){
    new d,m,y;
    getdate(y,m,d);
    new Float:tmp;
    tmp =(float(y)+float(m)+float(d))/10000.0;
    if(d % 9 == 0)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.85);
    if(d % 9 == 1)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.86);
    if(d % 9 == 2)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.64);
    if(d % 9 == 3)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.58);
    if(d % 9 == 4)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.51);
    if(d % 8 == 5)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.57);
    if(d % 7 == 6)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.59);
    if(d % 7 == 7)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.5);
    if(d % 7 == 8)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.67);
    if(d % 7 == 0)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.71);
    if(d % 5 == 0)
	    tmp =((float(y)+float(m)+float(d))/10000.0 + 0.53);
    new Float:goldrate = 6.0 + tmp;
	return goldrate;
}
stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatsqroot(floatpower(floatsub(x1, x2), 2)+floatpower(floatsub(y1, y2), 2)+floatpower(floatsub(z1, z2), 2));
}
stock Float:GetDistanceBetweenPoints2D(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return floatsqroot(floatpower(floatsub(x1, x2), 2)+floatpower(floatsub(y1, y2), 2));
}

stock Float:getPlayerDistanceFromPoint( playerid, Float:x,Float:y,Float:z){
	if(IsPlayerConnected(playerid)){
	    new Float:x2,Float:y2,Float:z2;
	    GetPlayerPos(playerid,x2,y2,z2);
	    return GetDistanceBetweenPoints(x2,y2,z2,x,y,z);
	}
	return 0.0;
}
stock Float:getPlayerDistanceFromPlayer( playerid, toplayerid ){
	if(IsPlayerConnected(playerid) && (IsPlayerConnected(toplayerid))){
	    new Float:x1,Float:y1,Float:z1;
	    GetPlayerPos(playerid,x1,y1,z1);
		new Float:x2,Float:y2,Float:z2;
	    GetPlayerPos(toplayerid,x2,y2,z2);
	    return GetDistanceBetweenPoints(x2,y2,z2,x1,y1,z1);
	}
	return 0.0;
}

stock Float:getPlayerDistanceFromVehicle( playerid, v){
	new Float:d = 0.0;
	new Float:x,Float:y,Float:z;
	GetVehiclePos(v,x,y,z);
	d = getPlayerDistanceFromPoint( playerid, x,y,z);
	return d;
}

new skins[] = {
1,2,7,15,17,20,22,23,25,26,28,34,41,46,48,50,56,59,69,101,147,153,184,186,187,
188,191,192,193,217,223,227,228,234,242,247,248,249,250,258,259,292,291,290,
293,295,296,297,298,299,294,272,241,
};
new VehicleNames[][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto",
	"Taxi","Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion",
	"Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van",
	"Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider","Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR350","Walton","Regina",
	"Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson",
	"Mesa","RC Goblin","Hotring Racer","Hotring Racer","Bloodring Banger","Rancher","SuperGT","Elegant","Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain","Nebula","Majestic","Buccaneer","Shamal",
	"Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck","Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex",
	"Vincent","Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster","Monster","Uranus","Jester",
	"Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley",
	"Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)","Police Car (LVPD)","Police Ranger",
	"Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer","Luggage Trailer","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

enum BizInfoEnum
{
	bizno, cost,
	Float:ix,
	Float:iy,
	Float:iz,
	infopickup,
}
new bizes[][BizInfoEnum] = {
	{ 70006 , 535000 , 2168.264648 , 2794.090087 , 10.820312 },
	{ 70007 , 972000 ,1970.2466,2294.6101,16.4559},
	{ 70008 , 712500 , 2349.908203 , 2531.066162 , 10.820312 },
	{ 70009 , 435000 , 2365.829589 , 2072.618896 , 10.820312 },
	{ 70010 , 905000 , 2391.713134 , 2042.536743 , 10.820312 },
	{ 70011 , 642500 , 2473.572998 , 2036.007812 , 10.820312 },
	{ 70012 , 675000 , 2637.481445 , 1848.025390 , 11.023437 },
	{ 70013 , 505000 , 2636.780029 , 1672.806396 , 11.023437 },
	{ 70014 , 397500 , 2538.453613 , 2085.668457 , 10.820312 },
	{ 70015 , 427500 , 2103.293212 , 2227.236816 , 11.030031 },
	{ 70016 , 597500 , 2081.874511 , 2223.504394 , 11.023437 },
	{ 70017 , 327500 , 1966.332397 , 2158.207763 , 10.820312 },
	{ 70018 , 675000 , 1871.284545 , 2069.983398 , 10.820312 },
	{ 70019 , 582500 , 1156.962402 , 2069.940429 , 10.820312 },
	{ 70020 , 597500 , 777.642272 , 1869.555297 , 4.894862 },
	{ 70021 , 735000 , 2158.123779 , 941.257263 , 10.820312 },
	{ 70022 , 827500 , 2840.965576 , 2407.969970 , 11.068956 },
	{ 70023 , 470500 , 2756.936767 , 2474.738281 , 11.062500 },
	{ 70024 , 775000 , -94.1941 , 1109.0974 , 19.7422 },
	{ 70025 , 845500 ,614.9333,1689.7418,6.6968},
	{ 70026 , 320000 ,-1328.8250,2677.2173,49.7665},
	{ 70027 , 190000 ,70.3882,1218.6783,18.5165},
	{ 70028 , 495500 ,2113.7390,920.1079,10.5255},
	{ 70029 , 344500 ,-1426.1819,2593.4614,55.8012},
	{ 70030 , 456000 ,-1211.8781,1829.7202,41.7188},
	{ 70031 , 672000 ,173.6042,1175.1343,14.7578},
	{ 70032 , 843000 , 2391.3479,1041.9517,10.8203},
	{ 70033 , 675000 , 2202.1780,2475.3079,10.8203},
	{ 70034 , 750000 ,1595.9430,2199.4626,10.8203},
	{ 70035 , 150000 ,	2148.3787,2747.8557,10.8203}

};



new blockedForCommonManVehicles[] = {
	592,577,511,512,593,520,
	553,476,519,460,513,548,
	425,417,487,488,497,563,
	447,469,509,481,510,462,
	448,581,522,461,521,523,
	463,586,468,471,//499,422, 1|8 industrial vehicles
//	482,498,609,524,578,455,
//	403,414,582,443,514,600,
//	413,515,543,605,459,
//	531,408,552,478,456,554,
	568,424,573,579,500,
	444,556,557,470,
	495,416,433,431,438,437,
	523,427,490,528,407,544,
	596,598,597,599,432,601,
	420,472,473,493,595,484,
	430,453,452,446,454,485,
	537,457,483,508,532,486,
	406,530,538,434,545,588,
	571,572,423,442,428,409,
	574,449,525,583,539,435,
	450,584,591,606,607,608,
	610,611
};
new locked[MAX_VEHICLES];
new Menu:carExitMenu;
new Float:spawnPositions[][4] ={
{1898.1053,729.4443,14.2771,274.7357},
{1897.6487,737.0131,14.2734,254.6822},
{1902.1705,742.2553,14.2734,181.9882},
{1909.0939,742.1010,14.2734,183.8682},
{1916.1476,742.0967,14.2734,181.3616},
{1923.0634,742.1635,14.2734,180.1082},
{1929.9315,742.1720,14.2734,190.7617},
{1935.9857,742.1109,14.2734,182.4699},
{1942.7148,742.4865,14.2734,171.1898},
{1949.3462,742.4620,14.2734,167.4297},
{1956.0481,741.3585,14.2811,159.2830},
{1956.3269,738.0546,14.2811,91.6023},
{1956.5396,731.2560,14.2811,88.4689},
{1956.3356,724.5859,14.2811,106.0158},
{1956.7445,718.2590,14.2811,89.0956},
{1955.7568,721.7438,10.8203,107.0773},
{1955.7552,724.7762,10.8203,96.9055},
{1955.7980,731.2449,10.8203,101.2923},
{1956.0930,737.7182,10.8203,87.5056},
{1956.0760,741.9257,10.8203,178.3731},
{1949.4438,742.0089,10.8203,177.1198},
{1942.8026,742.3317,10.8203,180.2531},
{1935.9470,742.0981,10.8203,180.8798},
{1929.6243,741.8732,10.8203,181.5065},
{1922.7108,742.2762,10.8203,174.6131},
{1915.6974,742.8696,10.8198,176.4931},
{1908.7316,742.5197,10.8198,185.2665},
{1901.6702,742.7875,10.8198,187.1465},
{1896.9493,736.9633,10.8203,273.6273},
{1897.6425,729.0569,10.8198,278.6407},
{1956.1781,691.4246,10.8203,86.5532},
{1955.8271,684.7736,10.8203,94.7723},
{1956.1808,678.0888,10.8203,95.3990},
{1956.2101,671.2038,10.8203,88.0472},
{1955.9307,664.6148,10.8203,93.9772},
{1952.1958,664.3394,10.8203,3.5914},
{1945.6913,664.5414,10.8203,3.3739},
{1938.7504,664.4706,10.8203,358.7463},
{1932.0942,664.4504,10.8203,359.5180},
{1925.3137,664.4692,10.8203,0.7714},
{1918.8096,664.5709,10.8203,0.1448},
{1912.0190,664.6218,10.8203,359.5181},
{1905.0095,664.2528,10.8203,352.7205},
{1897.7701,664.3250,10.8203,348.4064},
{1897.4504,668.6310,10.8203,270.3131},
{1897.8453,675.1396,10.8203,276.4840},
{1897.5530,681.8389,10.8203,275.6398},
{1897.7998,677.2508,14.2765,275.5674},
{1897.7208,669.7736,14.2734,266.0949},
{1897.6923,664.2520,14.2734,358.6015},
{1904.6865,664.6368,14.2734,357.2757},
{1912.1206,664.5101,14.2734,359.4690},
{1918.6274,664.0769,14.2734,357.2757},
{1925.5005,664.2208,14.2734,355.7090},
{1931.9271,664.2191,14.2734,1.6624},
{1938.7094,664.1820,14.2734,350.0689},
{1945.4501,664.1735,14.2734,351.6356},
{1952.2886,664.1613,14.2734,358.8423},
{1956.1870,664.4612,14.2732,85.0822},
{1956.3228,671.3715,14.2732,87.8298},
{1956.4655,677.9998,14.2732,96.8441},
{1956.5995,688.2342,14.2732,90.3365}
};

enum playerInfo
{
	LoggedIn,
	Spawned,
	LastPickup,
	onphone,
	muted,
	minutes,
	Float:cb
};

new player[MAX_PLAYERS][playerInfo];
new hoursTimer[MAX_PLAYERS];
new Float:distanceTravelled[MAX_PLAYERS];
new fuel[MAX_VEHICLES];
new fueling[MAX_PLAYERS];
new Text3D:vHud[MAX_PLAYERS];
enum motelEnum
{
	houseno,
	Float:doorx,
	Float:doory,
	Float:doorz,
	cost
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

//----------------------------------------------------------

new sizeofmotels = 5;
new motel[][motelEnum] =
{
    { 0 , 2597.102539 , 760.236816 , 11.023437 , 150 },
    { 80007 , 2660.481933 , 749.079040 , 10.820312 },
    { 80008 , 2666.517578 , 749.462097 , 10.820312 },
    { 80009 , 2666.564208 , 743.370971 , 10.820312 },
    { 80010 , 2660.153564 , 743.273620 , 10.820312 },
    { 80011 , 2660.506103 , 743.382568 , 14.739588 },
    { 80012 , 2660.302978 , 749.254516 , 14.739588 },
    { 80013 , 2666.607421 , 749.147521 , 14.739588 },
    { 80014 , 2666.546142 , 743.393310 , 14.739588 },
    { 80015 , 2659.666748 , 719.534973 , 10.820312 },
    { 80016 , 2652.968505 , 719.549804 , 10.820312 },
    { 80017 , 2659.595458 , 713.237976 , 10.820312 },
    { 80018 , 2652.842041 , 713.265869 , 10.820312 },
    { 80019 , 2659.626220 , 712.989257 , 14.739588 },
    { 80020 , 2653.113281 , 713.205017 , 14.739588 },
    { 80021 , 2653.343261 , 719.533935 , 14.739588 },
    { 80022 , 2659.534667 , 719.722717 , 14.739588 },
    { 80023 , 2620.574462 , 719.518127 , 10.820312 },
    { 80024 , 2614.234375 , 719.441650 , 10.820312 },
    { 80025 , 2620.786621 , 713.240234 , 10.820312 },
    { 80026 , 2613.806884 , 713.400146 , 10.820312 },
    { 80027 , 2620.605957 , 713.095336 , 14.739588 },
    { 80028 , 2613.912597 , 713.187622 , 14.739588 },
    { 80029 , 2614.395996 , 719.410705 , 14.739588 },
    { 80030 , 2620.439453 , 719.362182 , 14.739588 },
    { 80031 , 2578.659179 , 719.465881 , 10.820312 },
    { 80032 , 2571.897216 , 719.381530 , 10.820312 },
    { 80033 , 2578.698730 , 713.129638 , 10.820312 },
    { 80034 , 2571.969482 , 713.199035 , 10.820312 },
    { 80035 , 2578.698974 , 713.284362 , 14.739588 },
    { 80036 , 2572.195556 , 713.324462 , 14.739588 },
    { 80037 , 2572.253906 , 719.377685 , 14.739588 },
    { 80038 , 2578.467529 , 719.609313 , 14.739588 },
    { 80039 , 2533.055175 , 719.517211 , 10.820312 },
    { 80040 , 2539.233642 , 719.596679 , 10.820312 },
    { 80041 , 2539.606201 , 713.206359 , 10.820312 },
    { 80042 , 2533.169433 , 713.176208 , 10.820312 },
    { 80043 , 2539.520019 , 713.174682 , 14.739588 },
    { 80044 , 2533.351806 , 713.229248 , 14.739588 },
    { 80045 , 2533.459960 , 719.497802 , 14.739588 },
    { 80046 , 2538.762207 , 719.480590 , 14.739588 },
    { 80047 , 2532.068359 , 742.982788 , 10.820312 },
    { 80048 , 2532.500732 , 749.399902 , 10.820312 },
    { 80049 , 2525.953613 , 743.583129 , 10.820312 },
    { 80050 , 2526.244140 , 749.653686 , 10.820312 },
    { 80051 , 2526.033447 , 742.929687 , 14.739588 },
    { 80052 , 2525.975097 , 749.312683 , 14.739588 },
    { 80053 , 2532.393554 , 749.277587 , 14.739588 },
    { 80054 , 2532.294677 , 743.337463 , 14.739588 },//48 rooms
    { 0 , 1475.841186 , 2012.238769 , 10.820312 , 200 },
    { 80132 , 1414.558227 , 1996.866577 , 10.820312 },
    { 80133 , 1414.482299 , 2003.778930 , 10.820312 },
    { 80134 , 1408.104736 , 2003.389282 , 10.820312 },
    { 80135 , 1408.245971 , 1996.620605 , 10.820312 },
    { 80136 , 1414.696533 , 2003.643920 , 14.739588 },
    { 80137 , 1414.567749 , 1997.046997 , 14.739588 },
    { 80138 , 1408.482421 , 2003.206176 , 14.739588 },
    { 80139 , 1408.111816 , 1996.566284 , 14.739588 },
    { 80140 , 1415.406127 , 2026.925781 , 10.820312 },
    { 80141 , 1421.703735 , 2026.810668 , 10.820312 },
    { 80142 , 1415.376831 , 2033.395507 , 10.820312 },
    { 80143 , 1421.741333 , 2033.192138 , 10.820312 },
    { 80144 , 1421.719482 , 2026.840576 , 14.739588 },
    { 80145 , 1415.209228 , 2027.001464 , 14.739588 },
    { 80146 , 1414.848754 , 2033.237182 , 14.739588 },
    { 80147 , 1421.443847 , 2033.035278 , 14.739588 },
    { 80148 , 1454.343017 , 2027.160156 , 10.820312 },
    { 80149 , 1460.734375 , 2027.019042 , 10.820312 },
    { 80150 , 1453.940551 , 2033.199340 , 10.820312 },
    { 80151 , 1460.987426 , 2033.159790 , 10.820312 },
    { 80152 , 1454.116210 , 2033.088867 , 14.739588 },
    { 80153 , 1460.574951 , 2033.164184 , 14.739588 },
    { 80154 , 1454.249511 , 2026.798828 , 14.739588 },
    { 80155 , 1460.501098 , 2027.003784 , 14.739588 },
    { 80156 , 1502.848144 , 2026.918090 , 10.820312 },
    { 80157 , 1496.057495 , 2027.019653 , 10.820312 },
    { 80158 , 1503.077270 , 2033.153564 , 10.820312 },
    { 80159 , 1496.303955 , 2033.267456 , 10.820312 },
    { 80160 , 1496.092895 , 2033.365478 , 14.739588 },
    { 80161 , 1503.074584 , 2033.256835 , 14.739588 },
    { 80162 , 1502.911010 , 2026.803344 , 14.739588 },
    { 80163 , 1496.255126 , 2026.968261 , 14.739588 },
    { 80164 , 1541.630737 , 2026.728881 , 10.820312 },
    { 80165 , 1535.271362 , 2026.866943 , 10.820312 },
    { 80166 , 1535.138793 , 2033.187622 , 10.820312 },
    { 80167 , 1541.913696 , 2033.171264 , 10.820312 },
    { 80168 , 1541.592407 , 2033.045043 , 14.739588 },
    { 80169 , 1535.341674 , 2033.141601 , 14.739588 },
    { 80170 , 1542.001708 , 2026.966064 , 14.739588 },
    { 80171 , 1535.283203 , 2026.901000 , 14.739588 },
    { 80172 , 1542.404785 , 1996.531372 , 10.820312 },
    { 80173 , 1542.567626 , 2003.548583 , 10.820312 },
    { 80174 , 1548.437011 , 1996.613769 , 10.820312 },
    { 80175 , 1548.773437 , 2003.354858 , 10.820312 },
    { 80176 , 1548.951904 , 2003.574829 , 14.739588 },
    { 80177 , 1548.620605 , 1996.979003 , 14.739588 },
    { 80178 , 1542.294799 , 1996.785888 , 14.739588 },
    { 80179 , 1542.479492 , 2003.483642 , 14.739588 }, // 48 rooms
    { 0 , 2610.113769 , 2008.584838 , 10.812887 , 150 },
    { 85603 , 2625.298339 , 2018.471435 , 10.820312 },
    { 85604 , 2634.176269 , 2018.767456 , 10.820312 },
    { 85605 , 2643.827148 , 2018.423828 , 10.816412 },
    { 85606 , 2617.826904 , 2018.695800 , 10.812887 },
    { 85607 , 2626.828857 , 2018.803100 , 10.820312 },
    { 85608 , 2636.275878 , 2018.797973 , 10.820312 },
    { 85609 , 2645.454101 , 2018.281738 , 10.816809 },
    { 85610 , 2652.853271 , 2018.700805 , 10.818616 },
    { 85611 , 2650.145507 , 2029.840087 , 10.812986 },
    { 85612 , 2648.300781 , 2030.080566 , 10.812986 },
    { 85613 , 2641.043945 , 2029.898681 , 10.820312 },
    { 85614 , 2638.714843 , 2029.956909 , 10.820312 },
    { 85615 , 2631.782470 , 2030.446411 , 10.820312 },
    { 85616 , 2629.562988 , 2030.260009 , 10.820312 },
    { 85617 , 2622.442382 , 2030.271728 , 10.820312 },
    { 85618 , 2620.605224 , 2029.968139 , 10.820312 },
    { 85619 , 2617.664062 , 2018.299072 , 14.116060 },
    { 85620 , 2625.145996 , 2018.579711 , 14.116060 },
    { 85621 , 2626.870605 , 2018.640747 , 14.116060 },
    { 85622 , 2634.615234 , 2018.949951 , 14.116060 },
    { 85623 , 2636.445556 , 2018.360717 , 14.116060 },
    { 85624 , 2643.541259 , 2018.790283 , 14.116060 },
    { 85625 , 2645.676513 , 2018.248901 , 14.116060 },
    { 85626 , 2653.145019 , 2018.708374 , 14.116060 },
    { 85627 , 2650.308837 , 2030.038696 , 14.116060 },
    { 85628 , 2648.356445 , 2030.154663 , 14.116060 },
    { 85629 , 2640.787109 , 2029.957885 , 14.116060 },
    { 85630 , 2639.008300 , 2029.916870 , 14.116060 },
    { 85631 , 2631.460937 , 2029.293945 , 14.116060 },
    { 85632 , 2629.240478 , 2029.355712 , 14.116060 },
    { 85633 , 2622.476074 , 2029.432617 , 14.116060 },
    { 85634 , 2620.659912 , 2029.800415 , 14.116060 },
    { 85635 , 2612.825195 , 2042.088989 , 10.820312 },
    { 85636 , 2613.119628 , 2044.153076 , 10.820312 },
    { 85637 , 2612.685302 , 2051.364013 , 10.820312 },
    { 85638 , 2612.392089 , 2053.647460 , 10.812986 },
    { 85639 , 2612.711669 , 2060.410400 , 10.812986 },
    { 85640 , 2612.672119 , 2062.298583 , 10.812986 },
    { 85641 , 2613.186767 , 2069.716308 , 10.820312 },
    { 85642 , 2612.895507 , 2071.655761 , 10.820312 },
    { 85643 , 2624.538330 , 2074.946044 , 10.812986 },
    { 85644 , 2624.516113 , 2067.626708 , 10.820312 },
    { 85645 , 2624.527099 , 2065.655761 , 10.820312 },
    { 85646 , 2624.269042 , 2058.314697 , 10.812986 },
    { 85647 , 2624.417968 , 2056.299072 , 10.812986 },
    { 85648 , 2624.177001 , 2048.830810 , 10.812986 },
    { 85649 , 2624.485107 , 2047.122070 , 10.812986 },
    { 85650 , 2624.072753 , 2039.569580 , 10.820312 },
    { 85651 , 2624.469970 , 2039.562255 , 14.116060 },
    { 85652 , 2624.209716 , 2046.776000 , 14.116060 },
    { 85653 , 2624.127929 , 2048.614990 , 14.116060 },
    { 85654 , 2624.346679 , 2056.433837 , 14.116060 },
    { 85655 , 2624.374755 , 2058.130615 , 14.116060 },
    { 85656 , 2624.260742 , 2065.514404 , 14.116060 },
    { 85657 , 2624.157958 , 2067.305664 , 14.116060 },
    { 85658, 2624.160400 , 2074.908935 , 14.116060 },
    { 85659 , 2613.278808 , 2072.072265 , 14.116060 },
    { 85660 , 2613.012695 , 2070.300292 , 14.116060 },
    { 85661 , 2612.914794 , 2062.640869 , 14.116060 },
    { 85662 , 2612.784667 , 2060.742675 , 14.116060 },
    { 85663 , 2612.784179 , 2053.390136 , 14.116060 },
    { 85664 , 2612.649414 , 2051.401367 , 14.116060 },
    { 85665 , 2612.786376 , 2043.992065 , 14.116060 },
    { 85666 , 2613.058837 , 2042.358398 , 14.116060 },
    { 85667 , 2623.614990 , 1979.436767 , 10.820312 },
    { 85668 , 2630.941162 , 1979.375610 , 10.820312 },
    { 85669 , 2633.076660 , 1979.631225 , 10.820312 },
    { 85670 , 2640.341552 , 1979.793334 , 10.820312 },
    { 85671 , 2642.185546 , 1979.612670 , 10.820312 },
    { 85672 , 2649.654052 , 1980.065551 , 10.820312 },
    { 85673 , 2651.338867 , 1979.534301 , 10.820312 },
    { 85674 , 2658.804443 , 1979.611450 , 10.820070 },
    { 85675 , 2656.480712 , 1968.214843 , 10.820312 },
    { 85676 , 2654.424316 , 1968.220092 , 10.820312 },
    { 85677 , 2647.200439 , 1968.246948 , 10.820312 },
    { 85678 , 2645.606933 , 1967.813354 , 10.820312 },
    { 85679 , 2637.851806 , 1968.144287 , 10.820312 },
    { 85680 , 2635.656250 , 1967.970458 , 10.820312 },
    { 85681 , 2628.566406 , 1967.947509 , 10.820312 },
    { 85682 , 2626.530517 , 1968.119628 , 10.820312 },
    { 85683 , 2623.625244 , 1979.478515 , 14.116060 },
    { 85684 , 2631.270507 , 1979.608276 , 14.116060 },
    { 85685 , 2633.100341 , 1979.428955 , 14.116060 },
    { 85686 , 2640.586914 , 1979.413574 , 14.116060 },
    { 85687 , 2642.226562 , 1979.316894 , 14.116060 },
    { 85688 , 2649.583007 , 1979.325805 , 14.116060 },
    { 85689 , 2651.376708 , 1979.369628 , 14.116060 },
    { 85690 , 2659.186767 , 1979.429565 , 14.116060 },
    { 85691 , 2656.650390 , 1968.684448 , 14.116060 },
    { 85692 , 2654.664306 , 1968.708862 , 14.116060 },
    { 85693 , 2646.984619 , 1967.787719 , 14.116060 },
    { 85684 , 2645.032958 , 1968.216064 , 14.116060 },
    { 85695 , 2638.002197 , 1968.402587 , 14.116060 },
    { 85696 , 2636.079833 , 1968.273803 , 14.116060 },
    { 85697 , 2628.444580 , 1968.551635 , 14.116060 },
    { 85698 , 2626.756591 , 1967.973266 , 14.116060 },// 96 rooms
    { 0 , 2459.605468 , 1646.572021 , 10.820312 , 250 },
    { 82010 , 2461.334228 , 1682.309814 , 11.023437 },
    { 82011 , 2466.100097 , 1682.191772 , 11.023437 },
    { 82012 , 2471.295898 , 1681.842895 , 11.023437 },
    { 82013 , 2476.412109 , 1682.328613 , 11.023437 },
    { 82014 , 2481.431884 , 1682.643798 , 11.023437 },
    { 82015 , 2486.380615 , 1682.311401 , 11.023437 },
    { 82016 , 2491.373779 , 1681.976196 , 11.023437 },
    { 82017 , 2496.250732 , 1681.648559 , 11.023437 },
    { 82018 , 2501.154052 , 1682.136962 , 11.023437 },
    { 82019 , 2506.358642 , 1681.787475 , 11.023437 },
    { 82020 , 2511.180419 , 1681.463256 , 11.023437 },
    { 82021 , 2516.060058 , 1681.135009 , 11.023437 },
    { 82022 , 2516.238769 , 1679.214477 , 11.023437 },
    { 82023 , 2516.435791 , 1674.229614 , 11.023437 },
    { 82024 , 2516.433349 , 1669.462646 , 11.023437 },
    { 82025 , 2516.804199 , 1664.223388 , 11.023437 },
    { 82026 , 2515.777099 , 1659.019042 , 11.023437 },
    { 82027 , 2515.913085 , 1654.030029 , 11.023437 },
    { 82028 , 2516.055419 , 1648.805419 , 11.023437 },
    { 82029 , 2516.200195 , 1643.582031 , 11.015666 },
    { 82030 , 2513.515869 , 1643.579833 , 11.023437 },
    { 82031 , 2508.431396 , 1643.578491 , 11.023437 },
    { 82032 , 2503.329589 , 1643.579711 , 11.023437 },
    { 82033 , 2498.383300 , 1643.579589 , 11.015666 },
    { 82034 , 2498.349853 , 1643.586059 , 14.265625 },
    { 82035 , 2503.503173 , 1643.580932 , 14.265625 },
    { 82036 , 2508.317871 , 1643.579467 , 14.265625 },
    { 82037 , 2513.327880 , 1643.579467 , 14.265625 },
    { 82038 , 2516.576904 , 1643.578491 , 14.265625 },
    { 82039 , 2516.435058 , 1648.434082 , 14.265625 },
    { 82040 , 2516.368896 , 1653.657592 , 14.273241 },
    { 82041 , 2516.383789 , 1658.760131 , 14.273241 },
    { 82042 , 2516.176513 , 1664.134399 , 14.273241 },
    { 82043 , 2516.656250 , 1669.136474 , 14.273241 },
    { 82044 , 2516.521484 , 1674.115234 , 14.273241 },
    { 82045 , 2516.351318 , 1678.785766 , 14.273241 },
    { 82046 , 2516.340576 , 1682.297973 , 14.265625 },
    { 82047 , 2511.554443 , 1682.372070 , 14.265625 },
    { 82048 , 2506.374511 , 1682.398803 , 14.265625 },
    { 82049 , 2501.304443 , 1682.565185 , 14.265625 },
    { 82050 , 2496.538818 , 1682.456665 , 14.265625 },
    { 82051 , 2491.633789 , 1682.176391 , 14.265625 },
    { 82052 , 2486.298095 , 1682.659179 , 14.265625 },
    { 82053 , 2481.434082 , 1682.479370 , 14.265625 },
    { 82054 , 2476.552490 , 1682.467895 , 14.265625 },
    { 82055 , 2471.555175 , 1682.331542 , 14.265625 },
    { 82056 , 2466.529785 , 1682.406860 , 14.265625 },
    { 82057 , 2461.390625 , 1682.478271 , 14.265625 },
    { 82058 , 2406.402587 , 1682.461791 , 11.023437 },
    { 82059 , 2401.407958 , 1682.334350 , 11.023437 },
    { 82060 , 2396.413085 , 1682.064941 , 11.023437 },
    { 82061 , 2392.018310 , 1682.012329 , 11.023437 },
    { 82062 , 2386.585937 , 1682.207275 , 11.023437 },
    { 82063 , 2381.599853 , 1682.386596 , 11.023437 },
    { 82064 , 2376.327148 , 1682.283203 , 11.023437 },
    { 82065 , 2371.573730 , 1682.374023 , 11.023437 },
    { 82066 , 2366.301757 , 1682.470214 , 11.023437 },
    { 82067 , 2361.462402 , 1682.330688 , 11.023437 },
    { 82068 , 2358.481201 , 1679.352661 , 11.023437 },
    { 82069 , 2358.194335 , 1674.431396 , 11.023437 },
    { 82070 , 2358.615722 , 1669.382568 , 11.023437 },
    { 82071 , 2358.551513 , 1664.312011 , 11.023437 },
    { 82072 , 2358.109619 , 1659.254272 , 11.023437 },
    { 82073 , 2358.277343 , 1654.014038 , 11.023437 },
    { 82074 , 2358.213378 , 1648.510498 , 11.023437 },
    { 82075, 2358.233398 , 1643.466552 , 11.023437 },
    { 82076 , 2359.086425 , 1643.703857 , 11.015666 },
    { 82077 , 2363.202148 , 1643.226928 , 11.023437 },
    { 82078 , 2368.262207 , 1642.967041 , 11.023437 },
    { 82079 , 2373.391113 , 1643.126220 , 11.023437 },
    { 82080 , 2373.484375 , 1643.038940 , 14.272836 },
    { 82081 , 2368.387939 , 1643.265014 , 14.274522 },
    { 82082 , 2363.406494 , 1643.382934 , 14.273437 },
    { 82083 , 2358.663574 , 1642.895019 , 14.273437 },
    { 82084 , 2358.602050 , 1643.691650 , 14.281055 },
    { 82085 , 2358.328613 , 1648.426391 , 14.281055 },
    { 82086 , 2358.117919 , 1653.647583 , 14.281055 },
    { 82087 , 2358.581542 , 1659.359741 , 14.281055 },
    { 82088 , 2358.223144 , 1664.408935 , 14.281055 },
    { 82089 , 2358.029296 , 1669.138916 , 14.281055 },
    { 82090 , 2358.253906 , 1674.217895 , 14.281055 },
    { 82091 , 2358.203613 , 1679.298950 , 14.281055 },
    { 82092 , 2361.207519 , 1682.695922 , 14.281055 },
    { 82093 , 2366.410644 , 1682.675292 , 14.281055 },
    { 82094 , 2371.205810 , 1682.525634 , 14.281055 },
    { 82095 , 2376.311279 , 1682.452514 , 14.281055 },
    { 82096 , 2381.271728 , 1682.479858 , 14.281055 },
    { 82097 , 2386.329101 , 1682.833007 , 14.281055 },
    { 82098 , 2391.434570 , 1682.362915 , 14.281055 },
    { 82099 , 2396.377685 , 1682.839233 , 14.281055 },
    { 82100 , 2401.235107 , 1682.214599 , 14.273437 },
    { 82102 , 2406.190673 , 1681.954101 , 14.273437 },// 93
/*    { 0 , 1766.779052 , 2741.633789 , 10.835937 , 225 },
    { 83301 , 1778.410278 , 2735.427490 , 14.273517 },
    { 83302 , 1780.754028 , 2745.123046 , 14.273517 },
    { 83303 , 1781.484619 , 2746.718994 , 14.273517 },
    { 83304 , 1783.674072 , 2756.368896 , 14.273517 },
    { 83305 , 1784.513061 , 2758.409912 , 14.273517 },
    { 83306 , 1786.960083 , 2767.619140 , 14.273517 },
    { 83307 , 1787.689208 , 2769.576416 , 14.273517 },
    { 83308 , 1789.736572 , 2778.859863 , 14.273517 },
    { 83309 , 1777.460205 , 2735.441894 , 11.350912 },
    { 83310 , 1780.610229 , 2744.892822 , 11.343750 },
    { 83311 , 1781.552246 , 2747.260009 , 11.343750 },
    { 83312 , 1783.955688 , 2756.127197 , 11.343750 },
    { 83313 , 1784.725463 , 2758.661132 , 11.343750 },
    { 83314 , 1786.866577 , 2767.789306 , 11.343750 },
    { 83315 , 1787.629516 , 2769.645263 , 11.343750 },
    { 83316 , 1789.206420 , 2780.062744 , 11.320357 },
    { 83317 , 1800.721191 , 2776.523437 , 11.343750 },
    { 83318 , 1798.447631 , 2766.709960 , 11.343750 },
    { 83319 , 1797.839599 , 2764.568115 , 11.343750 },
    { 83320 , 1795.347534 , 2755.688964 , 11.343750 },
    { 83321 , 1794.692504 , 2753.205078 , 11.343750 },
    { 83322 , 1792.428588 , 2744.147949 , 11.343750 },
    { 83323 , 1791.802612 , 2741.992675 , 11.343750 },
    { 83324 , 1792.388061 , 2743.840087 , 14.273517 },
    { 83325 , 1791.750366 , 2742.081787 , 14.273517 },
    { 83326 , 1789.449096 , 2732.648193 , 14.273517 },
    { 83327 , 1790.068237 , 2731.876464 , 11.343750 },
    { 83328 , 1800.933959 , 2776.670898 , 14.273517 },
    { 83329 , 1798.167236 , 2766.791748 , 14.273517 },
    { 83330 , 1797.851196 , 2764.958496 , 14.273517 },
    { 83331 , 1795.317260 , 2755.467285 , 14.273517 },
    { 83332 , 1794.915161 , 2753.395996 , 14.273517 },
    { 83333 , 1830.744995 , 2740.950683 , 11.343750 },
    { 83334 , 1832.404663 , 2742.542968 , 11.343750 },
    { 83335 , 1838.903320 , 2749.661621 , 11.350912 },
    { 83336 , 1840.814208 , 2751.085449 , 11.343750 },
    { 83337 , 1847.165649 , 2757.843505 , 11.343750 },
    { 83338 , 1848.842285 , 2759.207275 , 11.343750 },
    { 83339 , 1847.344970 , 2757.865722 , 14.273437 },
    { 83340 , 1848.921875 , 2759.357177 , 14.273437 },
    { 83341 , 1855.508422 , 2766.005371 , 14.265686 },
    { 83342 , 1855.407592 , 2767.818359 , 11.273015 },
    { 83343 , 1823.617065 , 2733.939941 , 11.343750 },
    { 83344 , 1823.558227 , 2733.815429 , 14.273437 },
    { 83345 , 1830.644287 , 2741.312988 , 14.273437 },
    { 83346 , 1832.237426 , 2742.532470 , 14.273437 },
    { 83347 , 1838.741699 , 2749.507568 , 14.273437 },
    { 83348 , 1840.454223 , 2750.826416 , 14.273437 },
    { 83349 , 1864.932128 , 2775.155517 , 11.343750 },
    { 83350 , 1872.123168 , 2782.509765 , 11.343750 },
    { 83351 , 1873.377563 , 2783.833251 , 11.343750 },
    { 83352 , 1881.767578 , 2792.052246 , 11.343750 },
    { 83353 , 1880.331787 , 2790.960205 , 11.343750 },
    { 83354 , 1888.388305 , 2798.795898 , 11.343750 },
    { 83355 , 1890.211914 , 2800.666748 , 11.343750 },
    { 83356 , 1896.898681 , 2807.351806 , 14.265686 },
    { 83357 , 1888.579833 , 2798.905273 , 14.273437 },
    { 83358 , 1889.888671 , 2800.295898 , 14.273437 },
    { 83359 , 1880.031005 , 2790.522460 , 14.273437 },
    { 83360 , 1881.716918 , 2792.242919 , 14.273437 },
    { 83361 , 1871.799560 , 2782.316894 , 14.273437 },
    { 83362 , 1873.448974 , 2783.710937 , 14.273437 },
    { 83363 , 1864.958374 , 2775.483398 , 14.273437 },
    { 83364 , 1897.421142 , 2807.771972 , 11.343750 },
    { 83365 , 1815.669677 , 2832.461425 , 14.273517 },
    { 83366 , 1813.576538 , 2823.101562 , 14.273517 },
    { 83367 , 1812.995849 , 2820.836181 , 14.273517 },
    { 83368 , 1810.639404 , 2811.649902 , 14.273517 },
    { 83369 , 1809.729492 , 2809.552734 , 14.273517 },
    { 83370 , 1807.364868 , 2800.427001 , 14.273517 },
    { 83371 , 1806.834594 , 2798.072509 , 14.273517 },
    { 83372 , 1804.581054 , 2789.050048 , 14.273517 },
    { 83373 , 1806.959106 , 2798.296142 , 11.343750 },
    { 83374 , 1807.417480 , 2800.497802 , 11.343750 },
    { 83375 , 1810.447387 , 2811.530761 , 11.343750 },
    { 83376 , 1809.986083 , 2809.675781 , 11.343750 },
    { 83377 , 1813.477172 , 2822.796875 , 11.343750 },
    { 83378 , 1812.935180 , 2821.218750 , 11.343750 },
    { 83379 , 1804.194946 , 2788.616455 , 11.343750 },
    { 83380 , 1793.432495 , 2791.636962 , 11.343750 },
    { 83381 , 1795.840820 , 2801.114746 , 11.343750 },
    { 83382 , 1796.524902 , 2803.389648 , 11.343750 },
    { 83383 , 1798.964477 , 2812.583251 , 11.343750 },
    { 83384 , 1799.596801 , 2814.706298 , 11.343750 },
    { 83385 , 1801.965820 , 2823.854003 , 11.343750 },
    { 83386 , 1802.575561 , 2825.936035 , 11.343750 },
    { 83387 , 1805.170288 , 2835.409912 , 11.343750 },
    { 83388 , 1815.993041 , 2832.521484 , 11.343750 },
    { 83389 , 1793.320800 , 2791.715820 , 14.273517 },
    { 83390 , 1796.104125 , 2801.246093 , 14.273517 },
    { 83391 , 1796.587280 , 2803.531494 , 14.273517 },
    { 83392 , 1798.832641 , 2812.485595 , 14.273517 },
    { 83393 , 1799.490356 , 2814.298095 , 14.273517 },
    { 83394 , 1801.937866 , 2823.760009 , 14.273517 },
    { 83395 , 1802.703613 , 2825.790527 , 14.273517 },
    { 83396 , 1805.019775 , 2835.308105 , 14.273517 },
    { 83397 , 1754.767944 , 2735.350830 , 11.343750 },
    { 83398 , 1743.918334 , 2732.507812 , 11.343750 },
    { 83399 , 1741.221435 , 2741.935791 , 11.343750 },
    { 83401 , 1740.750732 , 2744.282714 , 11.343750 },
    { 83402 , 1737.982299 , 2753.273925 , 11.343750 },
    { 83403 , 1737.558227 , 2755.443359 , 11.343750 },
    { 83404 , 1735.181762 , 2764.566162 , 11.343750 },
    { 83405 , 1734.578491 , 2767.133544 , 11.343750 },
    { 83406 , 1731.999267 , 2776.060058 , 11.350912 },
    { 83407 , 1742.894653 , 2778.948974 , 11.343750 },
    { 83408 , 1745.570678 , 2769.646728 , 11.343750 },
    { 83409 , 1745.948974 , 2767.636962 , 11.343750 },
    { 83410 , 1748.510009 , 2758.386718 , 11.343750 },
    { 83411 , 1748.811767 , 2756.270751 , 11.343750 },
    { 83412 , 1751.631469 , 2747.051269 , 11.343750 },
    { 83413 , 1752.132080 , 2744.814697 , 11.343750 },
    { 83414 , 1752.223510 , 2744.645263 , 14.273517 },
    { 83415 , 1751.607788 , 2747.166259 , 14.273517 },
    { 83416 , 1754.692871 , 2735.743408 , 14.273517 },
    { 83417 , 1749.064575 , 2756.229248 , 14.273517 },
    { 83418 , 1748.588134 , 2758.176513 , 14.273517 },
    { 83419 , 1745.693115 , 2769.638671 , 14.273517 },
    { 83420 , 1746.029418 , 2767.904052 , 14.273517 },
    { 83421 , 1743.099487 , 2778.927734 , 14.273517 },
    { 83422 , 1731.826293 , 2776.097900 , 14.273517 },
    { 83423 , 1734.675048 , 2766.980468 , 14.273517 },
    { 83424 , 1735.253662 , 2764.388427 , 14.273517 },
    { 83425 , 1737.679077 , 2755.541992 , 14.273517 },
    { 83426 , 1738.064575 , 2753.107421 , 14.273517 },
    { 83427 , 1740.729003 , 2744.299804 , 14.273517 },
    { 83428 , 1741.172851 , 2741.987548 , 14.273517 },
    { 83428 , 1743.576293 , 2732.804687 , 14.273517 },
    { 83429 , 1739.538818 , 2791.591308 , 11.343750 },
    { 83430 , 1736.944946 , 2801.134277 , 11.343750 },
    { 83431 , 1736.585815 , 2803.501464 , 11.343750 },
    { 83432 , 1734.077758 , 2812.467773 , 11.343750 },
    { 83433 , 1733.441528 , 2814.409423 , 11.343750 },
    { 83434 , 1730.576171 , 2825.848876 , 11.343750 },
    { 83435 , 1731.013916 , 2823.759521 , 11.343750 },
    { 83436 , 1728.081420 , 2834.836425 , 11.343750 },
    { 83437 , 1717.000854 , 2832.354980 , 11.350912 },
    { 83438 , 1719.418334 , 2823.055175 , 11.343750 },
    { 83439 , 1719.983398 , 2820.834960 , 11.343750 },
    { 83440 , 1723.095092 , 2809.480712 , 11.343750 },
    { 83441 , 1722.555419 , 2811.655029 , 11.343750 },
    { 83442 , 1726.154541 , 2798.223632 , 11.343750 },
    { 83443, 1725.463378 , 2800.654296 , 11.343750 },
    { 83444 , 1728.591430 , 2788.947265 , 11.350912 },
    { 83445 , 1739.713378 , 2791.588623 , 14.273517 },
    { 83446 , 1736.891601 , 2801.323242 , 14.273517 },
    { 83447 , 1736.359741 , 2803.510742 , 14.273517 },
    { 83448 , 1733.419433 , 2814.744140 , 14.273517 },
    { 83449 , 1734.057617 , 2812.723876 , 14.273517 },
    { 83450 , 1731.028198 , 2823.669433 , 14.273517 },
    { 83451 , 1730.245239 , 2826.237060 , 14.273517 },
    { 83452 , 1727.802368 , 2835.254638 , 14.273517 },
    { 83453 , 1728.481689 , 2789.102294 , 14.273517 },
    { 83454 , 1726.038085 , 2798.147705 , 14.273517 },
    { 83455 , 1725.351440 , 2800.492919 , 14.273517 },
    { 83456 , 1723.022949 , 2809.463623 , 14.273517 },
    { 83457 , 1722.649291 , 2811.544921 , 14.273517 },
    { 83458 , 1720.343750 , 2820.615234 , 14.273517 },
    { 83459 , 1717.021728 , 2832.403076 , 14.273517 },
    { 83460 , 1719.533325 , 2823.384521 , 14.273517 },
    { 83461 , 1738.757202 , 2861.874023 , 11.335937 },
    { 83462 , 1740.439331 , 2863.010742 , 11.335937 },
    { 83463 , 1749.044189 , 2867.854003 , 11.335937 },
    { 83464 , 1751.260742 , 2868.620605 , 11.335937 },
    { 83465 , 1762.887817 , 2871.228515 , 11.335937 },
    { 83466 , 1760.198242 , 2870.891357 , 11.335937 },
    { 83467 , 1775.013549 , 2870.928710 , 11.335937 },
    { 83468 , 1772.100830 , 2871.260253 , 11.335937 },
    { 83469 , 1786.445800 , 2867.692138 , 11.335937 },
    { 83470 , 1783.758300 , 2868.714355 , 11.335937 },
    { 83471 , 1796.235595 , 2861.453125 , 11.335937 },
    { 83472 , 1794.652954 , 2863.069335 , 11.335937 },
    { 83473 , 1803.961669 , 2854.912597 , 11.335937 },
    { 83474 , 1731.647705 , 2855.189453 , 11.335937 },
    { 83475 , 1731.222656 , 2854.942626 , 14.265625 },
    { 83476 , 1738.949218 , 2861.823486 , 14.265625 },
    { 83477 , 1740.408081 , 2863.091064 , 14.265625 },
    { 83478 , 1750.659545 , 2868.511474 , 14.265625 },
    { 83479 , 1749.141967 , 2867.819091 , 14.265625 },
    { 83480 , 1762.746337 , 2871.162841 , 14.265625 },
    { 83481 , 1760.362670 , 2871.068359 , 14.265625 },
    { 83482 , 1774.547607 , 2871.027343 , 14.265625 },
    { 83483 , 1772.442138 , 2871.137939 , 14.265625 },
    { 83484 , 1786.401855 , 2867.830566 , 14.265625 },
    { 83485 , 1784.064208 , 2868.370117 , 14.265625 },
    { 83486 , 1796.049804 , 2861.347412 , 14.265625 },
    { 83487 , 1794.647827 , 2863.000488 , 14.265625 },
    { 83488 , 1803.492919 , 2854.895019 , 14.265625 }, // 188 rooms
*/  { 0 , 2106.597412 , 2484.731445 , 11.070373 , 450 },
    { 86540 , 2097.810546 , 2493.797363 , 11.078125 },
    { 86541 , 2093.074462 , 2493.202392 , 14.838953 },
    { 86542 , 2097.682861 , 2493.542236 , 14.838953 },
    { 86543 , 2102.924072 , 2493.194580 , 14.838953 },
    { 86544 , 2114.215332 , 2499.522216 , 14.838951 },
    { 86545 , 2085.653320 , 2486.025634 , 11.078125 },
    { 86546 , 2078.265380 , 2485.939697 , 11.078125 },
    { 86547 , 2067.679687 , 2485.736083 , 11.078125 },
    { 86548 , 2056.702880 , 2485.916992 , 11.078125 }

};

stock Float:fmotels( i , j , motelEnum:e ){
	new a;
	for(a = 0;a < sizeof(motel);a++){
	    if(motel[a][houseno] == 0){
			if(i == 0){
			    break;
			}
			i--;
	    }
	}
	if(a+j >= sizeof(motel))
	    return 0.0;
	return Float:motel[a+j][e];
}
stock imotels( i , j , motelEnum:e ){
	new a;
	for(a = 0;a < sizeof(motel);a++){
	    if(motel[a][houseno] == 0){
			if(i == 0){
			    break;
			}
			i--;
	    }
	}
	if(a+j >= sizeof(motel))
	    return 0;
	return motel[a+j][e];
}
new motelId[sizeof(motel)];

enum houseEnum
{
	houseno, cost,
	Float:doorx,	Float:doory,	Float:doorz,
	Float:inx,	Float:iny, Float:inz,	interior,
	Float:outx,	Float:outy,	Float:outz, Float:outr,
	Float:parkx,Float:parky, Float:parkz,Float:parkr
};
new Float:houses[][houseEnum] =
{
	{
	    90007 , 1705000 ,
	    2168.661376 , 772.403808 , 11.460937,
	    2282.841064 , -1138.161376 , 1050.898437 , 11,
	    2166.624023 , 773.873107 , 11.460937 , 63.099922,
	    2171.454345 , 779.688232 , 11.188008 , 89.814064
	},
	{
	    93232 , 1850000 ,
	    2228.479736 , 690.455993 , 11.460479,
	    2233.629150 , -1111.194946 , 1050.882812 , 5,
	    2226.027587 , 692.150817 , 11.460479 , 38.708728,
	    2220.787353 , 688.066650 , 11.187530 , 0.709415
	},
	{
	    98467 , 2550000 ,
	    2450.078613 , 714.261413 , 11.468292,
	    2365.308593 , -1132.478393 , 1050.875000 , 8,
	    2446.072021 , 710.095031 , 11.468292 , 120.186897,
	    2452.413085 , 706.283630 , 11.195358 , 91.270141
	},
	{
	    97654 , 2060000 ,
	    1600.598632 , 2609.333984 , 10.820312,
	    2194.790039 , -1204.349975 , 1049.023437 , 6,
	    1603.241210 , 2600.180419 , 10.820312 , 210.478347,
	    1609.582763 , 2604.638427 , 10.554456 , 90.826683
	},
	{
	    93892 , 1805000 ,
	    1028.570800 , 1906.078002 , 11.460937,
	    2261.399902 , -1135.939941 , 1050.632812 , 10,
	    1023.191833 , 1909.318359 , 11.379490 , 65.230682,
	    1032.398437 , 1912.727905 , 11.192163 , 88.560501
	},
	{
	    91008 , 1085000 ,
	    1550.577514 , 2845.526611 , 10.826543,
	    2496.254150 , -1694.796020 , 1014.742187 , 3,
	    1550.723266 , 2837.372314 , 10.820312 , 166.164062,
	    1541.598266 , 2834.473632 , 10.547213 , 272.451965
	},
	{
	    96567 , 2605000 ,
	    886.405273 , 1980.545410 , 11.460937,
	    2215.399414 , -1076.470703 , 1050.484375 , 1,
	    890.393249 , 1977.474609 , 11.461564 , 267.655731,
	    882.439086 , 1973.545166 , 11.188023 , 270.260803
	},
	{
	    97776 , 1080000 ,
	    1640.742431 , 2044.656616 , 11.319854,
	    2233.948730 , -1112.166625 , 1050.882812 , 5,
	    1637.616088 , 2041.942871 , 11.319854 , 118.480155,
	    1642.781372 , 2036.974243 , 11.046926 , 92.189155
	},
	{
	    91876 , 2505000 ,
	    986.270263 , 2314.070556 , 11.460937,
	    2194.947753 , -1204.129516 , 1049.023437 , 6,
	    990.428039 , 2311.636230 , 11.460937 , 233.563354,
	    982.705078 , 2307.684326 , 11.188018 , 270.767456
	},
	{
	    99540 , 1805000 ,
	    1998.756591 , 2722.355957 , 10.820312,
	    2260.971435 , -1135.965454 , 1050.632812 , 10,
	    1998.965942 , 2727.581787 , 10.820312 , 13.562799,
	    1991.319213 , 2730.055419 , 10.547392 , 270.025573
	},
	{
	    96598 , 1805000 ,
	    1272.359008 , 2564.277832 , 10.820312,
	    2318.652832 , -1025.142211 , 1050.210937 , 9,
	    1278.829589 , 2564.405273 , 10.820312 , 273.133361,
	    1281.868408 , 2573.170898 , 10.534276 , 180.385635
	},
	{
	    90987 , 1600000 ,
	    1465.316772 , 1920.230346 , 11.460937,
	    2365.262451 , -1132.899780 , 1050.875000 , 8,
	    1468.609008 , 1920.091918 , 11.347118 , 318.069641,
	    1469.114135 , 1928.958740 , 11.112183 , 273.682128
	}

};

new hParkId[sizeof(houses)];

new Float:parking[][4] = {

	{ 2176.176513 , 988.291687 , 10.540039 , 179.507415 },
	{ 2179.497802 , 988.263122 , 10.540039 , 179.508209 },
	{ 2182.477539 , 988.237609 , 10.540039 , 179.508209 },
	{ 2185.651611 , 988.210327 , 10.540039 , 179.507812 },
	{ 2188.875000 , 988.182678 , 10.540039 , 179.507812 },
	{ 2289.261230 , 1387.944091 , 10.547390 , 179.027618 },
	{ 2286.015136 , 1387.999267 , 10.547390 , 179.027420 },
	{ 2282.645263 , 1388.056396 , 10.547390 , 179.027816 },
	{ 2279.497314 , 1388.110107 , 10.547390 , 179.027618 },
	{ 2351.295166 , 1497.846435 , 42.547519 , 268.506530 },
	{ 2351.203857 , 1494.333496 , 42.547523 , 268.506530 },
	{ 2351.109375 , 1490.719848 , 42.547527 , 268.506530 },
	{ 2351.026367 , 1487.548828 , 42.547531 , 268.506530 },
	{ 2350.933105 , 1483.984619 , 42.547538 , 268.506530 },
	{ 2350.838378 , 1480.350219 , 42.547550 , 268.506530 },
	{ 2350.738769 , 1476.519897 , 42.547554 , 268.506530 },
	{ 2350.650390 , 1473.129028 , 42.547557 , 268.506530 },
	{ 2350.469726 , 1466.195800 , 42.547573 , 268.506530 },
	{ 2350.551269 , 1469.320434 , 42.547565 , 268.506530 },
	{ 2350.362304 , 1462.070190 , 42.547576 , 268.506530 },
	{ 2350.283935 , 1459.067016 , 42.547584 , 268.506530 },
	{ 2350.185058 , 1455.282714 , 42.547592 , 268.506530 },
	{ 2350.081542 , 1451.302368 , 42.547595 , 268.506530 },
	{ 2349.997558 , 1448.058105 , 42.547603 , 268.506530 },
	{ 2349.915039 , 1444.882812 , 42.547611 , 268.506530 },
	{ 2303.968750 , 1405.118041 , 42.547389 , 88.819419 },
	{ 2304.036865 , 1408.413208 , 42.547294 , 88.819419 },
	{ 2304.110351 , 1411.973632 , 42.547191 , 88.819419 },
	{ 2304.181640 , 1415.440307 , 42.547096 , 88.819419 },
	{ 2304.257324 , 1419.101684 , 42.546993 , 88.819419 },
	{ 2304.333496 , 1422.791137 , 42.546894 , 88.819419 },
	{ 2199.855957 , 1821.951293 , 10.547397 , 359.821960 },
	{ 2196.387695 , 1821.497314 , 10.547396 , 359.822509 },
	{ 2192.993896 , 1821.507568 , 10.547396 , 359.821960 },
	{ 2188.917724 , 1821.520141 , 10.547396 , 359.821960 },
	{ 2050.292724 , 2469.584960 , 10.547386 , 180.896133 },
	{ 2046.323242 , 2469.522949 , 10.565896 , 180.896133 },
	{ 2042.444580 , 2469.462646 , 10.566349 , 180.896133 },
	{ 2153.267578 , 2509.548583 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2505.861572 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2502.273193 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2498.539794 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2494.855712 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2491.070068 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2487.333496 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2483.769531 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2479.935546 , 10.547396 , 89.996803 },
	{ 2153.267578 , 2475.955322 , 10.547396 , 89.996803 },
	{ 1527.724365 , 2203.528564 , 10.547396 , 359.365264 },
	{ 1531.092895 , 2203.491210 , 10.547396 , 359.365722 },
	{ 2015.560913 , 1728.489501 , 12.470778 , 179.796325 },
	{ 2009.335205 , 1728.511474 , 12.470778 , 179.796325 },
	{ 2002.817749 , 1728.534423 , 12.470778 , 179.796325 },
	{ 1996.104736 , 1728.558349 , 12.470778 , 179.797286 },
	{ 1989.489257 , 1728.581909 , 12.470778 , 179.796325 },
	{ 1982.747802 , 1728.605957 , 12.470778 , 179.798248 },
	{ 1976.232543 , 1728.628906 , 12.470778 , 179.797286 },
	{ 1969.862548 , 1728.651733 , 12.470778 , 179.797286 },
	{ 1963.441284 , 1728.674560 , 12.470778 , 179.797286 },
	{ 1956.436523 , 1728.699707 , 12.470778 , 179.797286 },
	{ 1950.356933 , 1728.721191 , 12.470778 , 179.797286 },
	{ 1944.572998 , 1728.741943 , 12.455736 , 179.797286 },
	{ 1938.931884 , 1728.762084 , 12.458991 , 179.797286 },
	{ 1953.311767 , 1761.641967 , 18.631669 , 179.443969 },
	{ 1949.748046 , 1761.676391 , 18.631669 , 179.443969 },
	{ 1946.477172 , 1761.708251 , 18.631669 , 179.443969 },
	{ 1942.521606 , 1761.746704 , 18.631669 , 179.443969 },
	{ 1938.736328 , 1761.783325 , 18.631669 , 179.443267 },
	{ 1935.513305 , 1761.814697 , 18.631669 , 179.443969 },
	{ 1931.584228 , 1761.852783 , 18.631669 , 179.443969 },
	{ 1928.019409 , 1761.887451 , 18.631669 , 179.443969 },
	{ 1924.796020 , 1761.918579 , 18.631669 , 179.443969 },
	{ 1554.635009 , 974.293518 , 10.547399 , 89.560157 },
	{ 2671.901855 , 1971.027709 , 10.550332 , 269.886566 },
	{ 2671.908691 , 1974.321777 , 10.550332 , 269.886566 },
	{ 2671.915527 , 1977.568481 , 10.550332 , 269.886566 },
	{ 2671.922119 , 1980.839965 , 10.550332 , 269.886566 },
	{ 2671.928466 , 1984.209228 , 10.550333 , 269.886566 },
	{ 2671.935546 , 1987.604248 , 10.550333 , 269.886566 },
	{ 2671.942138 , 1990.827514 , 10.550333 , 269.886566 },
	{ 2671.948242 , 1994.050415 , 10.550334 , 269.886566 },
	{ 2671.955078 , 1997.418212 , 10.550334 , 269.886566 },
	{ 2671.961669 , 2000.663208 , 10.550334 , 269.886566 },
	{ 2605.793212 , 2071.883056 , 10.545516 , 270.138183 },
	{ 2605.800781 , 2068.781250 , 10.539315 , 270.138183 },
	{ 2605.808837 , 2065.385253 , 10.532526 , 270.138183 },
	{ 2605.817626 , 2061.843994 , 10.525445 , 270.138183 },
	{ 2605.825439 , 2058.717773 , 10.519195 , 270.138183 },
	{ 2605.834228 , 2055.129150 , 10.512021 , 270.138183 },
	{ 2605.842041 , 2051.858886 , 10.505481 , 270.138183 },
	{ 2605.850585 , 2048.489013 , 10.498744 , 270.138183 },
	{ 2605.858642 , 2045.265380 , 10.503372 , 270.138183 },
	{ 2605.866943 , 2041.846069 , 10.495838 , 270.138183 },
	{ 2579.000000 , 1967.020874 , 10.547396 , 181.567245 },
	{ 2581.731933 , 1967.095581 , 10.547396 , 181.567245 },
	{ 2584.588134 , 1967.173828 , 10.547396 , 181.567245 },
	{ 2587.396728 , 1967.250732 , 10.547396 , 181.567108 },
	{ 2590.348876 , 1967.331542 , 10.547396 , 181.567245 },
	{ 2587.328125 , 2074.582519 , 10.540050 , 270.287170 },
	{ 1374.842407 , 2649.586181 , 10.547372 , 178.386734 },
	{ 1369.049682 , 2649.738037 , 10.547402 , 178.826965 },
	{ 1363.527221 , 2649.448486 , 10.547399 , 179.634689 },
	{ 1357.805175 , 2649.635009 , 10.547393 , 177.872558 },
	{ 1352.225830 , 2650.448486 , 10.547435 , 178.919342 },
	{ 1346.750976 , 2649.946289 , 10.547395 , 179.070205 },
	{ 1341.386474 , 2649.469726 , 10.547395 , 178.375366 },
	{ 1335.712524 , 2649.177734 , 10.547393 , 176.836517 },
	{ 1330.247680 , 2649.615478 , 10.547395 , 180.352783 },
	{ 1324.357421 , 2649.998046 , 10.547396 , 180.336898 },
	{ 1319.119628 , 2650.407958 , 10.547372 , 180.157028 },
	{ 1313.180419 , 2650.962402 , 10.547378 , 178.996322 },
	{ 1307.705932 , 2650.434326 , 10.547395 , 179.601882 },
	{ 1302.225585 , 2650.128417 , 10.547394 , 182.889831 },
	{ 1296.739501 , 2649.950683 , 10.547397 , 179.705245 },
	{ 1290.737792 , 2650.044433 , 10.547409 , 180.895706 },
	{ 1285.639892 , 2650.301025 , 10.547382 , 178.303024 },
	{ 1280.090087 , 2650.002441 , 10.547405 , 178.862701 },
	{ 1274.912231 , 2649.842773 , 10.547395 , 180.366912 },
	{ 1269.839965 , 2648.795654 , 10.547399 , 180.115356 },
	{ 1264.848999 , 2649.734863 , 10.547395 , 180.357742 },
	{ 1264.990844 , 2693.982910 , 10.547389 , 0.292752 },
	{ 1270.139282 , 2693.799072 , 10.547395 , 359.972015 },
	{ 1275.078735 , 2693.583984 , 10.547394 , 357.612701 },
	{ 1280.255981 , 2693.600097 , 10.547392 , 2.050518 },
	{ 1285.803833 , 2694.149658 , 10.547407 , 1.340566 },
	{ 1291.228393 , 2694.374755 , 10.547395 , 358.507019 },
	{ 1296.889770 , 2694.941162 , 10.547369 , 359.342834 },
	{ 1302.293579 , 2695.052246 , 10.547396 , 1.806669 },
	{ 1308.197509 , 2694.533447 , 10.547395 , 0.951210 },
	{ 1313.488159 , 2694.581054 , 10.547394 , 359.844238 },
	{ 1319.368286 , 2694.677246 , 10.547406 , 0.546080 },
	{ 1324.875610 , 2694.209960 , 10.547395 , 359.244628 },
	{ 1330.266967 , 2695.176269 , 10.547372 , 1.059248 },
	{ 1335.796020 , 2694.476806 , 10.547396 , 359.483001 },
	{ 1341.385742 , 2695.354492 , 10.547396 , 359.821960 },
	{ 1347.088989 , 2694.907226 , 10.547401 , 359.980224 },
	{ 1352.431396 , 2695.058349 , 10.547406 , 359.135986 },
	{ 1358.187988 , 2695.017089 , 10.547394 , 358.028198 },
	{ 1363.897094 , 2695.328125 , 10.547397 , 359.499145 },
	{ 1369.369140 , 2695.063476 , 10.547396 , 0.141274 },
	{ 1375.130981 , 2695.057861 , 10.547389 , 358.552520 },
	{ 1671.083251 , 1720.320434 , 10.549325 , 87.348472 },
	{ 1575.210937 , 1847.036132 , 10.547395 , 178.584167 },
	{ 1704.730468 , 1287.293823 , 10.547392 , 180.559188 },
	{ 1698.675292 , 1287.234619 , 10.547392 , 180.558837 },
	{ 1692.205444 , 1287.171386 , 10.547392 , 180.558837 },
	{ 1685.689208 , 1287.107910 , 10.547392 , 180.558837 },
	{ 1679.292846 , 1287.045410 , 10.547392 , 180.559188 },
	{ 1672.728027 , 1286.981445 , 10.547392 , 180.559188 },
	{ 1666.481445 , 1286.920288 , 10.547392 , 180.559188 },
	{ 1660.058715 , 1286.857666 , 10.547392 , 180.559188 },
	{ 1653.760253 , 1286.796142 , 10.547392 , 180.559188 },
	{ 1647.609863 , 1286.736083 , 10.547392 , 180.559188 },
	{ 1642.194946 , 1293.347045 , 10.547396 , 90.825523 },
	{ 1642.111938 , 1299.130371 , 10.547396 , 90.825523 },
	{ 1642.026977 , 1305.037231 , 10.547396 , 90.825523 },
	{ 1641.938110 , 1311.213256 , 10.547396 , 90.825523 },
	{ 1644.274658 , 1316.431030 , 10.547395 , 0.411406 },
	{ 1650.594116 , 1316.476562 , 10.547395 , 0.411406 },
	{ 1656.890502 , 1316.521850 , 10.547395 , 0.411644 },
	{ 1663.115600 , 1316.566650 , 10.547395 , 0.411406 },
	{ 1666.336059 , 1316.589843 , 10.547395 , 0.411406 },
	{ 1672.779418 , 1316.636108 , 10.547395 , 0.411169 },
	{ 1679.247802 , 1316.682739 , 10.547395 , 0.411644 },
	{ 1685.571044 , 1316.728393 , 10.547395 , 0.411644 },
	{ 1691.920166 , 1316.773681 , 10.547395 , 0.411644 },
	{ 1698.413330 , 1316.820068 , 10.547395 , 0.411644 },
	{ 1705.294067 , 1316.869262 , 10.547395 , 0.411406 },
	{ 1914.035278 , 1387.286743 , 8.984895 , 88.170578 },
	{ 2035.027587 , 1567.283813 , 10.547399 , 0.763101 },
	{ 2173.941162 , 1662.439697 , 10.547392 , 103.039093 },
	{ 2085.185302 , 1449.806884 , 10.547397 , 181.665542 },
	{ 2168.227294 , 1107.099365 , 12.402247 , 152.917907 },
	{ 2030.919677 , 990.849853 , 10.544247 , 0.810236 },
	{ 1728.275512 , 1254.119873 , 10.356964 , 271.604644 },
	{ 1910.012695 , 696.955444 , 10.547396 , 0.565445 },
	{ 1913.089477 , 696.985961 , 10.547396 , 0.565618 },
	{ 1916.339721 , 697.018066 , 10.547396 , 0.565791 },
	{ 1919.584838 , 697.050170 , 10.547396 , 0.565098 },
	{ 1922.808105 , 697.082031 , 10.547396 , 0.565791 },
	{ 1926.031372 , 697.113891 , 10.547396 , 0.565791 },
	{ 1929.399902 , 697.147094 , 10.547396 , 0.565098 },
	{ 1932.305419 , 697.175842 , 10.547396 , 0.565098 },
	{ 1935.574096 , 697.208007 , 10.547396 , 0.565618 },
	{ 1938.525878 , 697.236999 , 10.547396 , 0.565618 },
	{ 1941.772705 , 697.269104 , 10.547396 , 0.565618 },
	{ 1941.912719 , 709.935058 , 10.547398 , 179.824157 },
	{ 1938.834716 , 709.944458 , 10.547398 , 179.824157 },
	{ 1935.832885 , 709.953735 , 10.547398 , 179.825271 },
	{ 1932.536743 , 709.963745 , 10.547398 , 179.824157 },
	{ 1929.413085 , 709.973327 , 10.547398 , 179.825271 },
	{ 1925.825317 , 709.984252 , 10.547398 , 179.825271 },
	{ 1922.701171 , 709.993652 , 10.547398 , 179.824157 },
	{ 1919.624023 , 710.003051 , 10.547398 , 179.825271 },
	{ 1916.498046 , 710.012512 , 10.547398 , 179.825271 },
	{ 1913.149047 , 710.022827 , 10.547398 , 179.824157 },
	{ 1910.075195 , 710.032104 , 10.547398 , 179.825271 },
	{ 2649.029052 , 745.457641 , 10.547394 , 0.466462 },
	{ 2645.488281 , 745.428833 , 10.547394 , 0.466881 },
	{ 2641.922607 , 745.399841 , 10.547394 , 0.466881 },
	{ 2638.233154 , 745.369750 , 10.547394 , 0.466881 },
	{ 2634.401367 , 745.338562 , 10.547394 , 0.466671 },
	{ 2631.129638 , 745.311889 , 10.547394 , 0.466671 },
	{ 2627.589843 , 745.283020 , 10.547394 , 0.466881 },
	{ 2623.732177 , 745.251586 , 10.547394 , 0.466881 },
	{ 2620.583740 , 745.225891 , 10.547394 , 0.466881 },
	{ 2616.821533 , 745.195251 , 10.547394 , 0.466671 },
	{ 2578.335449 , 745.157836 , 10.547397 , 1.227007 },
	{ 2574.455078 , 745.074707 , 10.547353 , 1.226847 },
	{ 2570.770751 , 744.995788 , 10.547312 , 1.226847 },
	{ 2566.817626 , 744.911071 , 10.547266 , 1.226767 },
	{ 2563.132568 , 744.832214 , 10.547225 , 1.226847 },
	{ 2560.011230 , 744.765258 , 10.547191 , 1.226847 },
	{ 2557.010253 , 744.700988 , 10.547158 , 1.226847 },
	{ 2553.104248 , 744.617248 , 10.547111 , 1.226847 },
	{ 2549.539062 , 744.540771 , 10.547072 , 1.226847 },
	{ 2545.975585 , 744.464538 , 10.547030 , 1.226847 },
	{ 2094.772216 , 2710.949951 , 10.820312 , 1.918706 },
	{ 2109.790039 , 2207.526367 , 10.547392 , 175.677581 },
	{ 2180.807617 , 2159.399658 , 10.820312 , 268.107482 },
	{ 1981.724365 , 2069.591308 , 10.547394 , 180.685867 },
	{ 2185.723388 , 2004.397338 , 10.547396 , 268.695495 },
	{ 1683.728393 , 2189.548828 , 10.547403 , 0.374038 },
	{ 1940.748535 , 2171.921386 , 10.547371 , 268.851379 },
	{ 1118.093017 , 2069.943603 , 10.547456 , 359.031463 },
	{ 752.687744 , 1964.546142 , 5.063022 , 77.469543 },
//	{ 2176.197265 , 987.673461 , 10.540028 , 359.558532 },
//	{ 2179.469482 , 987.818359 , 10.547395 , 0.357180 },
//	{ 2182.706542 , 987.573181 , 10.547179 , 0.055952 },
//	{ 2185.765136 , 987.601928 , 10.548233 , 0.278362 },
//	{ 2189.064941 , 987.686279 , 10.551510 , 359.464050 },
	{ 1544.599731 , 2333.943115 , 10.549845 , 269.610656 },
	{ 1550.968994 , 2373.943847 , 10.550365 , 359.848052 },
	{ 1546.202026 , 2373.956542 , 10.549615 , 359.848052 },
	{ 1540.932128 , 2373.970458 , 10.560094 , 359.846099 },
	{ 1535.047607 , 2373.725585 , 10.559874 , 359.848052 },
	{ 2157.804443 , 987.539550 , 10.550534 , 359.916076 },
	{ 2154.572265 , 987.585510 , 10.551902 , 0.534491 },
	{ 2151.434570 , 987.760925 , 10.547398 , 359.614868 },
	{ 2148.218994 , 987.435180 , 10.547394 , 0.787581 },
	{ 1513.080444 , 2375.611328 , 10.549888 , 269.456329 },
	{ 2171.169433 , 2000.660888 , 10.547430 , 269.808074 },
	{ 2171.509277 , 1973.632568 , 10.547394 , 270.877258 },
	{ 1447.887573 , 2370.722167 , 10.549466 , 268.914672 },
	{ 1448.159179 , 2349.073730 , 10.550125 , 267.235107 },
	{ 2186.748291 , 1974.900268 , 10.547394 , 90.395065 },
	{ 2186.360595 , 2000.260375 , 10.547397 , 90.504844 },
	{ 1368.760620 , 2276.503173 , 10.550782 , 90.897857 },
	{ 1329.390014 , 2239.299072 , 10.549870 , 270.646697 },
	{ 2103.271240 , 2036.345336 , 10.547395 , 90.224166 },
	{ 2103.232177 , 2043.155151 , 10.547385 , 90.117225 },
	{ 1613.257446 , 2217.111816 , 10.549814 , 270.309570 },
	{ 2103.236328 , 2049.692382 , 10.547394 , 90.572296 },
	{ 1424.935913 , 2000.449218 , 10.549511 , 181.020858 },
	{ 1427.865478 , 2000.501464 , 10.560163 , 181.022308 },
	{ 1431.602661 , 2000.568115 , 10.559659 , 181.020462 },
	{ 1435.182617 , 2000.631958 , 10.559182 , 181.020263 },
	{ 1438.665649 , 2000.388671 , 10.557877 , 181.019790 },
	{ 1441.550903 , 2000.440185 , 10.545906 , 181.021041 },
	{ 1444.428833 , 2000.491699 , 10.557106 , 181.020355 },
	{ 1907.799316 , 2057.018798 , 10.547395 , 90.538551 },
	{ 1447.934448 , 2000.554321 , 10.544899 , 181.021163 },
	{ 1450.787109 , 2000.605224 , 10.556257 , 181.022033 },
	{ 1453.626831 , 2000.655883 , 10.555876 , 181.021835 },
	{ 1456.667236 , 2000.709960 , 10.543525 , 181.021240 },
	{ 1907.861206 , 2105.618652 , 10.546690 , 89.261871 },
	{ 1749.397094 , 2241.809814 , 10.547394 , 90.566093 },
	{ 1749.772583 , 2235.155517 , 10.547395 , 90.192367 },
	{ 1682.723022 , 2243.588867 , 10.547397 , 0.359908 },
	{ 1690.948364 , 2243.474365 , 10.547398 , 0.801862 },
	{ 1580.817626 , 2247.018798 , 10.547394 , 359.899139 },
	{ 1588.459350 , 2246.576416 , 10.547395 , 0.600682 },
	{ 1640.101562 , 2293.001220 , 10.547394 , 89.303016 },
	{ 1612.852905 , 2190.227050 , 10.547378 , 270.188201 },
	{ 1613.377807 , 2197.005859 , 10.547380 , 269.605804 },
	{ 328.283416 , 846.892395 , 20.045745 , 115.190765 },
	{ 1613.140747 , 2203.702636 , 10.547386 , 269.616638 },
	{ 1541.219238 , 2214.396484 , 10.547405 , 180.176940 },
	{ 1537.856445 , 2214.379150 , 10.547394 , 180.307739 },
	{ 1534.520751 , 2213.993652 , 10.547396 , 180.219406 },
	{ 1531.131469 , 2214.087402 , 10.547398 , 180.377426 },
	{ 1527.746215 , 2214.117431 , 10.547403 , 179.816543 },
	{ 1542.679565 , 2257.954589 , 10.547394 , 359.913757 },
	{ 1539.371582 , 2258.147949 , 10.547395 , 0.088469 },
	{ 1535.957275 , 2258.097412 , 10.547393 , 359.721649 },
	{ 1532.553344 , 2258.179931 , 10.547396 , 0.048456 },
	{ 1529.224731 , 2258.228271 , 10.547395 , 0.315899 },
	{ 1385.873413 , 2286.568847 , 10.547419 , 90.903450 },
	{ 1368.977539 , 2286.629882 , 10.547394 , 90.204910 },
	{ 1374.103637 , 2314.576660 , 10.547395 , 180.738876 },
	{ 1289.055786 , 2572.714843 , 10.470799 , 0.225066 },
	{ 1289.357299 , 2542.740722 , 10.470802 , 0.757822 },
	{ 1289.583129 , 2531.253662 , 10.470803 , 0.804541 },
	{ 1299.478759 , 2528.891601 , 10.470826 , 0.511827 },
	{ 1293.700683 , 2594.903564 , 10.489909 , 89.501075 },
	{ 1259.526977 , 2603.399169 , 10.547395 , 359.720245 },
	{ 1421.004882 , 2668.268066 , 10.470821 , 271.839752 },
	{ 1449.732299 , 2668.481933 , 10.470631 , 270.926849 },
	{ 1374.747314 , 2695.732910 , 10.547390 , 179.470657 },
	{ 1369.283569 , 2696.067382 , 10.547396 , 180.724166 },
	{ 1514.445800 , 2643.791015 , 10.547367 , 90.058113 },
	{ 1485.026367 , 2679.772216 , 10.547395 , 87.946670 },
	{ 1562.114013 , 2673.678955 , 10.471246 , 272.369750 },
	{ 1592.595703 , 2653.400634 , 10.470816 , 180.755813 },
	{ 1311.731811 , 2584.551269 , 10.470762 , 269.445556 },
	{ 1342.400390 , 2584.546630 , 10.470793 , 269.035339 },
	{ 1367.151611 , 2584.301025 , 10.467142 , 269.175872 },
	{ 1371.216674 , 2520.090087 , 10.547412 , 271.173217 },
	{ 1707.577636 , 2700.150390 , 10.547395 , 359.072540 },
	{ 1757.398315 , 2718.449462 , 10.470723 , 90.130958 },
	{ 1784.564819 , 2718.156738 , 10.470801 , 89.377906 },
	{ 2167.526855 , 2754.320556 , 10.547395 , 90.395820 },
	{ 2166.413085 , 2727.456542 , 10.547395 , 269.152618 },
	{ 2142.032714 , 2814.318359 , 10.547393 , 88.459243 },
	{ 2142.264648 , 2806.551025 , 10.547395 , 89.978775 },
	{ 2142.163330 , 2799.175537 , 10.547395 , 89.195335 },
	{ 2142.294189 , 2832.240722 , 10.547370 , 90.461051 },
	{ 2370.864990 , 2578.943115 , 10.546488 , 181.109848 },
	{ 2357.462890 , 2578.045410 , 10.544477 , 1.660362 },
	{ 2348.855224 , 2578.761962 , 10.540550 , 183.242248 },
	{ 2340.360595 , 2577.326171 , 10.541572 , 4.000739 },
	{ 2331.712890 , 2577.457031 , 10.543856 , 184.340484 },
	{ 2297.403076 , 2518.369384 , 10.470379 , 91.831977 },
	{ 2197.589355 , 2529.388427 , 10.547392 , 180.530822 },
	{ 2188.958740 , 2502.892578 , 10.547393 , 179.830978 },
	{ 2192.176269 , 2502.824218 , 10.547395 , 180.247085 },
	{ 2195.385986 , 2502.972412 , 10.547394 , 180.292083 },
	{ 2118.264892 , 2468.346435 , 10.548111 , 0.180225 },
	{ 2122.547851 , 2468.305664 , 10.548288 , 0.193826 },
	{ 2126.749023 , 2468.529052 , 10.547396 , 359.754516 },
	{ 2130.920898 , 2469.070800 , 10.547386 , 180.169021 },
	{ 2135.034667 , 2468.722900 , 10.543387 , 0.071326 },
	{ 2139.379150 , 2468.638183 , 10.547397 , 180.471069 },
	{ 2143.445556 , 2469.195556 , 10.547392 , 180.322647 },
//	{ 2153.580566 , 2475.817138 , 10.547409 , 90.055641 },
//	{ 2042.390747 , 2468.348144 , 10.547397 , 0.338619 },
//	{ 2046.318359 , 2468.343750 , 10.547397 , 359.382293 },
//	{ 2050.341308 , 2468.692382 , 10.529055 , 0.048456 },
	{ 2048.883789 , 2480.168701 , 10.547394 , 180.562332 },
	{ 2053.003906 , 2480.201171 , 10.547368 , 180.692108 },
	{ 2057.285888 , 2480.194580 , 10.547394 , 179.797286 },
	{ 2061.441406 , 2480.053955 , 10.547398 , 180.236572 },
	{ 2065.556152 , 2479.517822 , 10.547394 , 0.495350 },
	{ 2069.831787 , 2479.909912 , 10.547396 , 0.437901 },
	{ 2073.956787 , 2480.320068 , 10.547394 , 180.336303 },
	{ 2078.213867 , 2479.624267 , 10.547396 , 180.420593 },
	{ 2082.461669 , 2480.104492 , 10.547393 , 180.281860 },
	{ 2086.586669 , 2479.863769 , 10.547396 , 180.646804 },
	{ 2090.725830 , 2479.531250 , 10.547394 , 0.554613 },
	{ 2107.189697 , 2480.353271 , 10.547401 , 180.667343 },
	{ 2089.011718 , 2468.485107 , 10.547398 , 0.221173 },
	{ 2084.811279 , 2468.529785 , 10.547394 , 359.624664 },
	{ 2080.747802 , 2468.559814 , 10.547409 , 0.220286 },
	{ 2076.443847 , 2468.464355 , 10.547398 , 0.117033 },
	{ 2068.646728 , 2416.486328 , 10.547395 , 270.903808 },
	{ 2078.772949 , 2416.590332 , 10.553024 , 270.443908 },
	{ 2068.535888 , 2420.427734 , 49.235992 , 232.769897 },
	{ 2068.427734 , 2416.189453 , 49.261878 , 235.787750 },
	{ 2068.532226 , 2411.763671 , 49.248264 , 236.262268 },
	{ 2068.572509 , 2407.741699 , 49.244533 , 238.379638 },
	{ 2068.890380 , 2403.612304 , 49.252464 , 238.301300 },
	{ 2068.604980 , 2400.041748 , 49.252643 , 240.695846 },
	{ 2069.006347 , 2396.060791 , 49.257984 , 242.234207 },
	{ 2068.765136 , 2392.426513 , 49.257270 , 239.867309 },
	{ 2087.121337 , 2422.211425 , 49.250522 , 238.959518 },
	{ 2086.326660 , 2418.727294 , 49.247695 , 242.740417 },
	{ 2086.160400 , 2415.128662 , 49.258987 , 238.576095 },
	{ 2086.403808 , 2410.774658 , 49.247924 , 235.202728 },
	{ 2086.437744 , 2406.814208 , 49.250427 , 232.515518 },
	{ 2086.148437 , 2402.052978 , 49.256988 , 232.500015 },
	{ 2086.299316 , 2398.202148 , 49.251934 , 232.117340 },
	{ 2086.325195 , 2394.203125 , 49.245903 , 234.147979 },
	{ 2086.417724 , 2390.257324 , 49.250522 , 232.469421 },
	{ 2155.054199 , 2186.975097 , 10.398890 , 359.025512 },
	{ 2154.704833 , 2166.447265 , 10.398937 , 359.025207 },
	{ 2155.048583 , 2109.577636 , 10.398965 , 359.024322 },
	{ 2587.603027 , 2077.312744 , 10.539944 , 132.589874 },
	{ 2588.327148 , 2073.528808 , 10.540054 , 130.279037 },
	{ 2588.846679 , 2069.715576 , 10.543719 , 129.482299 },
	{ 2589.128417 , 2065.711669 , 10.547413 , 128.617294 },
	{ 2590.448486 , 1967.286743 , 10.547400 , 180.251785 },
	{ 2587.493164 , 1966.921264 , 10.547397 , 180.340927 },
//	{ 2584.728759 , 1966.711059 , 10.547406 , 181.159622 },
	{ 2591.780517 , 1811.850708 , 10.547389 , 269.576751 },
	{ 2591.504882 , 1805.476928 , 10.547380 , 269.266113 },
	{ 2591.860595 , 1799.039794 , 10.547395 , 269.790405 },
	{ 2591.792968 , 1792.733032 , 10.547398 , 268.677917 },
	{ 2599.179687 , 1681.427246 , 10.547396 , 268.831420 },
	{ 2599.273681 , 1684.576660 , 10.547396 , 268.570495 }
};
new parkId[sizeof(parking)];
new carId[MAX_VEHICLES];

new houseId[sizeof(houses)];
new string[256];

new cdscars[20];
enum carDealerShipEnum
{
	pickup,
	carslist[5],
	carscost[5]
};

new carDealerShip[4][carDealerShipEnum];

new joinTaxiDriverPickup;
new joinPilotPickup;
new joinMedicPickup;
new joinGoldMinerPickup;
new joinFuelSupplierPickup;
new joinDrugDealerPickup;
new joinFishermanPickup;
new joinMechanicPickup;
new joinHitmanPickup;
new joinPolicePickup;

#define CASINO_DIALOG_IDS 100
#define CDS_DIALOGS_IDS 1
#define JOB_DIALOG_IDS 20
#define JOBTEST_DIALOG_IDS 40
#define BIZES_DIALOG_IDS 2000
#define HOUSE_DIALOG_IDS 1000
#define MOTEL_DIALOG_IDS 10000
#define MAIL_DIALOG_IDS 3000 // 3k - 4k

#define COLOR_MUSTARD 0xE6C71AFF
#define COLOR_BROWN 0x6D4527FF

#define COLOR_CBRADIO 0x7B68EEAA
#define COLOR_PHONE 0xFFB6C1AA

#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x9EC73DAA
#define COLOR_GROVE 0x00FF00FF
#define COLOR_RED 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_PINK 0xFF6DFFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xDABB3EAA
#define COLOR_YELLOW2 0xF5DEB3AAf
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0x458E1DAA
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define TEAM_RADIO_COLOR 0xF2D068FF
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define COLOR_BLUE 0x33CCFFAA
#define COLOR_DARKNICERED 0x9D000096
#define COLOR_LIGHT_BLUE 0x9FB1EEAA

#define COLOR_MSG 0xFF6DFFFAA
#define COLOR_ME 0xB2D1B3AA

#define SendClientMessage sendClientMessage
#define SendClientMessageToAll sendClientMessageToAll


main()
{
	printf("\n\n\n\t\t\ta script by Kapil( Sriram )\n");
}
new planePickup1;
new planePickup2;
new plane1,plane2;
new weaponPickup;
new dutyPickup;
new bombPickup;
new goldPickup[3];
new Text:logo[16];
new Text:cstats[5][MAX_PLAYERS];
new cstaton[MAX_PLAYERS];
new Text:tut[3];

new _string2[1024];
new _str[512];

public OnGameModeInit()
{
	printf(string);
//	RESTART = 0;
	ShowNameTags(1);
//	DisableNameTagLOS()
	SetNameTagDrawDistance(50.0);
	SetGameModeText("Version 1.21");
	SetWeather(10);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	LimitGlobalChatRadius(50);
	ShowPlayerMarkers(1);
	EnableStuntBonusForAll (0);




    format(_str,512,"] First of all thanks a lot for your intrest in joining our server @ Stage Set Las Venturas.~n~~n~] We recommend you to go through this small guidelines, which might help you experience our server better.~n~~n~] This is a roleplay server, where you will have to act as if you are in real life situation.");
    format(_string2,1024,"%s~n~~n~] Your simple character story might be, you just arrived to the city in search of job from your village.~n~~n~] So you will have to start from finding a place to stay up, finding a job, finding friends and etc.",_str);

	tut[0] = TextDrawCreate(150,150,_string2);

    format(_str,512,"] There are many jobs in the server, like Taxi Driver, GOld Miner, Mechanic, Medic etc.~n~~n~] Different jobs earn money in different ways. Like a mechanic repairs cars, Taxi Drivers transports people etc.~n~~n~] You will recieve paydays every hour depending upon your job, the job duties you have done and so on.");
    format(_string2,1024,"%s~n~~n~] Your paychecks are delivered into your bank account, you will recieve mails at your mail box about your paycheck details.~n~~n~] You can use 1 of thousands of cars which are spread over the map, or purchase your own and modify for style.",_str);
	tut[1] = TextDrawCreate(150,150,_string2);

    format(_str,512,"You can also purchase shops like petrol bunks, burger shots, pay n sprays, transfendors, ammunations etc~n~~n~] we also include roleplay stuff like Gym where you can increase your muscles, Factions like police, gangs.~n~~n~] Animations, cb radio, cellphones, banks and many more stuff which will give you a complete roleplay experience.");
    format(_string2,1024,"%s~n~~n~] So thats all for now, for more information about our server you can read the guides at the forum.",_str);
	tut[2] = TextDrawCreate(150,150,_string2);



	for(new i = 0;i < sizeof(tut);i++){
		TextDrawUseBox(tut[i], 1);
		TextDrawFont(tut[i], 2);
		TextDrawSetShadow(tut[i],0);
	    TextDrawSetOutline(tut[i],1);
	    TextDrawBackgroundColor(tut[i],0x000000FF);
	    TextDrawColor(tut[i],0xFFFFFFFF);
	    TextDrawAlignment(tut[i],1);
	    TextDrawBoxColor(tut[i],0x000000AA);
	    TextDrawSetProportional(tut[i],3);
	    TextDrawTextSize(tut[i],600,0);
	    TextDrawLetterSize(tut[i],0.4,1.2);
	}


	carExitMenu = CreateMenu("~b~",0,0,0,0);

	startScreen[0] = TextDrawCreate(100.0, 200.0,"Stage Set");
	TextDrawUseBox(startScreen[0], 0);
	TextDrawFont(startScreen[0], 3);
	TextDrawSetShadow(startScreen[0],0); // no shadow
    TextDrawSetOutline(startScreen[0],1); // thickness 1
    TextDrawBackgroundColor(startScreen[0],0x000000FF);
    TextDrawColor(startScreen[0],0xFFFFFFFF);
    TextDrawLetterSize(startScreen[0], 3 ,8);

	startScreen[1] = TextDrawCreate(343.0, 263.0,"Las Venturas");
	TextDrawUseBox(startScreen[1], 0);
	TextDrawFont(startScreen[1], 0);
	TextDrawSetShadow(startScreen[1],0); // no shadow
    TextDrawSetOutline(startScreen[1],1); // thickness 1
    TextDrawBackgroundColor(startScreen[1],0xFFFFFFFF);
    TextDrawColor(startScreen[1], 0x000000FF);
    TextDrawLetterSize(startScreen[1], 1.8 ,2.8);


	txtAnimHelper = TextDrawCreate(610.0, 400.0,
	"~r~~k~~PED_SPRINT~ ~w~to stop the animation");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0); // no shadow
    TextDrawSetOutline(txtAnimHelper,1); // thickness 1
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3); // align right

	for(new i = 0;i < sizeof(skins);i++)
		AddPlayerClass(skins[i], 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	new x = 340,
	    y = 430;


	logo[0] = TextDrawCreate(x,y,"w");
	TextDrawFont(logo[0],3);
	TextDrawLetterSize(logo[0],0.4,0.8);
	TextDrawSetOutline(logo[0],1);
	TextDrawSetShadow(logo[0],0);


//	TextDrawSetProportional(logo[0],1);

	logo[1] = TextDrawCreate(x+=10,y-0.5,"w");
	TextDrawFont(logo[1],3);
	TextDrawLetterSize(logo[1],0.45,0.9);
	TextDrawSetOutline(logo[1],1);
	TextDrawSetShadow(logo[1],0);

//	TextDrawSetProportional(logo[1],1);

	logo[2] = TextDrawCreate(x+=11,y-1.0,"w.");
	TextDrawFont(logo[2],3);
	TextDrawLetterSize(logo[2],0.5,1.0);
	TextDrawSetOutline(logo[2],1);
	TextDrawSetShadow(logo[2],0);

//	TextDrawSetProportional(logo[2],1);

	logo[3] = TextDrawCreate(x+=23,y-1.5,"s");
	TextDrawFont(logo[3],3);
	TextDrawLetterSize(logo[3],0.55,1.1);
	TextDrawSetOutline(logo[3],1);
	TextDrawSetShadow(logo[3],0);

//	TextDrawSetProportional(logo[3],1);

	logo[4] = TextDrawCreate(x+=13,y-2.0,"t");
	TextDrawFont(logo[4],3);
	TextDrawLetterSize(logo[4],0.6,1.2);
	TextDrawSetOutline(logo[4],1);
	TextDrawSetShadow(logo[4],0);

//	TextDrawSetProportional(logo[4],1);

	logo[5] = TextDrawCreate(x+=14,y-2.5,"a");
	TextDrawFont(logo[5],3);
	TextDrawLetterSize(logo[5],0.65,1.3);
	TextDrawSetOutline(logo[5],1);
	TextDrawSetShadow(logo[5],0);

//	TextDrawSetProportional(logo[5],1);

	logo[6] = TextDrawCreate(x+=15,y-3.0,"g");
	TextDrawFont(logo[6],3);
	TextDrawLetterSize(logo[6],0.7,1.4);
	TextDrawSetOutline(logo[6],1);
	TextDrawSetShadow(logo[6],0);

//	TextDrawSetProportional(logo[6],1);

	logo[7] = TextDrawCreate(x+=16,y-3.5,"e");
	TextDrawFont(logo[7],3);
	TextDrawLetterSize(logo[7],0.75,1.5);
	TextDrawSetOutline(logo[7],1);
	TextDrawSetShadow(logo[7],0);

//	TextDrawSetProportional(logo[7],1);

	logo[8] = TextDrawCreate(x+=17,y-4.0,"s");
	TextDrawFont(logo[8],3);
	TextDrawLetterSize(logo[8],0.8,1.6);
	TextDrawSetOutline(logo[8],1);
	TextDrawSetShadow(logo[8],0);

//	TextDrawSetProportional(logo[8],1);

	logo[9] = TextDrawCreate(x+=18,y-4.5,"e");
	TextDrawFont(logo[9],3);
	TextDrawLetterSize(logo[9],0.85,1.7);
	TextDrawSetOutline(logo[9],1);
	TextDrawSetShadow(logo[9],0);

//	TextDrawSetProportional(logo[9],1);

	logo[10] = TextDrawCreate(x+=19,y-5.0,"t");
	TextDrawFont(logo[10],3);
	TextDrawLetterSize(logo[10],0.9,1.8);
	TextDrawSetOutline(logo[10],1);
	TextDrawSetShadow(logo[10],0);

//	TextDrawSetProportional(logo[10],1);

	logo[11] = TextDrawCreate(x+=20,y-5.5,"l");
	TextDrawFont(logo[11],3);
	TextDrawLetterSize(logo[11],0.95,1.9);
	TextDrawSetOutline(logo[11],1);
	TextDrawSetShadow(logo[11],0);

//	TextDrawSetProportional(logo[11],1);

	logo[12] = TextDrawCreate(x+=17,y-6.0,"v.");
	TextDrawFont(logo[12],3);
	TextDrawLetterSize(logo[12],1.0,2.0);
	TextDrawSetOutline(logo[12],1);
	TextDrawSetShadow(logo[12],0);


	logo[13] = TextDrawCreate(x+=25,y-6.5,"c");
	TextDrawFont(logo[13],3);
	TextDrawLetterSize(logo[13],1.05,2.1);
	TextDrawSetOutline(logo[13],1);
	TextDrawSetShadow(logo[13],0);


	logo[14] = TextDrawCreate(x+=23,y-7.0,"o");
	TextDrawFont(logo[14],3);
	TextDrawLetterSize(logo[14],1.1,2.2);
	TextDrawSetOutline(logo[14],1);
	TextDrawSetShadow(logo[14],0);


	logo[15] = TextDrawCreate(x+=24,y-7.5,"m");
	TextDrawFont(logo[15],3);
	TextDrawLetterSize(logo[15],1.15,2.3);
	TextDrawSetOutline(logo[15],1);
	TextDrawSetShadow(logo[15],0);


	TextDrawColor(logo[0],0xF0F0F0FF ); // grey
	TextDrawColor(logo[1],0xE8E8E8FF );
	TextDrawColor(logo[2],0xE0E0E0FF );
	TextDrawColor(logo[3],0xD8D8D8FF );
	TextDrawColor(logo[4],0xD0D0D0FF );
	TextDrawColor(logo[5],0xC8C8C8FF );
	TextDrawColor(logo[6],0xC0C0C0FF );
	TextDrawColor(logo[7],0xB8B8B8FF );
	TextDrawColor(logo[8],0xB0B0B0FF);
	TextDrawColor(logo[9],0xA8A8A8FF );
	TextDrawColor(logo[10],0xA0A0A0FF);
	TextDrawColor(logo[11],0x989898FF );
	TextDrawColor(logo[12],0x909090FF );
	TextDrawColor(logo[13],0x888888FF );
	TextDrawColor(logo[14],0x808080FF );
	TextDrawColor(logo[15],0x787878FF );

/*


	TextDrawColor(logo[0],0xE3CEF6FF); // violet
	TextDrawColor(logo[1],0xD0A9F5FF);
	TextDrawColor(logo[2],0xD0A9F5EE);
	TextDrawColor(logo[3],0xD0A9F5DD);
	TextDrawColor(logo[4],0xBE81F7CC);
	TextDrawColor(logo[5],0xBE81F7FF);
	TextDrawColor(logo[6],0xBE81F7EE);
	TextDrawColor(logo[7],0xBE81F7DD);
	TextDrawColor(logo[8],0xAC58FACC);
	TextDrawColor(logo[9],0xAC58FAFF);
	TextDrawColor(logo[10],0xAC58FAEE);
	TextDrawColor(logo[11],0xAC58FADD);
	TextDrawColor(logo[12],0x9A2EFECC);
	TextDrawColor(logo[13],0x9A2EFEFF);
	TextDrawColor(logo[14],0x9A2EFEEE);
	TextDrawColor(logo[15],0x9A2EFEDD);


	TextDrawColor(logo[0],0xFAFFE5FF); // yellow
	TextDrawColor(logo[1],0xFAFFE5FF);
	TextDrawColor(logo[2],0xF5FFCCFF);
	TextDrawColor(logo[3],0xF5FFCCFF);
	TextDrawColor(logo[4],0xF0FFB3FF);
	TextDrawColor(logo[5],0xF0FFB3FF);
	TextDrawColor(logo[6],0xEBFF99FF);
	TextDrawColor(logo[7],0xEBFF99FF);
	TextDrawColor(logo[8],0xE6FF80FF);
	TextDrawColor(logo[9],0xE6FF80FF);
	TextDrawColor(logo[10],0xE0FF66FF);
	TextDrawColor(logo[11],0xE0FF66FF);
	TextDrawColor(logo[12],0xDBFF4DFF);
	TextDrawColor(logo[13],0xD6FF33FF);
	TextDrawColor(logo[14],0xD1FF1AFF);
	TextDrawColor(logo[15],0xCCFF00FF);

	TextDrawColor(logo[0],0xFFE2DBFF);// red
	TextDrawColor(logo[1],0xFFCEC2FF);
	TextDrawColor(logo[2],0xFFCEC2FF);
	TextDrawColor(logo[3],0xFFBAA8FF);
	TextDrawColor(logo[4],0xFFBAA8FF);
	TextDrawColor(logo[5],0xFFA58FFF);
	TextDrawColor(logo[6],0xFFA58FFF);
	TextDrawColor(logo[7],0xFF9175FF);
	TextDrawColor(logo[8],0xFF9175FF);
	TextDrawColor(logo[9],0xFF7C5CFF);
	TextDrawColor(logo[10],0xFF6842FF);
	TextDrawColor(logo[11],0xFF6842FF);
	TextDrawColor(logo[12],0xFF5429FF);
	TextDrawColor(logo[13],0xFF3F0FFF);
	TextDrawColor(logo[14],0xF53100FF);
	TextDrawColor(logo[15],0xDB2C00FF);

	TextDrawColor(logo[0],0x87CEFA); // blue shades
	TextDrawColor(logo[1],0xB0E2FF);
	TextDrawColor(logo[2],0xA4D3EE);
	TextDrawColor(logo[3],0x8DB6CD);
	TextDrawColor(logo[4],0x607B8B);
	TextDrawColor(logo[5],0x87CEFF);
	TextDrawColor(logo[6],0x7EC0EE);
	TextDrawColor(logo[7],0x6CA6CD);
	TextDrawColor(logo[8],0x4A708B);
	TextDrawColor(logo[9],0x87CEEB);
	TextDrawColor(logo[10],0x00BFFF);
	TextDrawColor(logo[11],0x00B2EE);
	TextDrawColor(logo[12],0x009ACD);
	TextDrawColor(logo[13],0x00688B);
	TextDrawColor(logo[14],0x33A1C9);
	TextDrawColor(logo[15],0xADD8E6);



	TextDrawColor(logo[0],0xE5FAFFFF); // blue
	TextDrawColor(logo[1],0xE5FAFFFF);
	TextDrawColor(logo[2],0xCCF5FFFF);
	TextDrawColor(logo[3],0xCCF5FFFF);
	TextDrawColor(logo[4],0xB3F0FFFF);
	TextDrawColor(logo[5],0xB3F0FFFF);
	TextDrawColor(logo[6],0x99EBFFFF);
	TextDrawColor(logo[7],0x99EBFFFF);
	TextDrawColor(logo[8],0x80E6FFFF);
	TextDrawColor(logo[9],0x80E6FFFF);
	TextDrawColor(logo[10],0x66E0FFFF);
	TextDrawColor(logo[11],0x4DDBFFFF);
	TextDrawColor(logo[12],0x4DDBFFFF);
	TextDrawColor(logo[13],0x33D6FFFF);
	TextDrawColor(logo[14],0x1AD1FFFF);
	TextDrawColor(logo[15],0x00CCFFFF);

	TextDrawColor(logo[0],0x87CEFA); // blue shades fixed
	TextDrawColor(logo[1],0xB0E2FF);
	TextDrawColor(logo[2],0xA4D3EE);
	TextDrawColor(logo[3],0x8DB6CD);
	TextDrawColor(logo[4],0x607B8B);
	TextDrawColor(logo[5],0x87CEFF);
	TextDrawColor(logo[6],0x7EC0EE);
	TextDrawColor(logo[7],0x6CA6CD);
	TextDrawColor(logo[8],0x4A708B);
	TextDrawColor(logo[9],0x87CEFA);
	TextDrawColor(logo[10],0xB0E2FF);
	TextDrawColor(logo[11],0xA4D3EE);
	TextDrawColor(logo[12],0x8DB6CD);
	TextDrawColor(logo[13],0x607B8B);
	TextDrawColor(logo[14],0x87CEFF);
	TextDrawColor(logo[15],0xADD8E6);



	TextDrawColor(logo[0],0xE5FAFFFF); // blue
	TextDrawColor(logo[1],0xE5FAFFFF);
	TextDrawColor(logo[2],0xCCF5FFFF);
	TextDrawColor(logo[3],0xCCF5FFFF);
	TextDrawColor(logo[4],0xB3F0FFFF);
	TextDrawColor(logo[5],0xB3F0FFFF);
	TextDrawColor(logo[6],0x99EBFFFF);
	TextDrawColor(logo[7],0x99EBFFFF);
	TextDrawColor(logo[8],0x80E6FFFF);
	TextDrawColor(logo[9],0x80E6FFFF);
	TextDrawColor(logo[10],0x66E0FFFF);
	TextDrawColor(logo[11],0x4DDBFFFF);
	TextDrawColor(logo[12],0x4DDBFFFF);
	TextDrawColor(logo[13],0x33D6FFFF);
	TextDrawColor(logo[14],0x1AD1FFFF);
	TextDrawColor(logo[15],0x00CCFFFF);


	TextDrawColor(logo[0],0xFFFF00FF); // yellow red
	TextDrawColor(logo[1],0xFFEE00FF);
	TextDrawColor(logo[2],0xFFDD00FF);
	TextDrawColor(logo[3],0xFFCC00FF);
	TextDrawColor(logo[4],0xFFAA00FF);
	TextDrawColor(logo[5],0xFF9900FF);
	TextDrawColor(logo[6],0xFF8800FF);
	TextDrawColor(logo[7],0xFF7700FF);
	TextDrawColor(logo[8],0xFF6600FF);
	TextDrawColor(logo[9],0x87CEEBFF);
	TextDrawColor(logo[10],0xFF5500FF);
	TextDrawColor(logo[11],0xFF4400FF);
	TextDrawColor(logo[12],0xFF3300FF);
	TextDrawColor(logo[13],0xFF2200FF);
	TextDrawColor(logo[14],0xFF1100FF);
	TextDrawColor(logo[15],0xFF0000FF);




*/
    LoadStaticVehiclesFromFile("/vehicles/lv_airport.txt");
    LoadStaticVehiclesFromFile("/vehicles/lv_law.txt");

	cdscars[0] = CreateVehicle(436,1689.2472,1854.6957,10.5895,3.5631,109,1,1); // previon
	Create3DTextLabel("Previon",COLOR_PINK,1689.2472,1854.6957,10.5895,20,0,0);
	cdscars[1] = CreateVehicle(506,2184.0029,1391.2346,10.5255,180.2257,7,7,1); // supergt
	Create3DTextLabel("SuperGT",COLOR_PINK,2184.0029,1391.2346,10.5255,20,0,0);
	cdscars[2] = CreateVehicle(480,2189.2131,1390.8044,10.5943,181.1231,6,6,1); // comet
	Create3DTextLabel("Comet",COLOR_PINK,2189.2131,1390.8044,10.5943,20,0,0);
	cdscars[3] = CreateVehicle(555,2211.2925,1390.4843,10.5064,178.3765,58,1,1); // windsor
	Create3DTextLabel("Windsor",COLOR_PINK,2211.2925,1390.4843,10.5064,20,0,0);
	cdscars[4] = CreateVehicle(477,2216.3777,1390.3939,10.5750,178.8710,36,1,1); // zr350
	Create3DTextLabel("ZR350",COLOR_PINK,2216.3777,1390.3939,10.5750,20,0,0);
	cdscars[5] = CreateVehicle(429,2221.6375,1390.8861,10.4690,182.2804,13,13,1); // banshee
	Create3DTextLabel("Banshee",COLOR_PINK,2221.6375,1390.8861,10.4690,20,0,0);
	cdscars[6] = CreateVehicle(400,1943.8254,2047.6097,10.9200,88.3420,62,1,1); // landstalk
	Create3DTextLabel("Landstalk",COLOR_PINK,1943.8254,2047.6097,10.9200,20,0,0);
	cdscars[7] = CreateVehicle(404,1943.7161,2052.4509,10.5718,92.4232,109,100,1); // perrinial
	Create3DTextLabel("Perrinial",COLOR_PINK,1943.7161,2052.4509,10.5718,20,0,0);
	cdscars[8] = CreateVehicle(458,1943.9092,2057.6306,10.7247,92.1170,113,1,1); // solair
	Create3DTextLabel("Solair",COLOR_PINK,1943.9092,2057.6306,10.7247,20,0,0);
	cdscars[9] = CreateVehicle(479,1943.6830,2080.2307,10.6403,95.3986,27,36,1); // regina
	Create3DTextLabel("Regina",COLOR_PINK,1943.6830,2080.2307,10.6403,20,0,0);
	cdscars[10] = CreateVehicle(489,1943.1403,2085.8079,11.0443,85.5787,13,118,1); // RANCHER
	Create3DTextLabel("Rancher",COLOR_PINK,1943.1403,2085.8079,11.0443,20,0,0);
	cdscars[11] = CreateVehicle(565,1672.6071,2205.4063,10.4453,90.3469,42,42,1); // flash
	Create3DTextLabel("Flash",COLOR_PINK,1672.6071,2205.4063,10.4453,20,0,0);
	cdscars[12] = CreateVehicle(562,1672.2681,2200.4414,10.4828,90.6220,17,1,1); // elegy
	Create3DTextLabel("Elegy",COLOR_PINK,1672.2681,2200.4414,10.4828,20,0,0);
	cdscars[13] = CreateVehicle(560,1672.4325,2195.7058,10.5333,89.1026,21,1,1); // sultan
	Create3DTextLabel("Sultan",COLOR_PINK,1672.4325,2195.7058,10.5333,20,0,0);
	cdscars[14] = CreateVehicle(559,1672.1451,2190.6719,10.4672,94.4778,58,8,1); // jester
	Create3DTextLabel("Jester",COLOR_PINK,1672.1451,2190.6719,10.4672,20,0,0);
	cdscars[15] = CreateVehicle(558,1672.2092,2186.3418,10.4528,91.2307,112,1,1); // uranus
	Create3DTextLabel("Uranus",COLOR_PINK,1672.2092,2186.3418,10.4528,20,0,0);
	cdscars[16] = CreateVehicle(602,1668.8837,1837.4745,10.6274,89.5878,69,1,1); //  alpha
	Create3DTextLabel("Alpha",COLOR_PINK,1668.8837,1837.4745,10.6274,20,0,0);
	cdscars[17] = CreateVehicle(527,1669.6100,1844.6697,10.5283,88.0596,53,1,1); // cadrona
	Create3DTextLabel("Cadrona",COLOR_PINK,1669.6100,1844.6697,10.5283,20,0,0);
	cdscars[18] = CreateVehicle(533,1673.5414,1854.3093,10.5220,357.5538,77,1,1); // feltzer
	Create3DTextLabel("Feltzer",COLOR_PINK,1673.5414,1854.3093,10.5220,20,0,0);
	cdscars[19] = CreateVehicle(526,1682.0562,1854.2068,10.5870,4.1750,9,39,1); // fortune
	Create3DTextLabel("Fortune",COLOR_PINK,1682.0562,1854.2068,10.5870,20,0,0);



	AddStaticVehicleEx(420,2511.6541,2398.8584,10.5250,270.9986,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2511.2939,2393.9575,10.5248,270.3139,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2511.1523,2388.9775,10.5245,270.1785,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2511.4785,2384.2209,10.5248,269.8399,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2511.6877,2379.4265,10.5247,268.3710,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2510.7793,2374.5769,10.5247,270.4250,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2510.3796,2369.7290,10.5248,266.4596,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2510.4365,2364.9492,10.5249,268.4361,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2510.9839,2359.9153,10.5247,269.1038,-1,-1,600); // taxi
	AddStaticVehicleEx(420,2511.2568,2355.3203,10.5263,268.1145,-1,-1,600); // taxi

	AddStaticVehicleEx(416,1594.9564,1849.5797,10.7028,1.3223,-1,-1,600); // ambulance
	AddStaticVehicleEx(416,1599.1447,1849.9583,10.7028,359.8129,-1,-1,600); // ambulance
	AddStaticVehicleEx(416,1603.3641,1849.6281,10.7028,359.8172,-1,-1,600); // ambulance
	AddStaticVehicleEx(416,1604.9183,1826.0952,10.7028,280.5521,-1,-1,600); // ambulance
	AddStaticVehicleEx(416,1599.8350,1840.0393,10.7027,180.7208,-1,-1,600); // ambulance
	AddStaticVehicleEx(416,1604.0608,1839.5903,10.7028,180.6639,-1,-1,600); // ambulance

	AddStaticVehicleEx(453,1655.1490,577.0685,-0.6218,267.4070,-1,-1,600); // boat
	AddStaticVehicleEx(453,1652.4130,589.9052,-0.8782,247.9801,-1,-1,600); // boat
	AddStaticVehicleEx(484,2305.2507,538.2811,-0.6921,173.4061,-1,-1,600); // boat
	AddStaticVehicleEx(484,2305.2820,519.3353,-0.2820,182.8062,-1,-1,600); // boat
	AddStaticVehicleEx(453,2269.6079,427.0761,-0.7798,66.2451,-1,-1,600); // boat

	AddStaticVehicleEx(598,2251.8567,2442.0295,10.6342,180.7495,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2260.5027,2442.2991,10.6338,180.5680,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2269.0532,2442.7520,10.6340,182.3663,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2282.1152,2460.0356,10.6343,359.8658,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2282.1731,2477.4954,10.6345,359.8295,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2268.9233,2459.9290,10.6343,177.8630,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2256.3069,2476.5615,10.6340,358.8758,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2260.5010,2477.6023,10.6340,358.0781,-1,-1,600); // LVPD
	AddStaticVehicleEx(598,2251.7993,2459.1260,10.6341,179.8891,-1,-1,600); // LVPD

	plane1 = CreateVehicle(577,1476.9653,1643.5526,10.8125,179.5810,-1,-1,1); // PLANE
	plane2 = CreateVehicle(577,1388.6698,1641.9207,10.8125,179.8550,-1,-1,1); // PLANE

	AddStaticVehicleEx(469,1337.6217,1649.1759,14.8750,0.9793,-1,-1,600); // CHOPPER
	AddStaticVehicleEx(469,1347.3939,1649.0358,14.8749,0.9794,-1,-1,600); // CHOPPER
	AddStaticVehicleEx(469,1328.0248,1648.6465,14.8828,2.2327,-1,-1,600); // CHOPPER
	AddStaticVehicleEx(469,1325.2067,1546.4943,14.8750,88.3768,-1,-1,600); // CHOPPER
	AddStaticVehicleEx(469,1325.9652,1536.7843,14.8750,82.1100,-1,-1,600); // CHOPPER
	AddStaticVehicleEx(469,1326.6970,1527.1992,14.8828,91.5102,-1,-1,600); // CHOPPER


    mysql_connect("127.0.0.1","kapil","lol","kapil_sslv",mysql_init(LOG_ONLY_ERRORS, 1));
	TmP = mysql_init(LOG_ONLY_ERRORS, 1);
    mysql_connect("127.0.0.1","kapil","lol","kapil_sslv",TmP);


	if(!mysql_query2("CREATE TABLE IF NOT EXISTS register ( userid CHAR(23) , password CHAR(23) , ondate TIMESTAMP DEFAULT NOW() , PRIMARY KEY(userid))"))
		printf("error at creating register table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS stats ( userid CHAR(23) , skin INTEGER , money INTEGER DEFAULT 20000, drugs INTEGER DEFAULT 0, gold INTEGER DEFAULT 0, fish INTEGER DEFAULT 0, muscles INTEGER DEFAULT 0,PRIMARY KEY(userid))"))
		printf("error at creating stats table");
    mysql_free_result();


	new sstring[700];
	format(string,256,"CREATE TABLE IF NOT EXISTS globalstats ( userid CHAR(23) PRIMARY KEY , pay_n_sprays INTEGER DEFAULT 0, food INTEGER DEFAULT 0, fish INTEGER DEFAULT 0");
	format(sstring,700,"%s, gold INTEGER DEFAULT 0, gym INTEGER DEFAULT 0, fuel INTEGER DEFAULT 0, drugs INTEGER DEFAULT 0, cars INTEGER DEFAULT 0, hospital INTEGER DEFAULT 0, properties INTEGER DEFAULT 0, tickets INTEGER DEFAULT 0, toplayers INTEGER DEFAULT 0, paydays INTEGER DEFAULT 0, deals INTEGER DEFAULT 0,  shops INTEGER DEFAULT 0, fromplayers INTEGER DEFAULT 0, weapons INTEGER DEFAULT 0, hours INTEGER DEFAULT 0)",string);
	if(!mysql_query2(sstring))
		printf("error at creating golbalstats table");
    mysql_free_result();


	if(!mysql_query2("CREATE TABLE IF NOT EXISTS spawns ( userid CHAR(23) , x FLOAT, y FLOAT , z FLOAT , r FLOAT , i INTEGER DEFAULT 0 , v INTEGER DEFAULT 0, PRIMARY KEY(userid))"))
		printf("error at creating spawns table");
    mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS referrers  ( userid CHAR(23) PRIMARY KEY, referrer CHAR(23) REFERENCES register(userid)  )"))
		printf("error at creating referrer table");
    mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS houses ( houseno INTEGER , owner CHAR(23) NOT NULL DEFAULT 'NONE', PRIMARY KEY(houseno))"))
		printf("error at creating houses table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS bizes ( bizno INTEGER , owner CHAR(23) NOT NULL DEFAULT 'NONE', collection INTEGER DEFAULT 0, PRIMARY KEY(bizno))"))
		printf("error at creating bizes table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS admins ( userid CHAR(23) , level INTEGER )"))
		printf("error at creating admins table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS cars ( owner CHAR(23) , model INTEGER , color INTEGER , parking INTEGER , paintjob INTEGER DEFAULT 3 ,mods CHAR(64) DEFAULT '0 0 0 0 0 0 0 0 0 0 0 0 0 0')"))
		printf("error at creating cars table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS mails ( mailid INTEGER AUTO_INCREMENT ,houseno INTEGER , ondate TIMESTAMP DEFAULT NOW() , sender CHAR(32) , subject CHAR(32), message TEXT, new BOOL DEFAULT 1, PRIMARY KEY(mailid))"))
		printf("error at creating mails table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS crimes ( userid CHAR(23) , reason CHAR(200) )"))
		printf("error at creating crimes table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS phone ( userid CHAR(23) , number INTEGER AUTO_INCREMENT , PRIMARY KEY(number)) "))
		printf("error at creating phone table");
	mysql_free_result();


	if(!mysql_query2("CREATE TABLE IF NOT EXISTS drugs ( plantid INTEGER PRIMARY KEY, owner CHAR(23) , drugs INTEGER DEFAULT 0) "))
		printf("error at creating drugs table");
	mysql_free_result();

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS horseshoes ( userid  CHAR(23) PRIMARY KEY ) "))
		printf("error at creating horseshoes table");
	mysql_free_result();

	for(new i = 0;i < sizeof(horseShoe);i++){
		format(string,256,"ALTER TABLE horseshoes ADD COLUMN shoe%d BOOL DEFAULT 0",i);
		mysql_query2(string);
	}
	format(string,256,"ALTER TABLE horseshoes ADD COLUMN blocked BOOL DEFAULT 0");
	mysql_query2(string);

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS donations ( userid  CHAR(23) PRIMARY KEY , country CHAR(30) , amount INTEGER DEFAULT 0)"))
		printf("error at creating donations table");


    mysql_query2("INSERT IGNORE INTO phone SET number = 6000 ");

	mysql_query2("CREATE TABLE IF NOT EXISTS weapons ( houseno INTEGER PRIMARY KEY )");

	for(new i = 0;i <= 12;i++){
		format(string,256,"ALTER TABLE weapons ADD COLUMN weapon%d INTEGER NOT NULL DEFAULT 0",i);
		mysql_query2(string);
		format(string,256,"ALTER TABLE weapons ADD COLUMN ammo%d INTEGER NOT NULL DEFAULT 0",i);
		mysql_query2(string);
	} // 1|8


	if(!mysql_query2("CREATE TABLE IF NOT EXISTS bank ( userid CHAR(23) , balance FLOAT , PRIMARY KEY(userid))"))
		printf("error at creating bank table");

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS statements ( userid CHAR(23) , statement TEXT, tid INTEGER AUTO_INCREMENT , ondate TIMESTAMP DEFAULT NOW() , PRIMARY KEY(tid))"))
		printf("error at creating statement table");

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS brief ( userid CHAR(23) , msg TEXT, ondate TIMESTAMP DEFAULT NOW())"))
		printf("error at creating brief table");

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS adminlog ( userid CHAR(23) ,adminid CHAR(23) , reason TEXT, ondate TIMESTAMP DEFAULT NOW())"))
		printf("error at creating adminlog table");

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS levels ( userid CHAR(23) , playingpoints INTEGER , level INTEGER , time TIMESTAMP , PRIMARY KEY(userid))"))
		printf("error at creating levels table");

	if(!mysql_query2("CREATE TABLE IF NOT EXISTS jobs ( userid CHAR(23) , job CHAR(20) , rank INTEGER DEFAULT 0, duties INTEGER DEFAULT 0 , current BOOL DEFAULT 0 , salaryrate FLOAT , lasttime TIMESTAMP DEFAULT NOW(), joined TIMESTAMP)")) // 1|8
		printf("error at creating jobs table");

	format(string,256,"SELECT model,color,parking FROM cars");
	mysql_query2(string);
	mysql_store_result();

	for(new i = 0;i < MAX_VEHICLES;i++)
	{
	    carId[i]  = -1;
	}
	for(new i = 0;i < mysql_num_rows();i++)
	{
        new color,model;
        mysql_fetch_field_num(0,string);
        model = strval(string);
        mysql_fetch_field_num(1,string);
        color = strval(string);
        mysql_fetch_field_num(2,string);
        new park = strval(string);
        new id;
        if(park < 1000)
			id = CreateVehicle(model,parking[park][0],parking[park][1],parking[park][2],parking[park][3],color,color,600);
		else
		{
		    park-=1000;
			id = CreateVehicle(model,houses[park][parkx],houses[park][parky],houses[park][parkz],houses[park][parkr],color,color,600);
			park+=1000;
		}

        locked[id] = 1;
		carId[id] = park;
		mysql_fetch_row_data();
	}
	mysql_free_result();
	AddStaticPickup(1239,1,0,0,0);
	for(new i = 0;i < sizeof(houses);i++)
	{
	    new id = CreatePickup(1273,1,houses[i][doorx],houses[i][doory],houses[i][doorz]);
	    houseId[i] = id;
	    format(string,256,"INSERT IGNORE INTO houses SET houseno = %d , owner = 'NONE' ",houses[i][houseno]);
	    mysql_query2(string);
	    format(string,256,"INSERT IGNORE INTO weapons SET houseno = %d",houses[i][houseno]);
	    mysql_query2(string);
		format(string,256,"Parking # %d",5000+i);
	    Create3DTextLabel(string,COLOR_PINK,houses[i][parkx],houses[i][parky],houses[i][parkz]-1,20,0);
 		hParkId[i] = CreatePickup(0,14,houses[i][parkx],houses[i][parky],houses[i][parkz]);

 		format(string,256,"House # %d",houses[i][houseno]);
		Create3DTextLabel(string,COLOR_GREEN,houses[i][doorx],houses[i][doory],houses[i][doorz]-0.5,15,0);

  	}

	for(new i = 0;i < sizeof(drugPlants);i++)
	{
	    format(string,256,"INSERT IGNORE INTO drugs SET plantid = %d , owner = 'NONE'",i);
	    mysql_query2(string);
		Create3DTextLabel("Drug Tree",COLOR_GROVE,drugPlants[i][0],drugPlants[i][1],drugPlants[i][2],20,0,0);
	}


	for(new i = 0;i < sizeof(parking);i++)
	{
	    format(string,256,"Parking # %d",6000+i);
	    Create3DTextLabel(string,COLOR_YELLOW,parking[i][0],parking[i][1],parking[i][2]-1,30,0);
 		parkId[i] = CreatePickup(1253 ,14,parking[i][0],parking[i][1],parking[i][2]);
	}

	for(new i = 0;i < sizeofmotels;i++){
		motelId[i] = CreatePickup( 1272 , 1 , fmotels(i,0,doorx) , fmotels(i,0,doory) , fmotels(i,0,doorz) );
		Create3DTextLabel( "Motel" , COLOR_BLUE , fmotels(i,0,doorx) , fmotels(i,0,doory) , fmotels(i,0,doorz)-0.5, 10 , 0);

		for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
		    format(string,256,"INSERT IGNORE INTO houses SET houseno = %d , owner = 'NONE' ",imotels(i,j,houseno));
		    mysql_query2(string);
		    format(string,256,"INSERT IGNORE INTO weapons SET houseno = %d",imotels(i,j,houseno));
		    mysql_query2(string);
		    format(string,256,"Room # %d", imotels(i,j,houseno));
			Create3DTextLabel( string , COLOR_BLUE , fmotels(i,j,doorx) , fmotels(i,j,doory) , fmotels(i,j,doorz)-0.5, 10 , 0);
   		}

	}

	carDealerShip[0][pickup] = CreatePickup( 1239 , 2 , 1940.4778,2062.7881,10.8203);
	carDealerShip[0][carslist][0] = 400;	carDealerShip[0][carscost][0] = 50000;
	carDealerShip[0][carslist][1] = 404;	carDealerShip[0][carscost][1] = 45000;
	carDealerShip[0][carslist][2] = 458;	carDealerShip[0][carscost][2] = 55000;
	carDealerShip[0][carslist][3] = 479;	carDealerShip[0][carscost][3] = 50000;
	carDealerShip[0][carslist][4] = 505;	carDealerShip[0][carscost][4] = 60000;
	Create3DTextLabel( "Car Dealership" , COLOR_YELLOW2 ,1940.4778,2062.7881,10.8203-0.5, 10 , 0);

	carDealerShip[1][pickup] = CreatePickup( 1239 , 2 , 1668.7592,1830.2897,10.8203);
	carDealerShip[1][carslist][0] = 436;	carDealerShip[1][carscost][0] = 75000;
	carDealerShip[1][carslist][1] = 526;	carDealerShip[1][carscost][1] = 70000;
	carDealerShip[1][carslist][2] = 533;	carDealerShip[1][carscost][2] = 85000;
	carDealerShip[1][carslist][3] = 527;	carDealerShip[1][carscost][3] = 80000;
	carDealerShip[1][carslist][4] = 602;	carDealerShip[1][carscost][4] = 85000;
	Create3DTextLabel( "Car Dealership" , COLOR_YELLOW2 ,1668.7592,1830.2897,10.8203-0.5, 10 , 0);

	carDealerShip[2][pickup] = CreatePickup( 1239 , 2 , 1651.7021,2193.6113,10.8203);
	carDealerShip[2][carslist][0] = 558;	carDealerShip[2][carscost][0] = 90000;
	carDealerShip[2][carslist][1] = 559;	carDealerShip[2][carscost][1] = 95000;
	carDealerShip[2][carslist][2] = 560;	carDealerShip[2][carscost][2] = 95000;
	carDealerShip[2][carslist][3] = 562;	carDealerShip[2][carscost][3] = 90000;
	carDealerShip[2][carslist][4] = 565;	carDealerShip[2][carscost][4] = 90000;
	Create3DTextLabel( "Car Dealership" , COLOR_YELLOW2 ,1651.7021,2193.6113,10.8203-0.5, 10 , 0);

	carDealerShip[3][pickup] = CreatePickup( 1239 , 2 , 2196.0103,1386.4563,10.8203);
	carDealerShip[3][carslist][0] = 429;	carDealerShip[3][carscost][0] = 120000;
	carDealerShip[3][carslist][1] = 477;	carDealerShip[3][carscost][1] = 125000;
	carDealerShip[3][carslist][2] = 480;	carDealerShip[3][carscost][2] = 140000;
	carDealerShip[3][carslist][3] = 555;	carDealerShip[3][carscost][3] = 150000;
	carDealerShip[3][carslist][4] = 506;	carDealerShip[3][carscost][4] = 220000;
	Create3DTextLabel( "Car Dealership" , COLOR_YELLOW2 ,2196.0103,1386.4563,10.8203-0.5, 10 , 0);

// car dealerships

	for(new i = 0;i < sizeof(bizes);i++){
	    format(string,256,"INSERT IGNORE INTO bizes SET bizno = %d",bizes[i][bizno]);
	    mysql_query2(string);
	    bizes[i][infopickup] = CreatePickup(1274,1,bizes[i][ix],bizes[i][iy],bizes[i][iz]);
 		format(string,256,"Shop # %d",bizes[i][bizno]);
		Create3DTextLabel(string,COLOR_GREEN,bizes[i][ix],bizes[i][iy],bizes[i][iz]-0.5,15,0);
	}

	joinTaxiDriverPickup = CreatePickup(1239,2,2520.5139,2371.8625,10.8203);
	Create3DTextLabel("Job",COLOR_YELLOW,2520.5139,2371.8625,10.8203-0.5,10,0,0);

	joinPilotPickup = CreatePickup(1239,2,1692.1687,1451.2262,10.7650);
	Create3DTextLabel("Job",COLOR_YELLOW,1692.1687,1451.2262,10.7650-0.5,10,0,0);

	joinMedicPickup = CreatePickup(1239,2,1615.5975,1825.4496,10.8203);
	Create3DTextLabel("Job",COLOR_YELLOW,1615.5975,1825.4496,10.8203-0.5,10,0,0);

	joinDrugDealerPickup = CreatePickup(1239,2,260.3493,2896.4666,9.9887);
	Create3DTextLabel("Job",COLOR_YELLOW,260.3493,2896.4666,9.9887-0.5,10,0,0);

	joinGoldMinerPickup = CreatePickup(1239,2,823.3005,857.4122,12.0251);
	Create3DTextLabel("Job",COLOR_YELLOW,823.3005,857.4122,12.0251-0.5,10,0,0);

	joinFishermanPickup = CreatePickup(1239,2,1633.4078,612.4949,7.7813);
	Create3DTextLabel("Job",COLOR_YELLOW,1633.4078,612.4949,7.7813-0.5,10,0,0);

	joinMechanicPickup = CreatePickup(1239,2,1646.7952,2187.7395,10.820);
	Create3DTextLabel("Job",COLOR_YELLOW,1646.7952,2187.7395,10.820-0.5,10,0,0);

	joinHitmanPickup = CreatePickup(1239,2,-915.5036,2684.3025,42.3703);
	Create3DTextLabel("Job",COLOR_YELLOW,-915.5036,2684.3025,42.3703-0.5,10,0,0);

	joinPolicePickup = CreatePickup(1239,2,2294.6147,2428.0566,10.8203);
	Create3DTextLabel("Job",COLOR_YELLOW,2294.6147,2428.0566,10.8203-0.5,10,0,0);

	planePickup1 =  CreatePickup(1239,1,1485.9446,1628.3011,10.8125);
	Create3DTextLabel("Fly",COLOR_YELLOW2,1485.9446,1628.3011,10.8125-0.5,10,0,0);

	planePickup2 =  CreatePickup(1239,1,1402.0067,1626.1522,10.8125);
	Create3DTextLabel("Fly",COLOR_YELLOW2,1402.0067,1626.1522,10.8125-0.5,10,0,0);

	bombPickup =  CreatePickup(1210,2,-901.9349,2687.1477,42.3703);
	Create3DTextLabel("Weaponary",COLOR_YELLOW2,-901.9349,2687.1477,42.3703-0.5,10,0,0);

	weaponPickup =  CreatePickup( 1210 ,2,214.4834,146.0713,1003.0234);
	Create3DTextLabel("Weaponary",COLOR_YELLOW2,214.4834,146.0713,1003.0234-0.5,10,0,0);

	dutyPickup =  CreatePickup( 1275,1,216.6767,145.8708,1003.0234);
	Create3DTextLabel("Uniform",COLOR_YELLOW2,216.6767,145.8708,1003.0234-0.5,10,0,0);

	goldPickup[0] =  CreatePickup(1239,1,637.6959,832.1423,-42.9609);
	Create3DTextLabel("Gold",COLOR_YELLOW2,637.6959,832.1423,-42.9609-0.5,10,0,0);

	goldPickup[1] =  CreatePickup(1239,1,638.2682,850.2251,-42.9609);
	Create3DTextLabel("Gold",COLOR_YELLOW2,638.2682,850.2251,-42.9609-0.5,10,0,0);

	goldPickup[2] =  CreatePickup(1239,1,601.0746,867.5930,-42.9609);
	Create3DTextLabel("Gold",COLOR_YELLOW2,601.0746,867.5930,-42.9609-0.5,10,0,0);


//	SetTimer("checkBadConnection",60 * 1000,1);
	new hour;
	gettime(hour);
	LastPayday = hour;
	SetTimer("checkPayday", 50 * 1000,1);
	SetTimer("loopAll",5 * 1000,1);
	SetTimer("updateDrugPlants",30 * 1000,1);
//	ConnectNPC("Cop","sslv_tests");

	taxi = CreateVehicle(420,2319.2068,1910.9938,8.7316,0.8281,-1,-1,1);
	ambulance = CreateVehicle(416,2492.3843,2772.2166,10.6785,90.033,-1,-1,1);
	plane = CreateVehicle(476,838.6503,-2059.5842,12.7422,3.1637,-1,-1,1);
	sentinel = CreateVehicle(565,-2328.4353,-1636.7461,483.5781,226.0820,-1,-1,1);
	police = CreateVehicle(598,1294.9508,-1849.0697,13.1098,270.0722,-1,-1,1);

	SetVehicleVirtualWorld(taxi,666);
	SetVehicleVirtualWorld(ambulance,666);
	SetVehicleVirtualWorld(plane,666);
	SetVehicleVirtualWorld(police,666);
	SetVehicleVirtualWorld(sentinel,666);

    gymJogPickup = CreatePickup(1239  ,2,759.3403,-65.0339,1000.6523,-1);
    gymPedalPickup = CreatePickup(1239  ,2,774.7163,-69.7635,1000.6484,-1);
    gymBoxPickup = CreatePickup(1239  ,2,771.9502,-64.9326,1000.7184,-1);

	racePickup = CreatePickup(1253,1,1099.3322,1601.3177,12.5469,-1);
	new Float:horseShoePos[sizeof(horseShoe)][3] = {
		{310.9471,-160.2199,999.5938},
		{-1477.7682,2641.8899,58.7879},
		{-1427.7683,2176.3445,54.3372},
		{-1225.6713,1834.1132,41.9297},
		{-788.6714,1556.8872,33.1333},
		{-733.9052,1545.9658,39.0195},
		{-630.3860,1442.2942,13.6172},
		{-608.9973,1323.1940,-1.8512},
		{-528.7797,1207.5850,36.3645},
		{-355.9684,1604.0612,83.9728},
		{-334.3510,1294.4155,53.6643},
		{-169.5177,1171.8159,19.7500},
		{353.3339,1304.4908,13.3625},
		{132.8678,1374.6342,10.5925},
		{1216.0835,-25.1362,1000.9531},
		{747.6236,2343.0833,28.8375},
		{1385.2369,2524.8987,10.4262},
		{1459.7007,2806.7461,10.8203},
		{629.5171,1280.3228,11.7113},
		{-931.8652,2635.1262,39.9719},
		{2699.4131,863.1060,10.1407},
		{2857.1152,1267.0234,11.3906},
		{2472.8882,2546.0256,10.8203},
		{201.7772,-104.4800,1005.1406},
		{1673.6489,1952.5984,11.0234},
		{2808.6909,2101.9888,10.8173},
		{1996.3958,1544.2373,15.2915},
		{1667.3149,898.9944,10.7791},
		{2872.1968,641.5654,31.7116},
		{2840.0828,996.5148,12.1243},
		{2818.7590,1660.3947,10.8203},
		{2947.2385,2119.2114,12.5666},
		{224.2472,-10.4536,1002.2109},
		{2312.0576,1687.2565,10.8203},
		{2323.7051,1283.2765,97.6013},
		{-25.3061,2336.0295,24.1406},
		{-136.5227,1625.3728,21.3331},
		{2526.3347,1564.3158,7.9617},
		{1189.6494,693.2542,9.8513},
		{-121.5252,858.4283,18.5824},
		{-687.3068,937.5889,13.6328},
		{-114.1372,-8.0934,1000.7188},
		{2003.3057,2181.2324,13.8722},
		{1578.1246,884.5807,10.8129},
		{2632.2502,1233.7269,26.9182},
		{2558.2942,1104.8823,10.8203},
		{-288.7870,2683.6643,65.8523},
		{2350.0291,1507.6261,42.8203},
		{1439.9023,796.6056,11.0234},
		{2406.1824,2973.3494,24.6667}
	};
    for(new i = 0;i < sizeof(horseShoe);i++){
        horseShoe[i] = CreatePickup(1247 , 15,horseShoePos[i][0],horseShoePos[i][1],horseShoePos[i][2]);
    }

	ConnectNPC("Suspect","sslv_suspect_handler");
	printf("loaded!");
	for(new i = 0;i < MAX_VEHICLES;i++){
	    fuel[i] = random(getVehicleFuelCapacity(i));
	}

	for(new i = 0;i < MAX_VEHICLES;i++){
		loadVehicleMods(i);
	}

	return 1;
}

public OnGameModeExit()
{
	mysql_close();
	mysql_close(TmP);

	for(new i = 0;i < sizeof(logo);i++)
		TextDrawDestroy(logo[i]);

	for(new i = 0;i < sizeof(cstats);i++)
		for(new j = 0;j < sizeof(cstats[]);j++)
			TextDrawDestroy(cstats[i][j]);

	for(new i = 0;i < MAX_PICKUPS;i++)
		DestroyPickup(i);
	for(new i = 0;i < MAX_VEHICLES;i++)
		DestroyVehicle(i);
	for(new i = 0;i < MAX_OBJECTS;i++)
		DestroyObject(i);

	return 1;
}

new First[MAX_PLAYERS];

public OnPlayerRequestClass(playerid, classid)
{
//	printf("%d requestclass %d",playerid,classid);
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	if(First[playerid] == -1){
	    return 0;
	}
	if(First[playerid] != 1)
	{
		First[playerid] = 1;
	    SetPlayerPos(playerid,4.9337,-26.7102,1003.5494);
	    SetPlayerInterior(playerid,1);
	    SetPlayerFacingAngle(playerid,0);
//	    SetPlayerCameraPos(playerid,4.9337,-20.7102,1005.0);
//	    SetPlayerCameraLookAt(playerid,4.9337,-26.7102,1003.5494);

		if(!existPlayer(playerid))
		    return 0;

		new Float:x,Float:y,Float:z,Float:r;
		new skin;
		format(string,256,"SELECT skin FROM stats WHERE userid = '%s'",getName(playerid));
		if(mysql_query2(string))
		{
		    mysql_store_result();
		    skin = mysql_fetch_int();
		    mysql_free_result();
		}
		format(string,256,"SELECT x,y,z,r FROM spawns WHERE userid = '%s'",getName(playerid));
		if(mysql_query2(string))
		{
			mysql_store_result();
			mysql_fetch_field_num(0,string);
			x = floatstr(string);
			mysql_fetch_field_num(1,string);
			y = floatstr(string);
			mysql_fetch_field_num(2,string);
			z = floatstr(string);
			mysql_fetch_field_num(3,string);
			r = floatstr(string);
			mysql_free_result();
			SetSpawnInfo(playerid,0,skin,x,y,z,r,0,0,0,0,0,0);
		}
		else{
		    printf("error at playerrequestclass");
		}
	}
	return 1;
}



public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}

	GameText(playerid,"~r~~<~Welcome~>~",5000);
	count[playerid] = 0;
	First[playerid] = -1;
	new name[23];
	GetPlayerName(playerid,name,23);

	PlayerPlaySound(playerid,1062,0,0,0);

	new fname[23];
	new lname[23];
	sendMessage(playerid," ",1);
	if(strlen(name) < 4){
	    sendMessage(playerid,"Your name must in Firstname_Lastname pattern.");
		return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	}
	if(strfind(name,"_")==-1){
	    sendMessage(playerid,"Your name must in Firstname_Lastname pattern.");
		return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	}
	strmid(fname,name,0,strfind(name,"_"));
	strmid(lname,name,strfind(name,"_")+1,strlen(name));

	if((strlen(fname) < 2) || (strlen(fname) > 10))
	{
	    sendMessage(playerid,"Your firstname should be between 2 and 10 characters.");
		return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	}
	if((strlen(lname) < 2) || (strlen(lname) > 10))
	{
		sendMessage(playerid,"Your lastname should be between 2 and 10 characters.");
		return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	}
	for(new i = 0;i < strlen(fname);i++)
	{
	    if(fname[i] < 65)
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	    if(fname[i] > 123)
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	    if((fname[i] > 91) && (fname[i] < 97))
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	}
	for(new i = 0;i < strlen(lname);i++)
	{
	    if(lname[i] < 65)
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	    if(lname[i] > 123)
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	    if((lname[i] > 91) && (lname[i] < 97))
	    {
	        sendMessage(playerid,"Your name should not contain any special characters.");
	        return ShowPlayerDialog(playerid,0,1,"Name","Enter a valid name:","DONE","QUIT");
	    }
	}

	TextDrawShowForPlayer(playerid,startScreen[0]);
	TextDrawShowForPlayer(playerid,startScreen[1]);
	SetTimerEx("hideStartScreens",1500,0,"i",playerid);
	StartCameraRot( playerid , 4.9337,-26.7102,1003.5494 , 5);
	First[playerid] = 0;
	round[playerid] = 1;
	if(existPlayer(playerid)==0)
	{

/*	    format(string,256,"Your account '%s' is not registered.",getName(playerid));
	    sendMessage(playerid,string,1);
	    sendMessage(playerid,"You will have to register your account at our website.");
	    sendMessage(playerid,"Visit website: http://stagesetlv.com. Thank you.");
	    Kick(playerid);
*/
		sendMessage(playerid,"Type /register to register your account.",1);
	}
	else
	{

	    sendMessage(playerid,"Type /login to login into your account.",1);
	}
	GetPlayerName(playerid,name,23);
	for(new i =0;i < strlen(name);i++){
		name[i] = tolower(name[i]);
	}
    name[0] = toupper(name[0]);
    new f = strfind(name,"_")+1;
    name[f] = toupper(name[f]);
    SetPlayerName(playerid,"loading");
    SetPlayerName(playerid,name);

	player[playerid][Spawned] = 0;
	player[playerid][LoggedIn] = 0;
	player[playerid][LastPickup] = 0;
	player[playerid][minutes] = 0;
	player[playerid][muted] = 0;
	player[playerid][cb] = 0.0;
	distanceTravelled[playerid] = 0;
	consumedDrugs[playerid] = 0;
	bomb[playerid] = 0;
	dutyPoints[playerid] = 0;
	ringing[playerid] = -1;
	onPhone[playerid] = -1;
	tied[playerid] = 0;
	tryingtotie[playerid] = -1;
	sell[playerid][srequestid] = -1;
	sell[playerid][sid] = -1;

	sell[playerid][scost] = -1;
	sell[playerid][samount] = -1;
    gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
//	hunger[playerid] = 0;
	format(sell[playerid][stype],10,"None");
	for(new i = 0;i < MAX_PLAYERS;i++){
	    bounty[playerid][i] = 0;
	}

	playingPointsTimer[playerid] = SetTimerEx("addPlayerPlayingPoint",10 * 60 * 1000,1,"i",playerid);
	printf("Player loaded %d",playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
//	iHaveBadConnection[playerid] = 0;
    KillTimer(badConnectionTimer[playerid]);
	if((GetPlayerInterior(playerid) == 7) && (GetPlayerVirtualWorld(playerid)==666)){
		for(new i = 0;i < 5;i++)
		    DestroyObject(target[i]);
	}
	KillTimer(playingPointsTimer[playerid]);
	if(vHud[playerid]){
		Delete3DTextLabel(vHud[playerid]);
	}
	KillTimer(hoursTimer[playerid]);
	requestPilot[playerid] = 0;

	new name[23];
	GetPlayerName(playerid,name,23);
	if(player[playerid][LoggedIn]==1){
		if(reason == 1){
			format(string,256,"* %s has quit.",name);
		}
		else if(reason == 0){
		    format(string,256,"* %s got crashed.",name);
		}
		else if(reason == 2){
		    format(string,256,"* %s got kicked.",name);
		}
		SendClientMessageToAll(COLOR_LIGHTRED,string);
	    new tmp[20];
	    GetPlayerIp(playerid,tmp,20);
	    format(string,256,"| Name: %s | Ip: %s |",getName(playerid),tmp);
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(isPlayerAdmin(i)){
				SendClientMessage(i,COLOR_LIGHTRED,string);
		    }
		}
	}
	if(ringing[playerid] != -1){
		sendMessage(ringing[playerid],"Your call was rejected.",1);
		SetPlayerSpecialAction(ringing[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		player[playerid][onphone] = 0;
		ringing[playerid] = -1;
    }
    else if(onPhone[playerid] != -1){
		sendMessage(onPhone[playerid],"Your call was hanged.",1);
		SetPlayerSpecialAction(onPhone[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		player[onPhone[playerid]][onphone] = 0;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		player[playerid][onphone] = 0;
		onPhone[playerid] = -1;
    }
    else{
		for(new i =0;i < MAX_PLAYERS;i++){
			if(IsPlayerConnected(i)){
			    if(onPhone[i] == playerid){
					sendMessage(onPhone[i],"Your call was hanged.",1);
					SetPlayerSpecialAction(onPhone[i],SPECIAL_ACTION_STOPUSECELLPHONE);
                    player[onPhone[i]][onphone] = 0;
					onPhone[i] = -1;
			    }
			}
		}
    }
 	return 1;
}

public OnPlayerSpawn(playerid)
{
	AntiDeAMX();

//	printf("%d spawns",playerid);
	format(string,255,"%s(%d)",getName(playerid),playerid);
//	Delete3DTextLabel(tag1[playerid]);
//	tag1[playerid] = Create3DTextLabel(string,GetPlayerColor(playerid),0,0,0,100,0,1);
//	Attach3DTextLabelToPlayer(tag1[playerid],playerid,0,0,-0.6);
	if(IsPlayerNPC(playerid)){
		new name[23];
		GetPlayerName(playerid,name,23);
		if(strcmp(name,"Suspect",true)==0){
		    SetPlayerVirtualWorld(playerid,666);
		    SetPlayerSkin(playerid,298);
			new v = CreateVehicle(504,0,0,0,0,-1,-1,600);
			SetVehicleVirtualWorld(v,666);
			PutPlayerInVehicle(playerid,v,0);
			SendClientMessage(playerid,0,"start");
			SendClientMessage(playerid,0,"pause");
		}
		return 1;
	}

/*	if(!gPlayerAnimLibsPreloaded[playerid]) {
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
   		PreloadAnimLib(playerid,"FIGHT_D");

//    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
*/	if(First[playerid] != 1)
	{
		OnPlayerRequestClass(playerid,0);
	}
	StopCameraRot( playerid );
	player[playerid][Spawned] = 1;
	format(string,256,"SELECT v,i FROM spawns WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	mysql_store_result();
	new v,i;
	mysql_fetch_field("v",string);
	v = strval(string);
	mysql_fetch_field("i",string);
	mysql_free_result();
	i = strval(string);
    SetPlayerVirtualWorld(playerid,v);
	SetPlayerInterior(playerid,i);
	format(string,256,"SELECT * FROM crimes WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	mysql_store_result();
	if(mysql_num_rows() > 0){
		SetPlayerJail(playerid);
	}
	mysql_free_result();
	new style[6] = { 4,5,6,7,15,16};
	for(new j = 0;j < sizeof(skins);j++){
	    if(GetPlayerSkin(playerid) == skins[j]){
	        SetPlayerFightingStyle(playerid,style[j % 6]);
	    }
	}
	if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
        GivePlayerWeapon(playerid,22,9999999999);
        GivePlayerWeapon(playerid,41,9999999999);
//        SetPlayerTeam(playerid,2);
	}
	if(isPlayerHitman(playerid)){
//        SetPlayerTeam(playerid,3);
	}
	SetPlayerArmour(playerid,getPlayerMuscles(playerid));
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	tied[playerid] = 0;
	tryingtotie[playerid] = -1;
//	hunger[playerid] = 0;
	new loss = random(2000);
	if(getPlayerMoney(playerid) < loss){
	    loss = getPlayerMoney(playerid);
	}
	givePlayerMoney(playerid,-loss);
	format(string,256,"You had to spend $%d for your injuries.",loss);
	sendMessage(playerid,string,1);
	addGlobalStats(playerid,"hospital",loss);
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(tryingtotie[i] == playerid){
	        tryingtotie[i] = -1;
	    }
	}
	if(gPlayerUsingLoopingAnim[playerid]) {
        gPlayerUsingLoopingAnim[playerid] = 0;
        TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	format(string,256,"%s gets unconsious.",getName(playerid));
	for(new i = 0;i <MAX_PLAYERS;i++){
	    if(isPlayerClose(i,playerid)){
			SendClientMessage(i,COLOR_ME,string);
	    }
	}
	if(killerid != -1){
	    if(isPlayerPolice(killerid) && getPlayerJobRank(killerid) > 1){
			if(GetPlayerWantedLevel(playerid) > 0){
			    jobDuty(killerid); // police
			}
		}
	}
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i)){
	        if(isPlayerHitman(i)){
	            if(checking[i] == 11){
	                killerid = i;
	                break;
	            }
	        }
	    }
	}
	if((reason == 54) || (reason == 34)){
	    for(new i = 0;i < MAX_PLAYERS;i++){
	        if(IsPlayerConnected(i)){
	            if(bounty[i][playerid] > 0){
	                format(string,256,"You had bounty of $%d, set by %s.",bounty[i][playerid],getName(i));
	                sendMessage(playerid,string,1);
	                format(string,256,"Your bounty of $%d, on %s was completed.",bounty[i][playerid],getName(playerid));
	                sendMessage(i,string,1);
	                givePlayerMoney(i,-bounty[i][playerid]);
	                givePlayerMoney(killerid,bounty[i][playerid]);
	                format(string,256,"You have assassinated %s for bounty of $%d.",getName(playerid),bounty[i][playerid]);
	                sendMessage(killerid,string,1);
	                jobDuty(killerid); // hitman
	            }
	        }
	    }
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	fuel[vehicleid] = random(getVehicleFuelCapacity(vehicleid));
	if(isBuyCar(vehicleid)){
//		fuel[vehicleid] = getVehicleFuelCapacity(vehicleid);
		loadVehicleMods(vehicleid);
	}
	printf("vehicle respawn %d",vehicleid);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(isBuyCar(vehicleid)){
		format(string,256,"UPDATE cars SET mods = '0 0 0 0 0 0 0 0 0 0 0 0 0 0',paintjob = 3 WHERE parking = %d",carId[vehicleid]);
		mysql_query2(string); // 1|8
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(player[playerid][onphone] == 1){
		new name[23];
		name = getName(playerid);
		format(string,256,"%s)) %s",name,text);
	    for(new i =0;i < MAX_PLAYERS;i++){
	        if(IsPlayerConnected(i)){
			    if((onPhone[i] == playerid) || (onPhone[playerid] == i)){
			        if(player[playerid][onphone] == 1){
      					SendClientMessage(i,COLOR_PHONE,string);
			        }
			    }
			}
	    }
		SendClientMessage(playerid,COLOR_PHONE,string);
//		addBrief(playerid,string);
        return 0;
	}
	format(string,256,"%s says: %s",getName(playerid),text);
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(getPlayerDistanceFromPlayer(i,playerid) <  30){
	  		SendClientMessage(i,COLOR_WHITE,string);
	    }
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{

	printf("%s(%d) %s",getName(playerid),playerid,cmdtext);
	new idx = 0, cmd[20];
	cmd = strtok(cmdtext,idx);
	if(player[playerid][Spawned] == 0){
		if(!((strcmp(cmd,"/login",true)==0) || (strcmp(cmd,"/register",true)==0))){
		    return 1;
		}
	}
	if(strcmp("/pm",cmd,true)==0){

	    new id,msg[200];
	    if(sscanf(cmdtext,"sis",cmd,id,msg)==0){
	        if(IsPlayerConnected(id)){
				format(string,256,"Pm %s(%d) to %s(%d): %s.",getName(playerid),playerid,getName(id),id,msg);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(isAdminLevel(i,5) && i != id && i != playerid){
				        sendMessage(i,string,1);
				    }
				}

				format(string,256,"(( Pm to %s(%d): %s ))",getName(id),id,msg);
				SendClientMessage(playerid,COLOR_YELLOW,string);
				format(string,256,"(( Pm from %s(%d): %s ))",getName(playerid),playerid,msg);
				SendClientMessage(id,COLOR_YELLOW,string);
			}
			else{
				sendMessage(playerid,"Enter a valid id.");
			}
	    }
	    else{
	        sendMessage(playerid,"Usage: /pm <id> <reason>.",1);
	        sendMessage(playerid,"Ex: /pm 6 Are you from india?");
	    }
	}
	else if(strcmp("/report",cmd,true)==0){
	    new id,reason[256];
	    if(sscanf(cmdtext,"sis",cmd,id,reason)==0){
	        if(IsPlayerConnected(id)){
				format(string,256,"%s(%d) reported %s(%d) reason: %s.",getName(playerid),playerid,getName(id),id,reason);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(isPlayerAdmin(i)){
				        sendMessage(i,string,1);
				    }
				}
				sendMessage(playerid,"Your message has been sent to our admin.",1);
			}
			else{
				sendMessage(playerid,"Enter a valid id.");
			}
	    }
	    else{
	        sendMessage(playerid,"Usage: /report <id> <reason>.",1);
	        sendMessage(playerid,"Ex: /report 23 Hax0r");
	    }
	}
	else if(strcmp("/plantseed",cmd,true)==0){
	    if(isPlayerDrugDealer(playerid)){
	        for(new i = 0;i < sizeof(drugPlants);i++){
				if(getPlayerDistanceFromPoint(playerid,drugPlants[i][0],drugPlants[i][1],drugPlants[i][2]) < 5){
				    format(string,256,"SELECT owner FROM drugs WHERE plantid = %d",i);
				    mysql_query2(string);
				    mysql_store_result();
				    mysql_fetch_row(string);
				    mysql_free_result();
				    if(strcmp(string,"NONE",true)==0){
				        format(string,256,"UPDATE drugs SET owner = '%s' WHERE plantid = %d",getName(playerid),i);
				        mysql_query2(string);
				        sendMessage(playerid,"You have successfully planted your seed.",1);
				    }
					return 1;
				}
			}
			sendMessage(playerid,"You are not at any drug tree.",1);
	    }
	}
	else if(strcmp("/plantinfo",cmd,true)==0){
	    if(isPlayerDrugDealer(playerid)){
	        for(new i = 0;i < sizeof(drugPlants);i++){
				if(getPlayerDistanceFromPoint(playerid,drugPlants[i][0],drugPlants[i][1],drugPlants[i][2]) < 5){
				    format(string,256,"SELECT owner,drugs FROM drugs WHERE plantid = %d",i);
				    mysql_query2(string);
				    mysql_store_result();
				    new owns[23];
				    mysql_fetch_field("owner",owns);
				    mysql_fetch_field("drugs",string);
				    new drugs = strval(string);
				    mysql_free_result();
				    format(string,256,"|Drug Plant|Owner: %s|Drugs: %d|",owns,drugs);
					sendMessage(playerid,string,1);
					return 1;
				}
	        }
	        sendMessage(playerid,"You are not at any drug tree.",1);
	    }
	}
	else if(strcmp("/removeplant",cmd,true)==0){
	    if(isPlayerDrugDealer(playerid)){
	        for(new i = 0;i < sizeof(drugPlants);i++){
				if(getPlayerDistanceFromPoint(playerid,drugPlants[i][0],drugPlants[i][1],drugPlants[i][2]) < 5){
				    format(string,256,"SELECT owner FROM drugs WHERE plantid = %d",i);
				    mysql_query2(string);
				    mysql_store_result();
				    mysql_fetch_row(string);
				    mysql_free_result();
				    if(strcmp(string,"NONE",true)==0){
				        sendMessage(playerid,"There is no drug plant over here.",1);
				    }
				    else{
				        format(string,256,"UPDATE drugs SET owner = 'NONE', drugs = 0 WHERE plantid = %d",i);
				        mysql_query2(string);
				        sendMessage(playerid,"You have removed the drug plant.",1);
				    }
					return 1;
				}
	        }
	        sendMessage(playerid,"You are not at any drug tree.",1);

	    }
	}
	else if(strcmp("/takedrugs",cmd,true)==0){
	    if(isPlayerDrugDealer(playerid)){
	        {
		        for(new i = 0;i < sizeof(drugPlants);i++){
					if(getPlayerDistanceFromPoint(playerid,drugPlants[i][0],drugPlants[i][1],drugPlants[i][2]) < 5){
					    format(string,256,"SELECT drugs FROM drugs WHERE plantid = %d",i);
					    mysql_query2(string);
					    mysql_store_result();
					    new drugs = mysql_fetch_int();
					    mysql_free_result();
					    if(drugs <= 0){
					        sendMessage(playerid,"There are not drugs to collect at this tree.",1);
					    }
					    else{
					        format(string,256,"UPDATE drugs SET drugs = 0 WHERE plantid = %d",i);
					        mysql_query2(string);
					        format(string,256,"You took %dg of drugs from this tree.",drugs);
					        sendMessage(playerid,string,1);
					        givePlayerDrugs(playerid,drugs);
							dutyPoints[i]+=drugs;
							if(dutyPoints[i] > 200){
								new jd = dutyPoints[i] / 200;
								dutyPoints[i] = 0;
								for(new j = 0;j < jd;j++)
									jobDuty(playerid); // drug dealer
							}
					    }
						return 1;
					}
		        }
		    }
	        sendMessage(playerid,"You are not at any drug tree.",1);
	    }
	}
	else if(strcmp("/backup",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
			format(string,256,"Officer %s has requested backup.",getName(playerid));
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
	        for(new i = 0;i < MAX_PLAYERS;i++){
	            if(IsPlayerConnected(i) && i != playerid){
	                if(isPlayerPolice(i) && getPlayerJobRank(i) > 1){
	                    sendMessage(i,string,1);
	                    sendMessage(i,"A waypoint has been set on your map.");
	                    SetPlayerCheckpoint(i,x,y,z-100,2);
	                }
	            }
	        }
			sendMessage(playerid,"All units were reported for a backup.",1);
	    }
	}
	else if(strcmp("/callpilot",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){

			new r = 1000 + random(8999);

	        for(new i = 0;i < MAX_PLAYERS;i++){
	            if(IsPlayerConnected(i) && i != playerid){
	                if(isPlayerPilot(i)){
		                format(string,256,"Officer %s has requested for an pilot.",getName(playerid));
	                    sendMessage(i,string,1);
		                format(string,256,"Type /acceptduty %d, if you want to assist him.",r);
						sendMessage(i,string);
		            }
	            }
	        }
	        requestPilot[playerid] = r;
			sendMessage(playerid,"All units were reported for a backup.",1);
	    }
	}

	else if(strcmp("/ticket",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        new id,amount,reason[200];
	        if(sscanf(cmdtext,"siis",cmd,id,amount,reason)==0){
	            if(IsPlayerConnected(id)){
					if(!isPlayerPolice(id) && getPlayerJobRank(id) > 1){
					    if(getPlayerDistanceFromPlayer(playerid,id) < 5){
							format(string,256,"You have given a ticket to %s.",getName(id));
							sendMessage(playerid,string,1);
							format(string,256,"You have received a ticket from %s.",getName(playerid));
							sendMessage(id,string,1);
							format(string,256,"%s has given a ticket to %s.",getName(playerid),getName(id));
							for(new i = 0;i < MAX_PLAYERS;i++){
							    if(IsPlayerConnected(i) && i != playerid && id != i){
							        if(isPlayerClose(playerid,i)){
								        SendClientMessage(i,COLOR_ME,string);
								    }
							    }
							}
							format(string,200,"Ticket Cost: $%d Reason: %s.",amount,reason);
							sendMessage(playerid,string);
							sendMessage(id,string);
							givePlayerMoney(id,-amount);
							givePlayerMoney(playerid,amount);
							addGlobalStats(id,"tickets",amount);
						}
						else{
						    sendMessage(playerid,"You are not close enough.");
						}
					}
	            }
	            else{
		         	sendMessage(playerid,"You must enter a valid playerid.",1);
	            }
	        }
	        else{
	            sendMessage(playerid,"Usage: /ticket <id> <cost> <reason>.",1);
	        }
		}
	}
	else if(strcmp("/acceptduty",cmd,true)==0){
	    if(isPlayerPilot(playerid)){
			cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	            sendMessage(playerid,"Usage: /acceptduty <requestid>.",1);
	            return sendMessage(playerid,"Ex: /acceptduty 3232.");
	        }
	        new r = strval(cmd);
	        for(new i = 0;i < MAX_PLAYERS;i++){
		        if(requestPilot[i] == r){
					new Float:x,Float:y,Float:z;
					GetPlayerPos(i,x,y,z);
			        requestPilot[i] = 0;

                    SetPlayerCheckpoint(playerid,x,y,z-100,2);
                    format(string,256,"%s has accepted your request, he will be there soon.",getName(playerid));
                    sendMessage(i,string,1);
                    format(string,256,"You have accepted %s's request.",getName(i));
                    sendMessage(playerid,string,1);
			        sendMessage(playerid,"A waypoint is set on your map");
			        return 1;
				}
			}
			sendMessage(playerid,"Your requestid is not valid anymore.",1);
	    }
	}
	else if(strcmp("/blindfold",cmd,true)==0){
        if(tied[playerid] == 0){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /blindfold <id>.",1);
			    return sendMessage(playerid,"Ex: /blindfold 4.");
			}
			new id = strval(cmd);
			if(getPlayerDistanceFromPlayer(playerid,id) < 5){
				if(tied[id] == 100){
					if(GetPlayerInterior(id) != 100){
					    SetPlayerInterior(id,100);
					    format(string,256,"You have blindfolded %s.",getName(id));
					    sendMessage(playerid,string,1);
					    format(string,256,"You were blindfolded by %s.",getName(playerid));
					    sendMessage(id,string,1);
					    format(string,256,"%s has blindfolded %s.",getName(playerid),getName(id));
					    for(new i = 0;i < MAX_PLAYERS;i++){
					        if(IsPlayerConnected(i) && i != playerid && i != id){
					            if(isPlayerClose(playerid,i)){
									SendClientMessage(i,COLOR_ME,string);
					            }
					        }
					    }
					}
					else{
						format(string,256,"%s is already blindfolded.",getName(id));
					    sendMessage(playerid,string);
					}
				}
				else{
				    sendMessage(playerid,"The player must be tied before he can be blindfolded.",1);
				}
			}
			else{
				sendMessage(playerid,"You are not close enough.",1);
			}
        }
        else{
            sendMessage(playerid,"You cannot move when you are tied.",1);
        }
	}
	else if(strcmp("/unblindfold",cmd,true)==0){
        if(tied[playerid] == 0){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /unblindfold <id>.",1);
			    return sendMessage(playerid,"Ex: /unblindfold 4.");
			}
			new id = strval(cmd);
			if(getPlayerDistanceFromPlayer(playerid,id) < 5){
				if(GetPlayerInterior(id) == 100){
				    SetPlayerInterior(id,GetPlayerInterior(playerid));
				    format(string,256,"You have unblindfolded %s.",getName(id));
				    sendMessage(playerid,string,1);
				    format(string,256,"You were unblindfolded by %s.",getName(playerid));
				    sendMessage(id,string,1);
				    format(string,256,"%s has unblindfolded %s.",getName(playerid),getName(id));
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerConnected(i) && i != playerid && i != id){
				            if(isPlayerClose(playerid,i)){
								SendClientMessage(i,COLOR_ME,string);
				            }
				        }
				    }
				}
				else{
					format(string,256,"%s is not blindfolded.",getName(id));
				    sendMessage(playerid,string);
				}
			}
			else{
          	  	sendMessage(playerid,"You cannot move when you are tied.",1);
			}
		}
        else{
            sendMessage(playerid,"You cannot move when you are tied.",1);
        }
	}
	else if(strcmp("/fix",cmd,true)==0){
	    if(isPlayerTaxiDriver(playerid)){
	        new v = GetClosestVehicle(playerid);
	        if(isTaxi(v)){
		        if(getPlayerDistanceFromVehicle(playerid,v) > 5){
		            return sendMessage(playerid,"You are not close enough.",1);
		        }
				for(new i = 0;i < MAX_PLAYERS;i++){
					if(IsPlayerInVehicle(i,v)){
					    return sendMessage(playerid,"The taxi should be empty inorder to fix it.",1);
					}
				}
    			freezePlayer(playerid);
				checkVehicle( playerid , v );
			}
			else{
			    sendMessage(playerid,"You are not close enough to a taxi.",1);
			}
	    }
	}
	else if(strcmp("/deathblow",cmd,true)==0){
	    if(isPlayerHitman(playerid)){
	        if(tied[playerid] == 0){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /deathblow <id>.",1);
				    return sendMessage(playerid,"Ex: /deathblow 4.");
				}
				new id = strval(cmd);
				if(getPlayerDistanceFromPlayer(playerid,id) < 5){
					if(GetPlayerInterior(id) == 100){
					    SetPlayerHealth(id,0);
					    format(string,256,"You have death blowed %s.",getName(id));
					    sendMessage(playerid,string,1);
					    format(string,256,"You were death blowed by %s.",getName(playerid));
					    sendMessage(id,string,1);
					    format(string,256,"%s has death blowed by %s.",getName(playerid),getName(id));
					    for(new i = 0;i < MAX_PLAYERS;i++){
					        if(IsPlayerConnected(i) && i != playerid && i != id){
					            if(isPlayerClose(playerid,i)){
									SendClientMessage(i,COLOR_ME,string);
					            }
					        }
					    }
					}
					else{
						format(string,256,"%s is not blindfolded.",getName(id));
					    sendMessage(playerid,string);
					}
				}
				else{
	          	  	sendMessage(playerid,"You cannot move when you are tied.",1);
				}
			}
	        else{
	            sendMessage(playerid,"You cannot move when you are tied.",1);
	        }
	    }
	}
	else if(strcmp("/uncuff",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        if(tied[playerid] == 0){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /uncuff <id>.",1);
				    return sendMessage(playerid,"Ex: /uncuff 4.");
				}
				new id = strval(cmd);
				if(tied[id] == 100){
					unfreezePlayer(id);
				    format(string,256,"You have uncuffed %s.",getName(id));
				    sendMessage(playerid,string,1);
				    format(string,256,"You were uncuffed by %s.",getName(playerid));
				    sendMessage(id,string,1);
				    format(string,256,"%s has uncuffed %s.",getName(playerid),getName(id));
				    tied[id] =0;
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerConnected(i) && i != playerid && i != id){
				            if(isPlayerClose(playerid,i)){
								SendClientMessage(i,COLOR_ME,string);
				            }
				        }
				    }
				    if(GetPlayerInterior(id) != GetPlayerInterior(playerid)){
					    format(string,256,"%s have unblinded himself.",getName(id));
					    for(new i = 0;i < MAX_PLAYERS;i++){
					        if(IsPlayerConnected(i)){
					            if(isPlayerClose(playerid,i)){
									SendClientMessage(i,COLOR_ME,string);
					            }
					        }
					    }
					    SetPlayerInterior(id,GetPlayerInterior(playerid));
				    }
				}
				else{
					format(string,256,"%s is not cuffed.",getName(id));
				    sendMessage(playerid,string);
				}
	        }
	        else{
	            sendMessage(playerid,"You cannot move when you are tied.",1);
	        }
	    }
	}

	else if(strcmp("/untie",cmd,true)==0){
        if(tied[playerid] == 0){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /untie <id>.",1);
			    return sendMessage(playerid,"Ex: /untie 4.");
			}
			new id = strval(cmd);
			if(tied[id] == 100){
				unfreezePlayer(id);
			    format(string,256,"You have untied %s.",getName(id));
			    sendMessage(playerid,string,1);
			    format(string,256,"You were untied by %s.",getName(playerid));
			    sendMessage(id,string,1);
			    format(string,256,"%s has untied %s.",getName(playerid),getName(id));
			    tied[id] =0;
			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(IsPlayerConnected(i) && i != playerid && i != id){
			            if(isPlayerClose(playerid,i)){
							SendClientMessage(i,COLOR_ME,string);
			            }
			        }
			    }
			    if(GetPlayerInterior(id) != GetPlayerInterior(playerid)){
				    format(string,256,"%s have unblinded himself.",getName(id));
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerConnected(i)){
				            if(isPlayerClose(playerid,i)){
								SendClientMessage(i,COLOR_ME,string);
				            }
				        }
				    }
				    SetPlayerInterior(id,GetPlayerInterior(playerid));
			    }
			}
			else{
				format(string,256,"%s is not tied.",getName(id));
			    sendMessage(playerid,string);
			}
        }
        else{
            sendMessage(playerid,"You cannot move when you are tied.",1);
        }
	}
	else if(strcmp("/dropgun",cmd,true)==0){
	    new w = GetPlayerWeapon(playerid);
	    if(w){
	        new Float:x,Float:y,Float:z;
	        GetPlayerPos(playerid,x,y,z);
			new g[12],a[12];
			for(new i = 0;i < 12;i++){
			    GetPlayerWeaponData(playerid,i,g[i],a[i]);
			}
			ResetPlayerWeapons(playerid);
			for(new i = 0;i < 12;i++){
			    if(g[i] != w){
					GivePlayerWeapon(playerid,g[i],a[i]);
				}
			}
	        CreatePickup(weaponPickupModel(w), 4,x+random(7)-3,y+random(7)-3,z-0.7,GetPlayerVirtualWorld(playerid));
			format(string,256,"%s has dropped his gun.",getName(playerid));
			SendClientMessage(playerid,COLOR_ME,string);
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i)){
		            if(isPlayerClose(playerid,i)){
						SendClientMessage(i,COLOR_ME,string);
		            }
		        }
		    }
	    }
	}
	else if(strcmp("/pull",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd)){
		    sendMessage(playerid,"Usage: /pull <id>.",1);
		    return sendMessage(playerid,"Ex: /pull 56.");
		}
		new id = strval(cmd);
		if(!IsPlayerInAnyVehicle(playerid)){
		    return sendMessage(playerid,"You are not in any vehicle.",1);
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
		    return sendMessage(playerid,"You must be seated as a driver.",1);
		}
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(IsPlayerConnected(i)){
		        if(GetPlayerVehicleSeat(i) == 1){
		            return sendMessage(playerid,"The seat beside you is not empty.",1);
		        }
		    }
		}
		if(IsPlayerInAnyVehicle(id)){
		    return sendMessage(playerid,"The player you are trying to pull is already in a car.",1);
		}
		if(getPlayerDistanceFromPlayer(playerid,id) > 5){
		    return sendMessage(playerid,"You are not close enough.");
		}
		if(tied[id]!=100){
		    return sendMessage(playerid,"The player must be tied inorder to pull him.");
		}
		PutPlayerInVehicle(id,GetPlayerVehicleID(playerid),1);

		format(string,256,"%s has pulled you into the car.",getName(playerid));
		sendMessage(id,string,1);
		format(string,256,"You have pulled %s into the car.",getName(id));
		sendMessage(playerid,string,1);
		format(string,256,"%s has pulled %s into the car.",getName(playerid),getName(id));
	    for(new i = 0;i < MAX_PLAYERS;i++){
	        if(IsPlayerConnected(i) && i != playerid && i != id){
	            if(isPlayerClose(playerid,i)){
					SendClientMessage(i,COLOR_ME,string);
	            }
	        }
	    }
	}
	else if(strcmp("/kill",cmd,true)==0){
	    SetPlayerHealth(playerid,0);
	}
/*	else if(strcmp("/tow",cmd,true)==0){
	    if(isPlayerPolice(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
			    return sendMessage(playerid,"You are not in any vehicle.",1);
			}
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
			    return sendMessage(playerid,"You must be seated as a driver.",1);
			}
			new c = GetPlayerVehicleID(playerid);
			new v = GetClosestVehicleOtherThan(playerid,c);
			if(!isCommonVehicle(v)){
			    return sendMessage(playerid,"You cannot tow that vehicle.",1);
			}
			if(!isCommonVehicle(v)){
			    return sendMessage(playerid,"You cannot tow that vehicle.",1);
			}
			if(IsTrailerAttachedToVehicle(c)){
				return sendMessage(playerid,"You are already towing a vehicle.",1);
			}
			if(getPlayerDistanceFromVehicle(playerid,v)<10){
				AttachTrailerToVehicle(v,c);
                sendMessage(playerid,"You have towed that car.",1);
                format(string,256,"%s has towed a car.",getName(playerid));
			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(IsPlayerConnected(i) && i != playerid){
			            if(isPlayerClose(playerid,i)){
							SendClientMessage(i,COLOR_ME,string);
			            }
			        }
			    }
			}
		}
	}
	else if(strcmp("/untow",cmd,true)==0){
	    if(isPlayerPolice(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
			    return sendMessage(playerid,"You are not in any vehicle.",1);
			}
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
			    return sendMessage(playerid,"You must be seated as a driver.",1);
			}
			new c = GetPlayerVehicleID(playerid);
			if(IsTrailerAttachedToVehicle(c)){
				DetachTrailerFromVehicle(c);
				sendMessage(playerid,"You have dettached your trailer.",1);
				format(string,256,"%s has untowed his trailer.",getName(playerid));
			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(IsPlayerConnected(i) && i != playerid){
			            if(isPlayerClose(playerid,i)){
							SendClientMessage(i,COLOR_ME,string);
			            }
			        }
			    }
			}
			else{
				sendMessage(playerid,"You dont have any trailer attached.",1);
			}
		}
	}
*/
	else if(strcmp("/empty",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        new v = GetClosestVehicle(playerid);
	        if(getPlayerDistanceFromVehicle(playerid,v) > 10){
	            return sendMessage(playerid,"You are not close enough to any vehicle.");
	        }
			format(string,256,"You have emptied fuel from this car.");
			sendMessage(playerid,string,1);
			fuel[v] = 0;
			format(string,256,"%s has emptied fuel from his car.",getName(playerid));
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i) && i != playerid){
		            if(isPlayerClose(playerid,i)){
						SendClientMessage(i,COLOR_ME,string);
		            }
		        }
		    }
	    }
	}
	else if(strcmp("/removemods",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        new v = GetClosestVehicle(playerid);
	        if(getPlayerDistanceFromVehicle(playerid,v) > 10){
	            return sendMessage(playerid,"You are not close enough to any vehicle.");
	        }
			format(string,256,"You have removed all mods from this car.");
			sendMessage(playerid,string,1);
			for(new i = 0;i < 14;i++){
				RemoveVehicleComponent(v,i);
			}
			if(isBuyCar(v)){
				format(string,256,"UPDATE cars SET mods = '0 0 0 0 0 0 0 0 0 0 0 0 0 0',paintjob = 3 WHERE parking = %d",carId[v]);
				mysql_query2(string); // 1|8
			}
			format(string,256,"%s has removed all mods from his car.",getName(playerid));
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i) && i != playerid){
		            if(isPlayerClose(playerid,i)){
						SendClientMessage(i,COLOR_ME,string);
		            }
		        }
		    }
	    }
	}

	else if(strcmp("/tie",cmd,true)==0){
        if((tied[playerid]==0) && (tryingtotie[playerid] == -1)){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /tie <id>.",1);
			    return sendMessage(playerid,"Ex: /tie 32.");
			}
			new id = strval(cmd);
			if(IsPlayerConnected(id) && id != playerid && getPlayerDistanceFromPlayer(playerid,id) < 3 && !IsPlayerInAnyVehicle(id)){
				if(tied[id] == 0){
					tryingtotie[playerid] = id;
					format(string,256,"You are trying to tie %s.",getName(id));
					sendMessage(playerid,string,1);
					format(string,256,"%s is trying to tie you.",getName(playerid));
					sendMessage(id,string,1);
					GameText(playerid,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
					GameText(id,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
					tied[id] = 50;
					SetTimerEx("failedToTie",20000,0,"ii", id , playerid );
					freezePlayer(playerid);
					freezePlayer(id);
				}
				else{
				    sendMessage(playerid,"The player you are trying to tie is already tied.");
				}
			}
			else{
			    sendMessage(playerid,"The player your trying to tie is not close enough.");
			}
        }
        else{
			sendMessage(playerid,"You cannot tie someone at this state.",1);
        }
	}
	else if(strcmp("/cuff",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        if((tied[playerid]==0) && (tryingtotie[playerid] == -1)){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /cuff <id>.",1);
				    return sendMessage(playerid,"Ex: /cuff 32.");
				}
				new id = strval(cmd);
				if(IsPlayerConnected(id) && id != playerid && getPlayerDistanceFromPlayer(playerid,id) < 3 && !IsPlayerInAnyVehicle(id)){
					if(tied[id] == 0){
						tryingtotie[playerid] = id;
						format(string,256,"You are trying to cuff %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"%s is trying to cuff you.",getName(playerid));
						sendMessage(id,string,1);
						GameText(playerid,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
						GameText(id,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
						tied[id] = 50;
						SetTimerEx("failedToTie",20000,0,"ii", id , playerid );
						freezePlayer(playerid);
						freezePlayer(id);
					}
					else{
					    sendMessage(playerid,"The player you are trying to cuff is already tied.");
					}
				}
				else{
				    sendMessage(playerid,"The player your trying to cuff is not close enough.");
				}
	        }
	        else{
				sendMessage(playerid,"You cannot cuff someone at this state.",1);
	        }
	    }
	}

/*	else if(strcmp("/hideidentity",cmd,true)==0){
		if(isPlayerHitman(playerid)){
//			Update3DTextLabelText(tag1[playerid],GetPlayerColor(playerid)," ");

			if(revealTimer[playerid]){
				sendMessage(playerid,"Your identity has been hidden for 60 secs.",1);
			}
			else{
				sendMessage(playerid,"Your identity will be hidden for 60 more secs.",1);
			}
			KillTimer(revealTimer[playerid]);
			revealTimer[playerid] = SetTimerEx("revealIdentity",60000,0,"i",playerid);
		}
	}
*/	else if(strcmp("/unmark",cmd,true)==0){
		DisablePlayerCheckpoint(playerid);
	}
	else if(strcmp("/mark",cmd,true)==0){
	    if(isPlayerHitman(playerid)){
	        cmd = strtok(cmdtext,idx);
		    if(!strlen(cmd)){
		        sendMessage(playerid,"Usage: /mark <id>>",1);
		        return sendMessage(playerid,"Ex: /mark 23");
		 	}
		 	new id = strval(cmd);
		 	if(!IsPlayerConnected(id)){
		 	    return sendMessage(playerid,"You must enter a valid playerid.",1);
		 	}
		 	new Float:x,Float:y,Float:z;
		 	GetPlayerPos(id,x,y,z);

		 	SetPlayerCheckpoint(playerid,x,y,z-100,2);
		 	sendMessage(playerid,"Way point has been set on the map.");
		}
		else if(isPlayerTaxiDriver(playerid)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	            sendMessage(playerid,"Usage: /mark <house|room|shop|bank|job|cars>",1);
	            return sendMessage(playerid,"Ex: /mark bank");
	        }
	        if(strcmp("house",cmd,true)==0){
	            cmd = strtok(cmdtext,idx);
	            if(!strlen(cmd)){
	                sendMessage(playerid,"Usage: /mark house <house#>",1);
	                return sendMessage(playerid,"Ex: /mark house 90007.");
	            }
	            new hno = strval(cmd);
	            for(new i = 0;i < sizeof(houses);i++){
	                if(houses[i][houseno] == hno){

			            SetPlayerCheckpoint(playerid,houses[i][doorx],houses[i][doory],houses[i][doorz]-100,2);
			            return sendMessage(playerid,"Way point has been set on the map.");
			        }
			    }
			    sendMessage(playerid,"Please enter a valid house#.",1);
	        }
	        else if(strcmp("room",cmd,true)==0){
	            cmd = strtok(cmdtext,idx);
	            if(!strlen(cmd)){
	                sendMessage(playerid,"Usage: /mark room <room#>",1);
	                return sendMessage(playerid,"Ex: /mark room 80007.");
	            }
	            new hno = strval(cmd);
	            for(new i = 0;i < sizeofmotels;i++){
	                for(new j = 0;j < sizeof(motel) && imotels(i,j,houseno);j++){
		                if(imotels(i,j,houseno) == hno){

				            SetPlayerCheckpoint(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz)-100,2);
				            return sendMessage(playerid,"Way point has been set on the map.");
				        }
					}
			    }
			    sendMessage(playerid,"Please enter a valid room#.",1);
	        }
	        else if(strcmp("shop",cmd,true)==0){
	            cmd = strtok(cmdtext,idx);
	            if(!strlen(cmd)){
	                sendMessage(playerid,"Usage: /mark shop <shop#>",1);
	                return sendMessage(playerid,"Ex: /mark shop 70007.");
	            }
	            new hno = strval(cmd);
	            for(new i = 0;i < sizeof(bizes);i++){
	                if(bizes[i][bizno] == hno){

			            SetPlayerCheckpoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]-100,2);
			            return sendMessage(playerid,"Way point has been set on the map.");
			        }
			    }
			    sendMessage(playerid,"Please enter a valid shop#.",1);
	        }
	        else if(strcmp("bank",cmd,true)==0){
	            new Float:d = 999999.9,closest = -1;
	            for(new i = 0;i < sizeof(markbanks);i++){
	                new Float:cd = getPlayerDistanceFromPoint(playerid,markbanks[i][0],markbanks[i][1],markbanks[i][2]);
	                if(cd < d){
						d = cd;
						closest = i;
			        }
			    }

	            SetPlayerCheckpoint(playerid,markbanks[closest][0],markbanks[closest][1],markbanks[closest][2]-100,2);
			    sendMessage(playerid,"Way point has been set on the map.",1);
	        }
	        else if(strcmp("dealership",cmd,true)==0){
	            cmd = strtok(cmdtext,idx);
	            if(!strlen(cmd)){
	                sendMessage(playerid,"Usage: /mark dealership <1|2|3|4>",1);
	                return sendMessage(playerid,"Ex: /mark shop 1");
	            }
	            new id = strval(cmd);
				if(id == 1){

		            SetPlayerCheckpoint(playerid,1940.4778,2062.7881,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
				}
				else if(id == 2){

		            SetPlayerCheckpoint(playerid,1668.7592,1830.2897,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
				}
				else if(id == 3){

		            SetPlayerCheckpoint(playerid,1651.7021,2193.6113,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
				}
				else if(id == 4){

		            SetPlayerCheckpoint(playerid,2196.0103,1386.4563,10.8203,20);
				    sendMessage(playerid,"Way point has been set on the map.",1);
				}
				else {
	                sendMessage(playerid,"Usage: /mark dealership <1|2|3|4>",1);
	                return sendMessage(playerid,"Ex: /mark shop 1");
				}
	        }
	        else if(strcmp("job",cmd,true)==0){
	            cmd = strtok(cmdtext,idx);
	            if(!strlen(cmd)){
	                sendMessage(playerid,"Usage: /mark job <jobname>",1);
	                sendMessage(playerid,"JobNames: hitman,drugdealer,taxidriver,pilot,goldminer,fisherman,mechanic,police,medic. ");
	                return sendMessage(playerid,"Ex: /mark job drugdealer");
	            }
	            if(strcmp(cmd,"Hitman",true)==0){

		            SetPlayerCheckpoint(playerid,-915.5036,2684.3025,42.3703-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"drugdealer",true)==0){

		            SetPlayerCheckpoint(playerid,260.3493,2896.4666,9.9887-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"taxidriver",true)==0){

		            SetPlayerCheckpoint(playerid,2520.5139,2371.8625,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"pilot",true)==0){

		            SetPlayerCheckpoint(playerid,1692.1687,1451.2262,10.7650-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"medic",true)==0){

		            SetPlayerCheckpoint(playerid,1615.5975,1825.4496,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"goldminer",true)==0){

		            SetPlayerCheckpoint(playerid,823.3005,857.4122,12.0251-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"fisherman",true)==0){

		            SetPlayerCheckpoint(playerid,1633.4078,612.4949,7.7813-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"police",true)==0){

		            SetPlayerCheckpoint(playerid,2294.6147,2428.0566,10.8203-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else if(strcmp(cmd,"mechanic")==0){

		            SetPlayerCheckpoint(playerid,1646.7952,2187.7395,10.820-100-100,2);
				    sendMessage(playerid,"Way point has been set on the map.",1);
	            }
	            else{
	                sendMessage(playerid,"Usage: /mark job <jobname>",1);
	                sendMessage(playerid,"JobNames: hitman,drugdealer,taxidriver,pilot,goldminer,fisherman,mechanic,police,medic. ");
	                return sendMessage(playerid,"Ex: /mark job drugdealer");
	            }
	        }
	    }
	}
	else if(strcmp("/findajob",cmd,true)==0){
        cmd = strtok(cmdtext,idx);
        if(!strlen(cmd)){
            sendMessage(playerid,"Usage: /findajob <jobs>",1);
            sendMessage(playerid,"Jobs: hitman,drugdealer,taxidriver,pilot");
            sendMessage(playerid,"medic,goldminer,fisherman,mechanic,police.");

            return sendMessage(playerid,"Ex: /findajob drugdealer");
        }
        if(strcmp(cmd,"Hitman",true)==0){

            SetPlayerCheckpoint(playerid,-915.5036,2684.3025,42.3703-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"drugdealer",true)==0){

            SetPlayerCheckpoint(playerid,260.3493,2896.4666,9.9887-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"taxidriver",true)==0){

            SetPlayerCheckpoint(playerid,2520.5139,2371.8625,10.8203-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"pilot",true)==0){

            SetPlayerCheckpoint(playerid,1692.1687,1451.2262,10.7650-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"medic",true)==0){

            SetPlayerCheckpoint(playerid,1615.5975,1825.4496,10.8203-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"goldminer",true)==0){

            SetPlayerCheckpoint(playerid,823.3005,857.4122,12.0251-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"fisherman",true)==0){

            SetPlayerCheckpoint(playerid,1633.4078,612.4949,7.7813-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"police",true)==0){

            SetPlayerCheckpoint(playerid,2294.6147,2428.0566,10.8203-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else if(strcmp(cmd,"mechanic")==0){

            SetPlayerCheckpoint(playerid,1646.7952,2187.7395,10.820-100-100,2);
		    sendMessage(playerid,"Way point has been set on the map.",1);
        }
        else{
            sendMessage(playerid,"Usage: /findajob <jobname>",1);
            sendMessage(playerid,"JobNames: hitman,drugdealer,taxidriver,pilot,goldminer,fisherman,mechanic,police,medic. ");
            return sendMessage(playerid,"Ex: /findajob drugdealer");
        }
	}

	else if(strcmp("/tradegold",cmd,true)==0){
	    cmd = strtok(cmdtext,idx);
	    if(!strlen(cmd)){
	        sendMessage(playerid,"Usage: /tradegold <centigrams>",1);
	        return sendMessage(playerid,"Ex: /tradegold 500.");
	    }
	    new amount = strval(cmd);
	    if(getPlayerGold(playerid) >= amount){
	        new money = floatround((amount * todaysGoldRate()));
			givePlayerMoney(playerid,money);
			givePlayerGold(playerid,-amount);
	        format(string,256,"You traded %dcg of gold for $%d.",amount,money);
	        sendMessage(playerid,string,1);
	    }
	    else{
	        sendMessage(playerid,"You dont have that much gold.");
	    }
	}
	else if(strcmp("/a",cmd,true)==0){
	    if(isPlayerAdmin(playerid)){
	        new message[200];
	        if(sscanf(cmdtext,"ss",cmd,message)==0){
	            new name[23];
	            name = getName(playerid);
    	        format(string,256,"@%s: %s",name,message);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(IsPlayerConnected(i)){
				        if(isPlayerAdmin(i)){
							SendClientMessage(i,COLOR_LIGHTGREEN,string);
						}
					}
				}
	        }
	        else{
	            sendMessage(playerid,"Usage: /a <message>.",1);
	            return sendMessage(playerid,"Ex: /a id 4 looks like hacking");
	        }
	    }
	}
	else if(strcmp("/admins",cmd,true)==0){
	    sendMessage(playerid,"Admins Online:",1);
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(isPlayerAdmin(i)) {
		        format(string,256,"%s(%d)",getName(i),i);
		        sendMessage(playerid,string);
		        format(string,256,"%s checks /admins.",getName(playerid));
		        sendMessage(i,string,1);
		    }
		}
	}
	else if(strcmp("/noooc",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
			noooc = noooc==1?0:1;
			if(noooc == 0)
				format(string,256,"Admin %s has disabled ooc.",getName(playerid));
			else
				format(string,256,"Admin %s has enabled ooc.",getName(playerid));
			SendClientMessageToAll(COLOR_GREY,string);
		}
	}
	else if(strcmp("/check",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /check <id>.",1);
	        }
	        new id = strval(cmd);
	        new tmp = playerid;
	        playerid = id;
	        {
			    new numhouses,numshops,numrooms,numcars,gold,fish;
			    new name[23];
			    name = getName(playerid);
				format(string,256,"SELECT houseno FROM houses WHERE owner = '%s' AND houseno >= 90000",name);
				mysql_query2(string);
				mysql_store_result();
				numhouses = mysql_num_rows();
				mysql_free_result();

				format(string,256,"SELECT houseno FROM houses WHERE owner = '%s' AND houseno < 90000",name);
				mysql_query2(string);
				mysql_store_result();
				numrooms = mysql_num_rows();
				mysql_free_result();

				format(string,256,"SELECT bizno FROM bizes WHERE owner = '%s' ",name);
				mysql_query2(string);
				mysql_store_result();
				numshops = mysql_num_rows();
				mysql_free_result();

				format(string,256,"SELECT model FROM cars WHERE owner = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				numcars = mysql_num_rows();
				mysql_free_result();

				new phoneno,cash,bombs,drugs,level,pp,time[30],job[20];

				format(string,256,"SELECT number FROM phone WHERE userid = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				phoneno = mysql_fetch_int();
				mysql_free_result();

				format(string,256,"SELECT money,drugs,gold,fish FROM stats WHERE userid = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_field("money",string);
				cash = strval(string);
				mysql_fetch_field("drugs",string);
				drugs = strval(string);
				mysql_fetch_field("gold",string);
				gold = strval(string);
				mysql_fetch_field("fish",string);
				fish = strval(string);
				mysql_free_result();


				bombs = bomb[playerid];

				format(string,256,"SELECT level,playingpoints FROM levels WHERE userid = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_field("level",string);
				level = strval(string);
				mysql_fetch_field("playingpoints",string);
				pp = strval(string);
				mysql_free_result();

				new rank;
				format(string,256,"SELECT job,rank FROM jobs WHERE userid = '%s' AND current = 1",name);
				mysql_query2(string);
				mysql_store_result();
				if(mysql_num_rows()){
					mysql_fetch_field("job",job);
					mysql_fetch_field("rank",string);
					rank = strval(string);
				}
				else
					format(job,20,"None");
				mysql_free_result();

				format(string,256,"SELECT ondate FROM register WHERE userid = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(time);
				mysql_free_result();

				playerid = tmp;
				sendMessage(playerid," ",1);
				format(string,256,"|Houses: %d|Rooms: %d|Shops: %d|Cars: %d|",numhouses,numrooms,numshops,numcars);
				sendMessage(playerid,string);

				format(string,256,"|Phone#: %d|Bank: %f|Job: %s|Rank: %d|",phoneno,getPlayerBankMoney(name),job,rank);
				sendMessage(playerid,string);

				format(string,256,"|Bombs: %d|Drugs: %d|Gold: %d|Fishes: %d|",bombs,drugs,gold,fish);
				sendMessage(playerid,string);

				format(string,256,"|Cash: %d|Level: %d|Playing Points: (%d/%d)|",cash,level,pp,floatround(level*1.8));
				sendMessage(playerid,string);

				format(string,256,"|Registration Date: %s|",time);
				sendMessage(playerid,string);
	        }
	    }
	}
	else if(strcmp("/warn",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        new id,msg[200];
	        if(sscanf(cmdtext,"sis",cmd,id,msg)!=0){
	        	return sendMessage(playerid,"Usage: /warn <id> <msg>.",1);
	        }
	        format(string,256,"Admin %s warned %s for, %s.",getName(playerid),getName(id),msg);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        format(string,256,"Warning from admin %s: %s.",getName(playerid),msg);
	        SendClientMessage(id,COLOR_LIGHTRED,string);
	        addAdminLog(id,playerid , msg);
	        format(string,256,"Warning to %s: %s.",getName(id),msg);
	        SendClientMessage(playerid,COLOR_LIGHTRED,string);
	    }
	}
	else if(strcmp("/ann",cmd,true)==0){
	    if(isAdminLevel(playerid,3)){
	        new msg[200];
	        if(sscanf(cmdtext,"ss",cmd,msg)!=0){
	        	return sendMessage(playerid,"Usage: /ann <msg>.",1);
	        }
			format(string,256,"~r~%s:~w~ %s",getName(playerid),msg);
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
			        GameTextForPlayer(i,string,5000,5);
			    }
			}
	    }
	}
	else if(strcmp("/spectate",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /spectate <id>.",1);
	        }
	        new id = strval(cmd);
			TogglePlayerSpectating(playerid,1);
			PlayerSpectatePlayer(playerid,id);
	    }
	}
	else if(strcmp("/stopspectate",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
            TogglePlayerSpectating(playerid,0);
	    }
	}
	else if(strcmp("/freeze",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /freeze <id> <reason>.",1);
	        }
			format(string,256,"You have freezed %s( Reason: %s ).",getName(id),reason);
			sendMessage(playerid,string,1);
			addAdminLog(id,playerid , reason);
	        format(string,256,"Admin %s freezed %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        TogglePlayerControllable(id,0);
	    }
	}
	else if(strcmp("/unfreeze",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /unfreeze <id> <reason>.",1);
	        }
			format(string,256,"You have unfreezed %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
	        format(string,256,"Admin %s unfreezed %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        TogglePlayerControllable(id,1);
	    }
	}
	else if(strcmp("/kick",cmd,true)==0){
	    if(isAdminLevel(playerid,3)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /kick <id> <reason>.",1);
	        }
			format(string,256,"You have kicked %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
			addAdminLog(id,playerid , reason);
	        format(string,256,"Admin %s kicked %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        Kick(id);
	    }
	}
	else if(strcmp("/starblock",cmd,true)==0){
	    if(isAdminLevel(playerid,1)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"si",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /starblock <id>.",1);
	        }
			format(string,256,"UPDATE horseshoes SET blocked  = 1 WHERE userid = '%s'",getName(id));
			mysql_query2(string);
			format(string,256,"You have blocked %s from getting star prizes.",getName(id));
			sendMessage(id,string,1);
	    }
	}
	else if(strcmp("/slap",cmd,true)==0){
	    if(isAdminLevel(playerid,2)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /slap <id> <reason>.",1);
	        }
			format(string,256,"You have slapped %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
			addAdminLog(id,playerid , reason);
	        format(string,256,"Admin %s slapped %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        SetPlayerVelocity(playerid,0,0,1000);
	    }
	}
	else if(strcmp("/lift",cmd,true)==0){
	    if(isAdminLevel(playerid,2)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /lift <id> <reason>.",1);
	        }
			format(string,256,"You have lift %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
	        format(string,256,"Admin %s lift %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        addAdminLog(id,playerid , reason);
	        new Float:x,Float:y,Float:z;
	        GetPlayerPos(id,x,y,z);
	        SetPlayerPos(id,x,y,z+100);
	        TogglePlayerControllable(id,0);
	    }
	}
	else if(strcmp("/mute",cmd,true)==0){
	    if(isAdminLevel(playerid,3)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /mute <id> <reason>.",1);
	        }
			format(string,256,"You have muted %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
	        format(string,256,"Admin %s muted %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        addAdminLog(id,playerid , reason);
			player[id][muted] = 1;
	    }
	}
	else if(strcmp("/unmute",cmd,true)==0){
	    if(isAdminLevel(playerid,3)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /unmute <id> <reason>.",1);
	        }
			format(string,256,"You have unmuted %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
	        format(string,256,"Admin %s unmuted %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        addAdminLog(id,playerid , reason);
			player[id][muted] = 0;
	    }
	}

	else if(strcmp("/crash",cmd,true)==0){
	    if(isAdminLevel(playerid,5)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"si",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /crash <id>.",1);
	        }
			format(string,256,"You have kicked %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
	        GameTextForPlayer(id,"~r~Byeeee~",1000,5);
	    }
	}
	else if(strcmp("/payday",cmd,true)==0){
	    if(isAdminLevel(playerid,5)){
			payday();
	    }
	}
	else if(strcmp("/changename",cmd,true)==0){
	    if(isAdminLevel(playerid,5)){
	        cmd = strtok(cmdtext,idx);
			new id,name[23];
	        if(sscanf(cmdtext,"sis",cmd,id,name)!=0){
	        	return sendMessage(playerid,"Usage: /changename <id> <newname>.",1);
	        }
		    format(string,256,"SELECT * FROM register WHERE userid = '%s'",name);
		    mysql_query2(string);
		    mysql_store_result();
			if(mysql_num_rows()==0){
			    format(string,256,"UPDATE admins SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE bank SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE bizes SET owner = '%s' WHERE owner = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE cars SET owner = '%s' WHERE owner = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE crimes SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE donations SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE drugs SET owner = '%s' WHERE owner = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE globalstats SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE horseshoes SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE houses SET owner  = '%s' WHERE owner  = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE jobs SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE levels SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE phone SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE register SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE spawns SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE statements SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE stats SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE weapons SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE brief SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
			    format(string,256,"UPDATE adminlog SET userid = '%s' WHERE userid = '%s'",name,getName(id));
				mysql_query2(string);
				SetPlayerName(id,name);
			    sendMessage(playerid,"Name updated.");
			}
			else{
			    sendMessage(playerid,"That name is already taken.");
			}
			mysql_free_result();
		}
	}
	else if(strcmp("/ban",cmd,true)==0){
	    if(isAdminLevel(playerid,4)){
	        cmd = strtok(cmdtext,idx);
	        new id,reason[200];
	        if(sscanf(cmdtext,"siz",cmd,id,reason)!=0){
	        	return sendMessage(playerid,"Usage: /ban <id> <reason>.",1);
	        }
			format(string,256,"You have kicked %s( Reason: %s )",getName(id),reason);
			sendMessage(playerid,string,1);
			addAdminLog(id,playerid , reason);
	        format(string,256,"Admin %s kicked %s( Reason: %s )",getName(playerid),getName(id),reason);
	        SendClientMessageToAll(COLOR_LIGHTRED,string);
	        Ban(id);
	    }
	}
	else if(strcmp("/goto",cmd,true)==0){
	    if(isAdminLevel(playerid,4)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /goto <id>.",1);
	        }
	        new i = strval(cmd);
			new Float:x,Float:y,Float:z;
			GetPlayerPos(i,x,y,z);
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(i));
			SetPlayerPos(playerid,x,y,z);
			SetPlayerInterior(playerid,GetPlayerInterior(i));
			format(string,256,"You have gone to %s.",getName(i));
			sendMessage(playerid,string,1);
	    }
	}
	else if(strcmp("/bring",cmd,true)==0){
	    if(isAdminLevel(playerid,4)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /bring <id>.",1);
	        }
	        new i = strval(cmd);
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
			SetPlayerPos(i,x,y,z);
			SetPlayerInterior(i,GetPlayerInterior(playerid));
			format(string,256,"You have brought %s to you.",getName(i));
			sendMessage(playerid,string,1);
	    }
	}
	else if(strcmp("/setint",cmd,true)==0){
	    if(isAdminLevel(playerid,5)){
	        cmd = strtok(cmdtext,idx);
	        new id = strval(cmd);
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /setint <id> <interior>.",1);
	        }
	        new vw = strval(cmd);
			SetPlayerInterior(id,vw);
			format(string,256,"You have set %s to interior %d",getName(id),vw);
			sendMessage(playerid,string,1);
	    }
	}
	else if(strcmp("/setvw",cmd,true)==0){
	    if(isAdminLevel(playerid,5)){
	        cmd = strtok(cmdtext,idx);
	        new id = strval(cmd);
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /setvw <id> <vw>.",1);
	        }
	        new vw = strval(cmd);
			SetPlayerVirtualWorld(id,vw);
			format(string,256,"You have set %s to vw %d",getName(id),vw);
			sendMessage(playerid,string,1);
	    }
	}
	else if(strcmp("/query",cmd,true)==0){
	    if(isAdminLevel(playerid,6)){
	        cmd = strtok(cmdtext,idx);
	        if(sscanf(cmdtext,"ss",cmd,string)!=0){
	        	return sendMessage(playerid,"Usage: /query <query>.",1);
	        }
	        mysql_query2(string);
			mysql_store_result();
			mysql_fetch_row(string);
			sendMessage(playerid,string,1);
			mysql_free_result();
	    }
	}
	else if(strcmp("/addadmin",cmd,true)==0){
	    if(isAdminLevel(playerid,6)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /addadmin <id>.",1);
	        }
	        new id = strval(cmd);
			if(isPlayerAdmin(id)){
			    return sendMessage(playerid,"Player is already an admin.");
			}
			else{
			    format(string,256,"INSERT INTO admins ( userid , level ) VALUES ( '%s' , 1 )",getName(id));
			    mysql_query2(string);
			    format(string,256,"You have successfully added %s into the admin list.",getName(id));
			    sendMessage(playerid,string);
			}
	    }
	}
	else if(strcmp("/removeadmin",cmd,true)==0){
	    if(isAdminLevel(playerid,6)){
	        cmd = strtok(cmdtext,idx);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /removeadmin <id>.",1);
	        }
	        new id = strval(cmd);
			if(isPlayerAdmin(id)){
			    format(string,256,"DELETE FROM admins WHERE userid = '%s'",getName(id));
			    mysql_query2(string);
			    format(string,256,"You have successfully removed %s from the admin list.",getName(id));
			    sendMessage(playerid,string);
			}
			else{
			    return sendMessage(playerid,"Player is not an admin.");
			}
	    }
	}
	else if(strcmp("/setadminlvl",cmd,true)==0){
	    if(isAdminLevel(playerid,6)){
	        cmd = strtok(cmdtext,idx);
	        new id = strval(cmd);
	        cmd = strtok(cmdtext,idx);
	        new lvl = strval(cmd);
	        if(!strlen(cmd)){
	        	return sendMessage(playerid,"Usage: /addadminlvl <id> <level>.",1);
	        }

			if(isPlayerAdmin(id)){
			    format(string,256,"UPDATE admins SET level = %d WHERE userid = '%s'",lvl,getName(id));
			    mysql_query2(string);
			    format(string,256,"You have successfully updated admin %s to level %d.",getName(id),lvl);
			    sendMessage(playerid,string);
			}
			else{
			    return sendMessage(playerid,"Player is not an admin.");
			}
	    }
	}
	else if(strcmp("/eatfish",cmd,true)==0){
	    new fish = getPlayerFish(playerid);
		if(fish > 0){
		    new Float:h,Float:a;
		    GetPlayerArmour(playerid,a);
		    GetPlayerHealth(playerid,h);
		    if(h <= 100.0 || a < float(getPlayerMuscles(playerid))){

				fish--;
				if(fish == 0){
					format(string,256,"You have ate away your last fish.");
				}
				else if(fish == 1){
					format(string,256,"You have only 1 more fish left.");
				}
				else{
					format(string,256,"You have %d fishes left.",fish);
				}
				sendMessage(playerid,string);
				givePlayerFish(playerid,-1);
				GetPlayerHealth(playerid,a);
				if(a >= 100.0){
					GetPlayerArmour(playerid,a);
					a += 25.0;
					if(getPlayerMuscles(playerid) < a){
					    a = getPlayerMuscles(playerid);
					}
					SetPlayerArmour(playerid,a);
				}
				else{
					SetPlayerHealth(playerid,a+25);
				}
				ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,1,1);
		    }
		    else{
		        sendMessage(playerid,"You are not hungry at all.",1);
		    }

		}
		else{
		    sendMessage(playerid,"You dont have any fishes to eat.",1);
		}
	}
	else if(strcmp("/myjob",cmd,true)==0){
		if(isPlayerTaxiDriver(playerid)){
			sendMessage(playerid,"Your job is to transport people from place to place.",1);
			sendMessage(playerid,"You earn $40/mile. You can also use /mark command to");
			sendMessage(playerid,"mark any property like houses,shops,jobs on the map.");
			sendMessage(playerid,"you can use /fix to fix your taxi any time.");
			sendMessage(playerid,"|  /mark  |  /unmark |");
			sendMessage(playerid,"|  /fix   |");
		}
		else if(isPlayerMechanic(playerid)){
		    sendMessage(playerid,"Your job is to check and fix car components.",1);
		    sendMessage(playerid,"You can charge your own amount for your services.");
			sendMessage(playerid,"|  /checkcondition   |  /replace  |");
		}
		else if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
		    sendMessage(playerid,"Your job is upto your own limits. You may find people",1);
		    sendMessage(playerid,"commiting crimes like, fighting, parking in non parking");
		    sendMessage(playerid,"areas, taking drugs, drunk n drive etc and ticket them");
		    sendMessage(playerid,"or accept some bribe from them. You might even do /crimes");
		    sendMessage(playerid,"to see a list of criminals and also do /callpilot to");
		    sendMessage(playerid,"request pilot assistance to catch a criminal in a chopper.");
		    sendMessage(playerid,"|  /suspect |  /innocent  |");
			sendMessage(playerid,"|  /crimes  |  /r  |");
			sendMessage(playerid,"|  /backup  |  /requestpilot |");
			sendMessage(playerid,"|  /ticket  |  /jail  |");
			sendMessage(playerid,"|   /cuff    |  /uncuff |");
			sendMessage(playerid,"| /removemods | /empty  |");
			sendMessage(playerid,"|  /mg  |");
			if(getPlayerJobRank(playerid) >= 10){
				sendMessage(playerid,"|   /promote   |  /demote  |");
				sendMessage(playerid,"|   /suspend   |");
			}
		}
		else if(isPlayerPolice(playerid)){
		    sendMessage(playerid,"You are not an approved police officer yet.",1);
		    sendMessage(playerid,"You have passed the police test but you need to appply");
			sendMessage(playerid,"at the forum to get approved as a police officer.");
		}
		else if(isPlayerHitman(playerid)){
			sendMessage(playerid,"Your job is to assassinate people on /bountylist for money.",1);
			sendMessage(playerid,"You will have to do your job without revealing your identity");
			sendMessage(playerid,"and also very silently, without letting anyone know that it");
			sendMessage(playerid,"was you who has done that murder.");
			sendMessage(playerid,"|  /bountylist  |  /placebomb  |");
			sendMessage(playerid,"|  /mark   |    /unmark    |");
			sendMessage(playerid,"|   /deathblow   |");
		}
		else if(isPlayerPilot(playerid)){
			sendMessage(playerid,"Your job is to fly planes from place to place. You can find",1);
			sendMessage(playerid,"your missions at the airport. You might also assist police");
			sendMessage(playerid,"in their crime chases by flying their choppers.");
			sendMessage(playerid,"|  /acceptduty  | /r  |");
		}
		else if(isPlayerMedic(playerid)){
			sendMessage(playerid,"Your job is to find people who are injured and heal them.",1);
			sendMessage(playerid,"You migh use the ambulance at the hospital to travel.");
			sendMessage(playerid,"|  /firstaid  |");
		}
		else if(isPlayerFisherman(playerid)){
			sendMessage(playerid,"Your job is to catch fishesh from the oceans and sell",1);
			sendMessage(playerid,"them to the people at your own rates. You will have to be");
			sendMessage(playerid,"on the boat with another person driving it to catch fishes.");
			sendMessage(playerid,"Once you have caught enough fishes you can sell them.");
			sendMessage(playerid,"|  /sellfish  |");
		}
		else if(isPlayerGoldMiner(playerid)){
			sendMessage(playerid,"Your job is to mine gold from the gold mine and sell",1);
			sendMessage(playerid,"them to the people using /sellgold at the current");
			sendMessage(playerid,"gold cost. Todays gold rate can be found using /goldrate.");
			sendMessage(playerid,"|  /sellgold  |");
		}
		else if(isPlayerDrugDealer(playerid)){
			sendMessage(playerid,"Your job is to place drug plants at drug points, and",1);
			sendMessage(playerid,"every minute 5 grams of drugs grow. You can also steal");
			sendMessage(playerid,"away drugs from others plants if you find them.");
			sendMessage(playerid,"|  /plantseed  |  /removeplant  |");
			sendMessage(playerid,"|  /takedrugs |  /selldrugs  |");
			sendMessage(playerid,"|  /plantinfo |");
		}
		else{
			sendMessage(playerid,"You dont have any job yet. There are many jobs in",1);
			sendMessage(playerid,"this big city, just search for them or call a taxi");
			sendMessage(playerid,"and ask him to find you a job for you.");
			sendMessage(playerid,"Hint: do /findajob to know where all you can find a job.");
		}
	}
	else if(strcmp("/goldrate",cmd,true)==0){
	    format(string,256,"Todays gold rate is $%f/cg.",todaysGoldRate());
	    sendMessage(playerid,string,1);
	 //   sendMessage(playerid,"Note: 1g = 0.01cg. g - gram, cg - centigram.");
	}
	else if(strcmp("/givegold",cmd,true)==0){
	    new id,amount;
	    if(sscanf(cmdtext,"sii",cmd,id,amount)==0){
	        if(IsPlayerConnected(id) && (playerid != id)){
	            if((amount > 0) && (getPlayerGold(playerid) > amount)){
	                givePlayerGold(playerid,-amount);
	                givePlayerGold(id,amount);
	                format(string,256,"You received %dcg of gold from %s.",amount,getName(playerid));
	                sendMessage(id,string,1);
	                format(string,256,"You gave %dcg of gold to %s.",amount,getName(id));
	                sendMessage(playerid,string,1);
					format(string,256,"  %s gives some gold to %s.",getName(playerid),getName(id),amount);
					for(new i = 0;i < MAX_PLAYERS;i++){
					    if((i != playerid) && (i != id))
					    if(isPlayerClose(i,playerid)){
					        SendClientMessage(i,COLOR_ME,string);
					    }
					}
	            }
	            else{
	                sendMessage(playerid,"You need to enter a valid amount.",1);
				}
	        }
	        else{
	            sendMessage(playerid,"You need to enter a valid playerid.",1);
	        }
	    }
	    else{
	        sendMessage(playerid,"Usage: /givegold <playerid> <centigrams>",1);
	        sendMessage(playerid,"Ex: /givegold 14 250");
	    }
	}
	else if(strcmp("/o", cmd, true) == 0){
		if(player[playerid][muted]){
		    return sendMessage(playerid,"You were muted, you cant talk unless you are unmuted.");
		}
		if(strlen(cmdtext) > 3){
		    if((noooc == 1) || (isPlayerAdmin(playerid))){
			    new name[23];
			    name = getName(playerid);
				format(string,256,"(( %s[%d]: %s ))",getName(playerid),playerid,cmdtext[3]);
				new oocColor[] ={
					0xB4B5B7FF,
					0xBFC0C2FF,
					0xCBCCCEFF,
					0xD8D8D8FF,
					0xE3E3E3FF,
					0xF0F0F0FF
				};
				SendClientMessageToAll(oocColor[playerid % sizeof(oocColor)],string);
			}
			else{
			    sendMessage(playerid,"OOC has been disabled.",1);
			    sendMessage(playerid,"Use /pm or /b for OOC chat.");
			}
		}
		else{
		    sendMessage(playerid,"Usage: /o <message>",1);
		    sendMessage(playerid,"Ex: /o whats up guys");
		}
	}
	else if(strcmp("/b", cmd, true) == 0){
		if(strlen(cmdtext) > 3){
		    new name[23];
		    name = getName(playerid);
			format(string,256,"( %s[%d]: %s )",getName(playerid),playerid,cmdtext[3]);
			new oocColor[] ={
				0xB4B5B7FF,
				0xBFC0C2FF,
				0xCBCCCEFF,
				0xD8D8D8FF,
				0xE3E3E3FF,
				0xF0F0F0FF
			};

			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(getPlayerDistanceFromPlayer(playerid,i) < 30){
					SendClientMessage(i,oocColor[playerid % sizeof(oocColor)],string);
			    }
			}
		}
		else{
		    sendMessage(playerid,"Usage: /b <message>",1);
		    sendMessage(playerid,"Ex: /b how do i get in?");
		}
	}
	else if(strcmp("/sh", cmd, true) == 0){
		if(strlen(cmdtext) > 4){
		    new name[23];
		    name = getName(playerid);
			format(string,256,"%s shouts: %s!!",getName(playerid),cmdtext[4]);

			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(getPlayerDistanceFromPlayer(playerid,i) < 50){
					SendClientMessage(i,COLOR_WHITE,string);
			    }
			}
		}
		else{
		    sendMessage(playerid,"Usage: /sh <message>",1);
		    sendMessage(playerid,"Ex: /sh get out of my car");
		}
	}
	else if(strcmp("/mg", cmd, true) == 0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        if(IsPlayerInAnyVehicle(playerid) && (isPoliceCar(GetPlayerVehicleID(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid))==469))){
				if(strlen(cmdtext) > 4){
				    new name[23];
				    name = getName(playerid);
					format(string,256,"[Megaphone] Officer %s: %s",getName(playerid),cmdtext[4]);

					for(new i = 0;i < MAX_PLAYERS;i++){
					    if(getPlayerDistanceFromPlayer(playerid,i) < 50){
							SendClientMessage(i,COLOR_WHITE,string);
					    }
					}
				}
				else{
				    sendMessage(playerid,"Usage: /mg <voice>",1);
				    sendMessage(playerid,"Ex: /mg LVPD, stop the car");
				}
			}
			else{
				sendMessage(playerid,"You are not in a cop car.",1);
			}
		}
	}
	else if(strcmp("/wh", cmd, true) == 0){
		if(strlen(cmdtext) > 4){
		    new name[23];
		    name = getName(playerid);
			format(string,256,"%s whispers: %s",getName(playerid),cmdtext[4]);

			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(getPlayerDistanceFromPlayer(playerid,i) < 5){
					SendClientMessage(i,COLOR_WHITE,string);
			    }
			}
		}
		else{
		    sendMessage(playerid,"Usage: /wh <message>",1);
		    sendMessage(playerid,"Ex: /wh lets evade");
		}
	}
	else if(strcmp("/register",cmd,true)==0){
		new password[23];
		if(sscanf(cmdtext,"ss",cmd,password)==0){
		    if(existPlayer(playerid)!=0){
		        return sendMessage(playerid,"Your nick is already registered.",1);
		    }
		    registerPlayer( playerid, password);

		    //givePlayerMoney(playerid,20000);
			sendMessage(playerid,"You have successfully registered with us.",1);
			sendMessage(playerid,"Now type /login to login into your account.");
			tutorial(playerid);
		}
		else{
			sendMessage(playerid,"Usage: /register <password>",1);
			sendMessage(playerid,"Ex: /register 123hello");
		}
	}
	else if(strcmp("/me",cmd,true)==0){
	    new action[256];
	    if(sscanf(cmdtext,"ss",cmd,action)==0){
		    format(string,256,"  %s %s.",getName(playerid),action);
		    SendClientMessage(playerid,COLOR_ME,string);
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i)){
			        if(isPlayerClose(i,playerid)){
			            SendClientMessage(i,COLOR_ME,string);
					}
				}
			}
		}
		else{
		    sendMessage(playerid,"Usage: /me <action>",1);
		    sendMessage(playerid,"Ex: /me smells something bad");
		}
	}
	else if(strcmp("/do",cmd,true)==0){
	    new action[256];
	    if(sscanf(cmdtext,"ss",cmd,action)==0){
		    format(string,256,"  %s. (%s)",action,getName(playerid));
		    SendClientMessage(playerid,COLOR_ME,string);
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i)){
			        if(isPlayerClose(i,playerid)){
			            SendClientMessage(i,COLOR_ME,string);
					}
				}
			}
		}
		else{
		    sendMessage(playerid,"Usage: /do <action>",1);
		    sendMessage(playerid,"Ex: /do success/fail?");
		}
	}

	else if(strcmp(cmd, "/dance", true) == 0) {
  		cmd = strtok(cmdtext, idx);
		if(!strlen(cmd) || strlen(cmd) > 2) {
			sendMessage(playerid,"Usage: /dance [style 1-4]",1);
			sendMessage(playerid,"Ex: /dance 3");
			return 1;
		}

		new dancestyle = strval(cmd);
		if(dancestyle < 1 || dancestyle > 4) {
			sendMessage(playerid,"Usage: /dance [style 1-4]",1);
			sendMessage(playerid,"Ex: /dance 3");
		    return 1;
		}

		if(dancestyle == 1) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		} else if(dancestyle == 2) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		} else if(dancestyle == 3) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		} else if(dancestyle == 4) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		}
  		return 1;
	}
 	else if(strcmp(cmdtext, "/handsup", true) == 0) {
 	    if(tied[playerid]==0){
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		}
        return 1;
    }
    else if (strcmp("/lol", cmdtext, true) == 0) {
          OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
		  return 1;
	}
    else if (strcmp("/crossarms", cmdtext, true) == 0) {
          LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
		  return 1;
	}
    else if (strcmp("/lay", cmdtext, true) == 0) {
          LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
		  return 1;
    }
    else if (strcmp("/hide", cmdtext, true) == 0) {
          LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
		  return 1;
	}
    else if (strcmp("/wave", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
		  return 1;
	}
    else if (strcmp("/smoke", cmdtext, true) == 0) {
          LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Smoke
		  return 1;
	}
    else if (strcmp("/groundsit", cmdtext, true) == 0) {
          LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
		  return 1;
    }
    else if (strcmp("/chairsit", cmdtext, true) == 0) {
          LoopingAnim(playerid, "FOOD", "FF_Sit_Look", 3.1, 1,0,0,0,0);
		  return 1;
    }
    else if(strcmp(cmdtext, "/getlost", true) == 0) {
		 OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
         return 1;
    }
	else if(strcmp("/spawnhere",cmd,true)==0){
		for(new i = 0;i < sizeofmotels;i++){
			if(motelId[i]==player[playerid][LastPickup]){
			    if(getPlayerDistanceFromPoint(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz)) < 5){
				    new name[23];
				    name = getName(playerid);
   				    for(new j = 1;j < sizeof(motel)&& imotels(i,j,houseno);j++){
						format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
						mysql_query2(string);
						mysql_store_result();
						mysql_fetch_row(string);
						mysql_free_result();
						if(strcmp(string,name,true)==0){
						    format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=0 WHERE userid = '%s'",fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz),getName(playerid));
						    mysql_query2(string);
						    mysql_free_result();
						    return GameText(playerid,"Spawn point updated",3000);
						}
					}
				}
			}
		}
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
			    if(GetPlayerInterior(playerid)){
					format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=%d,v=%d WHERE userid = '%s'",houses[i][inx],houses[i][iny],houses[i][inz],houses[i][interior],GetPlayerVirtualWorld(playerid),getName(playerid));
					mysql_query2(string);
					mysql_free_result();
			        return GameText(playerid,"Spawn point updated",3000);
			    }
			}
		}
	}
	else if(strcmp("/myroom",cmd,true)==0){
		for(new i = 0;i < sizeofmotels;i++){
			if(motelId[i]==player[playerid][LastPickup]){
			    if(getPlayerDistanceFromPoint(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz)) < 5){
				    new name[23];
				    name = getName(playerid);
				    for(new j = 1;j < sizeof(motel)&& imotels(i,j,houseno);j++){
						format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
						mysql_query2(string);
						mysql_store_result();
						mysql_fetch_row(string);
						mysql_free_result();
						if(strcmp(string,name,true)==0){
						    SetPlayerCheckpoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz),2);
						    return 1;
						}
					}
				}
			}
		}
		return sendMessage(playerid,"You are not at any motel.");
	}
	else if(strcmp("/unrent",cmd,true)==0){// /unrent remove spawn
		for(new i = 0;i < sizeofmotels;i++){
			if(motelId[i]==player[playerid][LastPickup]){
			    if(getPlayerDistanceFromPoint(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz)) < 5){
				    new name[23];
				    name = getName(playerid);
				    for(new j = 1;j < sizeof(motel)&& imotels(i,j,houseno);j++){
						format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
						mysql_query2(string);
						mysql_store_result();
						mysql_fetch_row(string);
						mysql_free_result();
						if(strcmp(string,name,true)==0){
						    format(string,256,"SELECT * FROM houses WHERE owner = '%s'",name);
						    mysql_query2(string);
						    mysql_store_result();
						    new num = mysql_num_rows();
						    mysql_free_result();
						    if(num == 1){
						        return sendMessage(playerid,"You cannot unrent from here now.",1);
						    }
						    format(string,256,"SELECT houseno FROM houses WHERE owner = '%s'",name);
						    mysql_query2(string);
						    mysql_store_result();
						    new hno = mysql_fetch_int();
						    mysql_free_result();
						    for(new k = 0;k < sizeof(houses);k++){
						        if(houses[k][houseno] == hno){
									format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=%d WHERE userid = '%s'",houses[k][inx],houses[k][iny],houses[k][inz],houses[k][interior],name);
									mysql_query2(string);
									mysql_free_result();
									hno = -1;
						        }
						    }
						    if(hno != -1){
						        for(new m = 0;m < sizeofmotels;m++){
						            for(new n = 1;n < sizeof(motel) && imotels(m,n,houseno);n++){
						                if(imotels(m,n,houseno) == hno){
											format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=0 WHERE userid = '%s'",fmotels(m,n,doorx),fmotels(m,n,doory),fmotels(m,n,doorz),name);
											mysql_query2(string);
											mysql_free_result();
						                }
						            }
						        }
						    }
						    format(string,256,"UPDATE houses SET owner = 'NONE' WHERE houseno = %d",imotels(i,j,houseno));
						    mysql_query2(string);
						    mysql_free_result();
						    sendMessage(playerid,"You have successfully unrent from this room.",1);
							format(string,256,"Your deposit of $%d was returned.",fmotels(i,0,cost));
							return sendMessage(playerid,string);
						}
					}
				}
			}
		}
		return sendMessage(playerid,"You are not at any motel.");
	}

	else if(strcmp("/resign",cmd,true)==0){
	    format(string,256,"SELECT * FROM jobs WHERE current = 1 AND userid = '%s'",getName(playerid));
	    mysql_query2(string);
	    mysql_store_result();
	    new n = mysql_num_rows();
	    mysql_free_result();
	    if(n){
			format(string,256,"SELECT TIMESTAMPDIFF(MINUTE,joined,NOW()) FROM jobs WHERE current = 1 AND userid = '%s'",getName(playerid));
			mysql_query2(string);
			mysql_store_result();
			new pp = mysql_fetch_int();
			mysql_free_result();
			if(pp < 5){
			    sendMessage(playerid,"Your job contract for 5 minutes has not yet completed.",1);
			    format(string,256,"You still have %d minutes to complete your contract.",5-pp);
			    sendMessage(playerid,string);
			}
			else{
                new hid = getHouse( getName(playerid) );
			    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
				    SetPlayerSkin(playerid,1);
				    format(string,256,"UPDATE stats SET skin = 1 WHERE userid = '%s'",getName(playerid));
				    mysql_query2(string);
				}
			    sendMessage(playerid,"You have successfully resigned from your job.",1);
			    format(string,256,"UPDATE jobs SET current = 0 WHERE userid = '%s'",getName(playerid));
			    mysql_query2(string);
       			GameText(playerid,"~r~] playing point",3000);
				new date,month,year;
				getdate(year,month,date);
				format(_str,512,
				"Urban Development Team\n\
				Fabulous Las Venturas\n\
				\n\
				%2d-%2d-%d\n\
				\n\
				%s\n\
				House # %d\n\
				\n\
				Dear %s\n\
				You have successfully resigned from your job.\n\
				Thank you for being a part of us so long. we\n\
				will miss you.\n\
				\n\
				Sincerely,\n\
				\n\
				Urban Development Team",date,month,year,getName(playerid),hid,getName(playerid));
                SendMail( hid ,"Urban Development Team", "Job Resigned", _str);
				dutyPoints[playerid]=0;

			}
	    }
	    else{
			sendMessage(playerid,"You dont have a job to resign.",1);
	    }
	}
	else if(strcmp("/changeskin",cmd,true)==0){
		ForceClassSelection(playerid);
		TogglePlayerSpectating(playerid,0);
		SetPlayerPos(playerid,4.9337,-26.7102,1003.5494);
	    SetPlayerInterior(playerid,1);
	    SetPlayerFacingAngle(playerid,0);
  		StartCameraRot( playerid , 4.9337,-26.7102,1003.5494 , 5);
		return 1;
	}


	else if(strcmp("/checkcondition",cmd,true)==0){
	    if(checking[playerid] == 0){
		    if(isPlayerMechanic(playerid)){
		        new v = GetClosestVehicle(playerid);
		        if(getPlayerDistanceFromVehicle(playerid,v) > 5){
		            return sendMessage(playerid,"You are not close enough.",1);
		        }
				for(new i = 0;i < MAX_PLAYERS;i++){
					if(IsPlayerInVehicle(i,v)){
					    return sendMessage(playerid,"The car should be empty to check it condition.",1);
					}
				}
                freezePlayer(playerid);
				checkVehicle( playerid , v );
		    }
		}
	    return 1;
	}
	else if(strcmp("/bounty",cmd,true)==0){
		if(!isPlayerHitman(playerid)){
		    new id,amount;
			if(sscanf(cmdtext,"sii",cmd,id,amount)==0){
			    if(IsPlayerConnected(id) && id != playerid){
				    if(GetPlayerMoney(playerid) >= amount){
						bounty[playerid][id] += amount;
						format(string,256,"You have added $%d bounty on %s.",amount,getName(id));
						sendMessage(playerid,string,1);
						new total;
						for(new i = 0;i < MAX_PLAYERS;i++){
						    if(IsPlayerConnected(i)){
						        total += bounty[playerid][i];
						    }
						}
						format(string,256,"Your total bounty on %s is $%d.",getName(id),bounty[playerid][id]);
						sendMessage(playerid,string);
						format(string,256,"Your bounties overall is $%d.",total);
						sendMessage(playerid,string);
					}
					else{
						sendMessage(playerid,"You need to enter a valid amount",1);
					}
				}
				else{
					sendMessage(playerid,"You need to enter a valid playerid.",1);
				}
			}
			else{
			    sendMessage(playerid,"Usage: /bounty <onplayerid> <amount>",1);
			    sendMessage(playerid,"Ex: /bounty 3 1000");
			}
		}
		else{
			sendMessage(playerid,"You cannot add bounty, being a Hitman yourself.",1);
		}
	}
	else if(strcmp("/bountylist",cmd,true)==0){
	    if(isPlayerHitman(playerid)){
			format(string,256,"|  %20s  |  %20s  |","Bounty Names", "Bounty Prize");
			sendMessage(playerid,string,1);

	        for(new i = 0;i < MAX_PLAYERS;i++){
				if(IsPlayerConnected(i)){
		            for(new j = 0;j < MAX_PLAYERS;j++){
		                if(IsPlayerConnected(j) && j!= playerid){
		                    if(bounty[i][j] > 0){
								format(string,256,"|  %20s  |  $%20d  |",getName(j),bounty[i][j]);
								sendMessage(playerid,string);
		                    }
		                }
		            }
		        }
	        }
	    }
	}
    else if(strcmp("/placebomb",cmd,true)==0){
        if(checking[playerid] == 0){
		    if(isPlayerHitman(playerid)){
		        if(bomb[playerid] > 0){
			        new v = GetClosestVehicle(playerid);
			        if(getPlayerDistanceFromVehicle(playerid,v) < 5){
						bombPlaced( playerid , v );
						sendMessage(playerid,"Bomb placed ! Will explode in 10 secs.",1);
			        }
					else{
					    sendMessage(playerid,"You are not close enough to any car.",1);
					}
				}
				else{
					sendMessage(playerid,"You dont have any bombs.",1);
				}
		    }
		}
    }
	else if(strcmp("/replace",cmd,true)==0){
	    if(replacing[playerid] == 0){
			cmd = strtok(cmdtext,idx);
			if(isPlayerMechanic(playerid)){
				if(!strlen(cmd) || (strcmp(cmd,"panels",true) && strcmp(cmd,"doors",true) && strcmp(cmd,"lights",true) && strcmp(cmd,"tires",true) )){
					sendMessage(playerid,"Usage: /replace <part = panels,doors,tires,lights,paint>",1);
					return sendMessage(playerid,"Ex: /replace doors");
				}
		        new v = GetClosestVehicle(playerid);
		        if(getPlayerDistanceFromVehicle(playerid,v) > 5){
		            return sendMessage(playerid,"You are not close enough.",1);
		        }
				for(new i = 0;i < MAX_PLAYERS;i++){
					if(IsPlayerInVehicle(i,v)){
					    return sendMessage(playerid,"The car should be empty to check it condition.",1);
					}
				}
				new part = 0;
				new p,l,d,t;
				GetVehicleDamageStatus(v,p,d,l,t);
			    if(strcmp(cmd,"tires",true)==0){
					part = 1;
			    }
			    else if(strcmp(cmd,"panels",true)==0){
					part = 2;
			    }
			    else if(strcmp(cmd,"doors",true)==0){
					part = 3;
			    }
			    else if(strcmp(cmd,"lights",true)==0){
					part = 4;
		    	}
		    	else if(strcmp(cmd,"paint",true)==0){
					cmd = strtok(cmdtext,idx);
		    	    if(!strlen(cmd)){
		    	        sendMessage(playerid,"Usage: /replace paint <color = 0 to 126>",1);
						return sendMessage(playerid,"Ex: /replace paint 56");
					}
					new paint = strval(cmd);
		    	    part = 5+paint;
		    	}
				replacePart(playerid,v,part);
                freezePlayer(playerid);
		    }
		}
	    return 1;
	}

	else if(strcmp("/crimes",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        sendMessage(playerid," ",1);
	        new sstring[200];
			format(string,256,"| %20s | %100s |","Name","Crimes");
			sendMessage(playerid,string);
            for(new i = 0;i < MAX_PLAYERS;i++){
                if(IsPlayerConnected(i)){
					format(string,256,"SELECT reason FROM crimes WHERE userid = '%s'",getName(i));
					mysql_query2(string);
					mysql_store_result();
					if(mysql_num_rows()){
						mysql_fetch_row(sstring);
						format(string,256,"| %20s | %100s |",getName(i),sstring);
						sendMessage(playerid,string);
					}
					mysql_free_result();
                }
            }
	    }
	}
	else if(strcmp("/innocent",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /innocent <id>",1);
			    return sendMessage(playerid,"Ex: /innocent 8");
			}
			new id = strval(cmd);
			if(IsPlayerConnected(id)){
			    format(string,256,"DELETE FROM crimes WHERE userid = '%s'",getName(id));
			    mysql_query2(string);
			    format(string,256,"You have approved %s as an innocent.",getName(id));
				sendMessage(playerid,string,1);
				format(string,256,"You were approved as an innocent by %s.",getName(playerid));
				sendMessage(id,string,1);
				SetPlayerWantedLevel(id,0);
			}
			else{
			    sendMessage(playerid,"You must enter a valid id.",1);
			}
	    }
	}
	else if(strcmp("/firstaid",cmd,true)==0){
	    if(isPlayerMedic(playerid)){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /firstaid <id>",1);
			    return sendMessage(playerid,"Ex: /firstaid 8");
			}
			if(isAmbulance(GetPlayerVehicleID(playerid))){
				new id = strval(cmd);
				if(IsPlayerConnected(id)){
					if(isAmbulance(GetPlayerVehicleID(playerid))){
						heal(playerid);
					}
					else{
                        sendMessage(playerid,"The player is not in the ambulance.",1);
					}
				}
				else{
				    sendMessage(playerid,"You must enter a valid id.",1);
				}
			}
			else{
			    sendMessage(playerid,"You must be in an ambulance.");
			}
	    }
	}

	else if(strcmp("/jail",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
			    sendMessage(playerid,"Usage: /jail <id>",1);
			    return sendMessage(playerid,"Ex: /jail 8");
			}
			new id = strval(cmd);
			if(IsPlayerConnected(id)){
				if(getPlayerDistanceFromPlayer(playerid,id) < 10){
				    if(getPlayerDistanceFromPoint(playerid,198.1349,162.0804,1003.0300)< 20){
					    format(string,256,"You have jailed %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"You were jailed by officer %s.",getName(playerid));
						sendMessage(id,string,1);
						SetPlayerJail(id);
				    }
				    else{
						 sendMessage(playerid,"You are not near the cells.",1);
				    }
				}
				else{
					sendMessage(playerid,"You are not close enough.",1);
				}
			}
			else{
			    sendMessage(playerid,"You must enter a valid id.",1);
			}
	    }
	}
/*	else if(strcmp("/surrender",cmd,true)==0){
	    if(GetPlayerWantedLevel(playerid) > 0){
			surrender(playerid);
	    }
	}
*/	else if(strcmp("/suspect",cmd,true)==0){
		if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
		    new id,reason[256];
			if(sscanf(cmdtext,"sis",cmd,id,reason)==0){
			    if(!(isPlayerPolice(id) && getPlayerJobRank(id) > 1)){
					if(IsPlayerConnected(id) && id != playerid){
						format(string,256,"INSERT INTO crimes VALUES ( '%s' , '%s' )",getName(id),reason);
						mysql_query2(string);
						SetPlayerWantedLevel(id,6);
						format(string,256,"You reported %s for commiting '%s'.",getName(id),reason);
						sendMessage(playerid,string,1);
						format(string,256,"You are a suspect for '%s' reported by %s.",reason,getName(playerid));
						sendMessage(id,string,1);
						for(new i = 0;i < MAX_PLAYERS;i++){
						    if(IsPlayerConnected(i)){
						        if(isPlayerPolice(i) && getPlayerJobRank(i) > 1){
	                                sendMessage(i,"An update has been recieved to your crime database.",1);
						        }
						    }
						}
					}
					else{
						sendMessage(playerid,"You must enter a valid playerid.",1);
					}
			    }
			    else{
	                sendMessage(playerid,"You cannot suspect a cop.",1);
			    }
			}
			else{
			    sendMessage(playerid,"Usage: /suspect <id> <crime>.",1);
			    sendMessage(playerid,"Ex: /suspect 4 Speedo driving");
			}
		}
	}
	else if(strcmp("/listmyhouses",cmd,true)==0){
		format(string,256,"SELECT houseno FROM houses WHERE owner = '%s' AND houseno >= 90000",getName(playerid));
		mysql_query2(string);
		mysql_store_result();
		if(!mysql_num_rows()){
		    return sendMessage(playerid,"You dont own any houses.",1);
		}
		sendMessage(playerid," ",1);
		do{
		    new no = mysql_fetch_int();
			format(string,256,"|  %d  |",no);
			sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}
	else if(strcmp("/listmyrooms",cmd,true)==0){

		format(string,256,"SELECT houseno FROM houses WHERE owner = '%s' AND houseno < 90000",getName(playerid));
		mysql_query2(string);
		mysql_store_result();
		if(!mysql_num_rows()){
		    return sendMessage(playerid,"You dont rent any rooms.",1);
		}
		sendMessage(playerid," ",1);
		do{
		    new no = mysql_fetch_int();
			format(string,256,"|  %d  |",no);
			sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}
	else if(strcmp("/listmyshops",cmd,true)==0){

		format(string,256,"SELECT bizno FROM bizes WHERE owner = '%s' ",getName(playerid));
		mysql_query2(string);
		mysql_store_result();
		if(!mysql_num_rows()){
		    return sendMessage(playerid,"You dont own any shops.",1);
		}
		sendMessage(playerid," ",1);
		do{
		    new no = mysql_fetch_int();
			format(string,256,"|  %d  |",no);
			sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}
	else if(strcmp("/listmycars",cmd,true)==0){
		format(string,256,"SELECT model,parking FROM cars WHERE owner = '%s'",getName(playerid));
		mysql_query2(string);
		mysql_store_result();
		if(!mysql_num_rows()){
		    return sendMessage(playerid,"You dont own any car.",1);
		}
		format(string,256,"|  %20s  |  %10s  |","Car Names","Parkings");
		sendMessage(playerid,string,1);
		do{
			mysql_fetch_field("model",string);
		    new no = strval(string);
			mysql_fetch_field("parking",string);
		    new parkg = strval(string);
			format(string,256,"|  %20s  |  %10d  |",VehicleNames[no-400],parkg+6000);
			sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}

/*	else if(strcmp("/sellhouse",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		new hno,id;
		if(sscanf(cmdtext,"sii",cmd,hno,id)){
		    sendMessage(playerid,"Usage: /sellhouse <house#> <id>",1);
		    sendMessage(playerid,"Ex: /sellhouse 90007 4");
		    return sendMessage(playerid,"Hint: Collect the money before you sell.");
		}
		format(string,256,"SELECT * FROM houses WHERE owner = '%s' AND houseno = %d",getName(playerid),hno);
		mysql_query2(string);
		mysql_store_result();
		new num = mysql_num_rows();
		mysql_free_result();
		if((num) && (hno > 90000)){
			if(IsPlayerConnected(id) && id!=playerid){
			    format(string,256,"UPDATE houses SET owner = '%s' AND houseno = %d",getName(id),hno);
			    mysql_query2(string);
				format(string,256,"%s has sold house# %d to you. Now you own the house!",getName(playerid),hno);
				sendMessage(id,string,1);
				format(string,256,"You have sold house# %d to %s",hno,getName(id));
				sendMessage(playerid,string,1);
				sendMessage(playerid,"Makesure you change your spawn position from this house.");
				sendMessage(playerid,"And also makesure your car is not parked at this house.");
				new Float:x,Float:y,Float:z,Float:r;
				new p = random(sizeof(spawnPositions));
				x = spawnPositions[p][0];
				y = spawnPositions[p][1];
				z = spawnPositions[p][2];
				r = spawnPositions[p][3];
			    format(string,256,"UPDATE spawns SET  x = %f,y = %f ,z = %f ,r = %f, i = 0 , v = 0 WHERE userid = '%s'",x,y,z,r,getName(playerid));
				mysql_query2(string);
			}
			else{
				sendMessage(playerid,"You must enter a valid playerid.",1);
			}
		}
		else{
		    sendMessage(playerid,"You dont own any such house.",1);
		}
	}
	else if(strcmp("/sellshop",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		new hno,id;
		if(sscanf(cmdtext,"sii",cmd,hno,id)){
		    sendMessage(playerid,"Usage: /sellshop <shop#> <id>",1);
		    sendMessage(playerid,"Ex: /sellshop 70023 4");
		    return sendMessage(playerid,"Hint: Collect the money before you sell.");
		}
		format(string,256,"SELECT * FROM bizes WHERE owner = '%s' AND bizno = %d",getName(playerid),hno);
		mysql_query2(string);
		mysql_store_result();
		new num = mysql_num_rows();
		mysql_free_result();
		if((num) && (hno > 70000)){
			if(IsPlayerConnected(id) && id!=playerid){
			    format(string,256,"UPDATE bizes SET owner = '%s' AND bizno = %d",getName(id),hno);
			    mysql_query2(string);
				format(string,256,"%s has sold shop# %d to you. Now you own the shop!",getName(playerid),hno);
				sendMessage(id,string,1);
				format(string,256,"You have sold shop# %d to %s",hno,getName(id));
				sendMessage(playerid,string,1);
				sendMessage(playerid,"Makesure you have pocket all the collections.");
			}
			else{
				sendMessage(playerid,"You must enter a valid playerid.",1);
			}
		}
		else{
		    sendMessage(playerid,"You dont own any such shop.",1);
		}
	}

*/	else if(strcmp("/call",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd)){
			sendMessage(playerid,"Usage: /call <number>",1);
			sendMessage(playerid,"Hint: Police: 911, Medic: 912, Taxi: 913, Telephone Exchange: 914.",1);
			return sendMessage(playerid,"Ex: /call 3236");
		}
		new number = strval(cmd);

		if(player[playerid][onphone] == 1){
		    return sendMessage(playerid,"You cant make a call now.",1);
		}
		else if(ringing[playerid] != -1){

		}
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(IsPlayerConnected(i)){
		        if(onPhone[i] == playerid){
                    return sendMessage(playerid,"You cant make a call now.",1);
		        }
		    }
		}
		format(string,256,"%s takes out his phone.",getName(playerid));
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(isPlayerClose(playerid,i) && i != playerid){
				SendClientMessage(i,COLOR_ME,string);
		    }
		}
		if(number == 911){
			format(string,256,"Your trying to call the police.");
		    sendMessage(playerid,string,1);
		    format(string,256,"Waiting for any police officer to accept your call.");
		    sendMessage(playerid,string);
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i) && (playerid != i) ){// && (playerid != i)
			        if(isPlayerPolice(i) && getPlayerJobRank(i) > 1){
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					    player[playerid][onphone] = 1;
					    ringing[i] = playerid;

 					    format(string,256,"%s(%d) is trying to call the police.",getName(playerid),getPhone(playerid));
 					    sendMessage(i,string,1);
 					    sendMessage(i,"To accept the call type /acceptcall.");
 					    format(string,256,"%s's phone is ringing.",getName(i));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(i,j) && i != j){
								SendClientMessage(j,COLOR_ME,string);
						    }
						}
			        }
			    }
			}
			return 1;
		}
		else if(number == 912){
			format(string,256,"Your trying to call the medics.");
		    sendMessage(playerid,string,1);
		    format(string,256,"Waiting for any medics to accept your call.");
		    sendMessage(playerid,string);
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i) && (playerid != i) ){// && (playerid != i)
			        if(isPlayerMedic(i)){
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					    player[playerid][onphone] = 1;
					    ringing[i] = playerid;
 					    format(string,256,"%s(%d) is trying to call the medics.",getName(playerid),getPhone(playerid));
 					    sendMessage(i,string,1);
 					    sendMessage(i,"To accept the call type /acceptcall.");
 					    format(string,256,"%s's phone is ringing.",getName(i));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(i,j) && i != j){
								SendClientMessage(j,COLOR_ME,string);
						    }
						}
			        }
			    }
			}
			return 1;
		}
		else if(number == 913){
			format(string,256,"Your trying to call the taxi service.");
		    sendMessage(playerid,string,1);
		    format(string,256,"Waiting for any taxi driver to accept your call.");
		    sendMessage(playerid,string);
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i) && (playerid != i) ){// && (playerid != i)
			        if(isPlayerTaxiDriver(i)){
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					    player[playerid][onphone] = 1;
					    ringing[i] = playerid;
 					    format(string,256,"%s(%d) is trying to call the taxi service.",getName(playerid),getPhone(playerid));
 					    sendMessage(i,string,1);
 					    sendMessage(i,"To accept the call type /acceptcall.");
 					    format(string,256,"%s's phone is ringing.",getName(i));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(i,j) && i != j){
								SendClientMessage(j,COLOR_ME,string);
						    }
						}
			        }
			    }
			}
			return 1;
		}
		else if(number == 914){
			format(string,256,"The number you have called can only receive sms's.");
		    sendMessage(playerid,string,1);
		    return 1;
		}
		else{
	        format(string,256,"SELECT userid FROM phone WHERE number = %d",number);
	        mysql_query2(string);
	        mysql_store_result();
	        new name[23];
	        mysql_fetch_row(name);
	        mysql_free_result();

			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i) && (playerid != i) ){// && (playerid != i)
			        if(strcmp(getName(i),name,true)==0){
						if(player[i][onphone] == 1){

						    sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else if(ringing[i] != -1){
							sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else if(onPhone[i] != -1){
							sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else{
							for(new j = 0;j < MAX_PLAYERS;j++){
							    if(IsPlayerConnected(j)){
							        if(onPhone[j] == i){
							        	return sendMessage(playerid,"The number your trying to reach is buzy.",1);
							        }
							    }
							}
						    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						    player[playerid][onphone] = 1;
						    ringing[i] = playerid;
							format(string,256,"Your trying to call %s",getName(i));
	 					    sendMessage(playerid,string,1);
	 					    format(string,256,"Waiting for %s to accept your call.",getName(i));
	 					    sendMessage(playerid,string);
	 					    format(string,256,"%s(%d) is trying to call you.",getName(playerid),getPhone(playerid));
	 					    sendMessage(i,string,1);
	 					    sendMessage(i,"To accept the call type /acceptcall.");
	 					    format(string,256,"%s's phone is ringing.",getName(i));
							for(new j = 0;j < MAX_PLAYERS;j++){
							    if(isPlayerClose(i,j) && i != j){
									SendClientMessage(j,COLOR_ME,string);
							    }
							}
						}
			            return 1;
			        }
			    }
			}
		}
		sendMessage(playerid,"The number you are trying to call is out of reach.",1);
	}
	else if(strcmp("/acceptcall",cmd,true)==0){
	    if(ringing[playerid] != -1){

			format(string,256,"%s takes out his phone.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(playerid,i) && i != playerid){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			player[playerid][onphone] = 1;
			onPhone[playerid] = ringing[playerid];
			ringing[playerid] = -1;
			format(string,256,"%s has accepted the call.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
			        if(ringing[i] == onPhone[playerid]){
			            ringing[i] = -1;
						sendMessage(i,string,1);
			        }
			    }
			}
			sendMessage(playerid,"You have accepted the call.",1);
			sendMessage(onPhone[playerid],"Your call was accepted.",1);
	    }
	}
	else if(strcmp("/hold",cmd,true)==0){
		if(player[playerid][onphone] == 1){
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			player[playerid][onphone] = 0;
			format(string,256,"%s keeps the phone in his pocket.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(playerid,i) && i != playerid){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
		}
	}
	else if(strcmp("/unhold",cmd,true)==0){
		if(onPhone[playerid] != -1){
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			player[playerid][onphone] = 1;
		}
		else{
		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(IsPlayerConnected(i)){
		            if(onPhone[i] == playerid){
		            	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		            	player[playerid][onphone] = 1;
						format(string,256,"%s takes out his phone.",getName(playerid));
						for(i = 0;i < MAX_PLAYERS;i++){
						    if(isPlayerClose(playerid,i) && i != playerid){
								SendClientMessage(i,COLOR_ME,string);
						    }
						}
		            	break;
		            }
		        }
		    }
		}
	}
	else if(strcmp("/r",cmd,true)==0){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	        new message[200];
	        if(sscanf(cmdtext,"ss",cmd,message)==0){
	            new name[23];
	            name = getName(playerid);
	            new rankname[10];
				new rank = getPlayerJobRank(playerid);
				for(new i = 0;i< rank;i++){
				    strins(rankname,"*",0);
				}
	            format(string,256,"%s %s: %s, over.",rankname,name,message);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(IsPlayerConnected(i)){
				        if(isPlayerPolice(i) && getPlayerJobRank(i) > 1){
							SendClientMessage(i,COLOR_MSG,string);
						}
					}
				}
	        }
	        else{
	            sendMessage(playerid,"Usage: /r <message>.",1);
	            return sendMessage(playerid,"Ex: /r I caught him");
	        }
	    }
	    if(isPlayerPilot(playerid)){
	        new message[200];
	        if(sscanf(cmdtext,"ss",cmd,message)==0){
	            new name[23];
	            name = getName(playerid);
	            format(string,256," %s: %s, over.",name,message);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(IsPlayerConnected(i)){
				        if(isPlayerPilot(i)){
							SendClientMessage(i,COLOR_MSG,string);
						}
					}
				}
	        }
	        else{
	            sendMessage(playerid,"Usage: /r <message>.",1);
	            return sendMessage(playerid,"Ex: /r let me land first");
	        }
	    }
	}
	else if(strcmp("/sms2all",cmd,true)==0){
	    new adv[200];
	    if(sscanf(cmdtext,"ss",cmd,adv)==0){
	        if(strlen(adv) < 200){
		        new price = 300;
	            if(strlen(adv) > 10){
		        	price = (25 * (strlen(adv)-10)) + 300;
		        }
				new ct = 0;
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(IsPlayerConnected(i)){
				        if(!IsPlayerNPC(i)){
							ct++;
				        }
				    }
				}
				price += ((ct / 10) * 100);
		        if(getPlayerMoney(playerid) >= price){
		            givePlayerMoney(playerid,-price);
		            new phone = getPhone(playerid);
					format(string,256,"New message: %s",adv);
					for(new i = 0;i < MAX_PLAYERS;i++){
					    if(IsPlayerConnected(i)){
					        if(!IsPlayerNPC(i)){
						        sendMessage(i,string,1);
						    }
					    }
					}

					format(string,256,"From: %s Phone: %d Via: sms2all",getName(playerid),phone);
					for(new i = 0;i < MAX_PLAYERS;i++){
					    if(IsPlayerConnected(i)){
					        if(!IsPlayerNPC(i)){
						        sendMessage(i,string);
						    }
					    }
					}
					format(string,256,"Message Cost: $%d Characters: %d Sent: %d",price,strlen(adv),ct);
					sendMessage(playerid,string,1);
		        }
		        else{
		            sendMessage(playerid,"You dont have enough money.");
		        }
	        }
	    }
	    else{
	        sendMessage(playerid,"Usage: /sms2all <advert>.",1);
	        sendMessage(playerid,"Ex: /sms2all Selling fishes in wholesale.");
	        sendMessage(playerid,"Note: You will be charged $300 for 10");
	        sendMessage(playerid,"characters and after that $25/char.");
	        sendMessage(playerid,"If there are more than 10 people than,");
	        sendMessage(playerid,"will be charged $100 more for every 10.");
	    }
	}
	else if(strcmp("/sms",cmd,true)==0){
	    new number,message[200];
		if(sscanf(cmdtext,"sis",cmd,number,message)!=0){
			sendMessage(playerid,"Usage: /sms <number> <message>",1);
			return sendMessage(playerid,"Ex: /sms 3236 Hey, where are you");
		}
		if(number == 914){
	        format(string,256,"SELECT number FROM phone WHERE userid = '%s'",message);
	        mysql_query2(string);
	        mysql_store_result();
	        number = mysql_fetch_int();
	        mysql_free_result();
	        if(number == -1){
	            format(message,200,"New message: Sms us with the <username> whos phone# you want to find.");
	            sendMessage(playerid,message,1);
	            sendMessage(playerid,"From:  Telephone Exchange Phone: 914.");
	            return 1;
	        }
            format(string,256,"Message delivered: %s",message);
            sendMessage(playerid,string,1);
            sendMessage(playerid,"To: Telephone Exchange Phone: 914.");
            format(string,175,"Search results are Name: %s Phone: %d.",message,number);
            format(message,200,"New message: %s",string);
            sendMessage(playerid,message);
            sendMessage(playerid,"From:  Telephone Exchange Phone: 914.");
		    return 1;
		}
        format(string,256,"SELECT userid FROM phone WHERE number = %d",number);
        mysql_query2(string);
        mysql_store_result();
        new name[23];
        mysql_fetch_row(name);
        mysql_free_result();
        if(strlen(name)){
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
			        if(strcmp(getName(i),name,true)==0){
			            format(string,256,"Message delivered: %s",message);
			            sendMessage(playerid,string,1);
			            format(string,256,"To: %s Phone: %d.",getName(i),getPhone(i));
			            sendMessage(playerid,string);
			            format(string,256,"New message: %s",message);
			            sendMessage(i,string,1);
			            format(string,256,"From: %s Phone: %d.",getName(playerid),getPhone(playerid));
			            sendMessage(i,string);
			            return 1;
			        }
			    }
			}
		}
		sendMessage(playerid,"The number you are trying to call is out of reach.",1);
	}
	else if(strcmp("/conference",cmd,true)==0){

	    if(onPhone[playerid] == -1){
			cmd = strtok(cmdtext,idx);
			if(!strlen(cmd)){
				sendMessage(playerid,"Usage: /conference <number>",1);
				return sendMessage(playerid,"Ex: /conference 3236");
			}
			new ok = 0;
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
					if(onPhone[i] ==playerid){
					    ok = 1;
					}
			    }
			}
			if(ok == 0){
			    return sendMessage(playerid,"You are not on a call to make a conference call.",1);
			}
			else if(IsPlayerInAnyVehicle(playerid)){
			    return sendMessage(playerid,"You cant make a call now.",1);
			}
			else if(player[playerid][onphone] == 1){
			    return sendMessage(playerid,"You cant make a call now.",1);
			}
			else if(ringing[playerid] != -1){
				return sendMessage(playerid,"You cant make a call now.",1);
			}
			new number = strval(cmd);
	        format(string,256,"SELECT userid FROM phone WHERE number = %d",number);
	        mysql_query2(string);
	        mysql_store_result();
	        new name[23];
	        mysql_fetch_row(name);
	        mysql_free_result();
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i) && (playerid != i)){
			        if(strcmp(getName(i),name,true)==0){

						if(player[i][onphone] == 1){
						    sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else if(ringing[i] != -1){
							sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else if(onPhone[i] != -1){
							sendMessage(playerid,"The number your trying to reach is buzy.",1);
						}
						else{
						    ringing[i] = playerid;
							format(string,256,"Your trying to call %s",getName(i));
	 					    sendMessage(playerid,string,1);
	 					    format(string,256,"Waiting for %s to accept your call.",getName(i));
	 					    sendMessage(playerid,string);
	 					    format(string,256,"%s(%d) is trying to call you.",getName(playerid),getPhone(playerid));
	 					    sendMessage(i,string,1);
	 					    sendMessage(i,"To accept the call type /accept.");

	 					    format(string,256,"%s's phone is ringing.",getName(i));
							for(new j = 0;j < MAX_PLAYERS;j++){
							    if(isPlayerClose(i,j) && j != i){
									SendClientMessage(j,COLOR_ME,string);
							    }
							}						}
			            return 1;
			        }
			    }
			}
			sendMessage(playerid,"The number you are trying to call is out of reach.",1);
		}
		else{
			sendMessage(playerid,"You cant start the conference call.");
		}
	}
	else if(strcmp("/hang",cmd,true)==0){
	    if(ringing[playerid] != -1){
			sendMessage(playerid,"You have rejected the call.",1);
			sendMessage(ringing[playerid],"Your call was rejected.",1);
			SetPlayerSpecialAction(ringing[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
			player[ringing[playerid]][onphone] = 0;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			player[playerid][onphone] = 0;
			format(string,256,"%s keeps the phone in his pocket.",getName(playerid));

			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(playerid,i) && i != playerid){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
			format(string,256,"%s keeps the phone in his pocket.",getName(ringing[playerid]));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(ringing[playerid],i) && i != ringing[playerid]){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
			ringing[playerid] = -1;
	    }
	    else if(onPhone[playerid] != -1){
			sendMessage(playerid,"You have hanged the call.",1);
			sendMessage(onPhone[playerid],"Your call was hanged.",1);
			SetPlayerSpecialAction(onPhone[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
			player[onPhone[playerid]][onphone] = 0;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			player[playerid][onphone] = 0;
			format(string,256,"%s keeps the phone in his pocket.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(playerid,i) && i != playerid){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
			format(string,256,"%s keeps the phone in his pocket.",getName(onPhone[playerid]));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(onPhone[playerid],i) && i != onPhone[playerid]){
					SendClientMessage(i,COLOR_ME,string);
			    }
			}
			onPhone[playerid] = -1;
	    }
	    else{
	        new k = 0;
			for(new i =0;i < MAX_PLAYERS;i++){
				if(IsPlayerConnected(i)){
				    if(ringing[i] == playerid){
						sendMessage(playerid,"You have hanged the call.",1);
						sendMessage(i,"Your call was hanged.",1);
						ringing[i] = -1;
				    }
				    if((onPhone[i] == playerid) || (onPhone[playerid] == i)){
						if(k == 0){
							k = 1;
							sendMessage(playerid,"You have hanged the call.",1);
							SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
							player[playerid][onphone] = 0;
							format(string,256,"%s keeps the phone in his pocket.",getName(playerid));
							for(new j = 0;j < MAX_PLAYERS;j++){
							    if(isPlayerClose(playerid,j) && j != playerid){
									SendClientMessage(j,COLOR_ME,string);
							    }
							}
						}
						sendMessage(i,"Your call was hanged.",1);
						SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
						player[i][onphone] = 0;
						format(string,256,"%s keeps the phone in his pocket.",getName(onPhone[playerid]));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(onPhone[j],i) && i != onPhone[j]){
								SendClientMessage(j,COLOR_ME,string);
						    }
						}
						onPhone[i] = -1;
				    }
				}
			}
	    }
	    if(GetPlayerSpecialAction(playerid)== SPECIAL_ACTION_USECELLPHONE){
	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
            player[playerid][onphone] = 0;
	    }
	}
	else if(strcmp("/transferfuel",cmd,true)==0){
	    cmd = strtok(cmdtext,idx);
	    new id,amount;
		if(sscanf(cmdtext,"sii",cmd,id,amount)!=0){
		    sendMessage(playerid,"Usage: /transferfuel <playerid> <litres>",1);
		    return sendMessage(playerid,"Ex: /transferfuel 3 10",1);
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    return sendMessage(playerid,"You are not in a car.",1);
		}
		if(!IsPlayerInAnyVehicle(id)){
		    return sendMessage(playerid,"The player must also be in a car.",1);
		}
		new v1 = GetPlayerVehicleID(playerid);
		new v2 = GetPlayerVehicleID(id);
		if(v1 == v2){
		    return 1; // 1|8
		}
		if(amount <= 0){
		    return sendMessage(playerid,"Enter a valid amount of fuel to transfer.",1);
		}
		if(isPlayerClose(playerid,id)){
			if(fuel[v1] >= amount){
			    fuel[v1] -= amount;
			    new fuelbefore = fuel[v2];
			    fuel[v2] += amount;
				fuel[v1] = clamp(fuel[v1],0,getVehicleFuelCapacity(v1));
				fuel[v2] = clamp(fuel[v2],0,getVehicleFuelCapacity(v2));
				amount = fuel[v2] - fuelbefore;
				format(string,256,"%s transfers %dl of fuel into your car.",getName(playerid),amount);
				sendMessage(id,string,1);
				format(string,256,"You transfered %dl of fuel into %s's car.",amount,getName(id));
				sendMessage(playerid,string,1);
				format(string,256,"%s transfers some fuel into %s's car.",getName(playerid),getName(id));
				for(new i =0;i < MAX_PLAYERS;i++){
					if(isPlayerClose(playerid,i) && (i != id)){
						SendClientMessage(i,COLOR_ME,string); // 1|8
					}
				}
			}
			else{
			    sendMessage(playerid,"You dont have that much fuel in your car.",1);
			}
		}
		else{
			return sendMessage(playerid,"You are not close enough.",1);
		}
	}
	else if(strcmp("/fillfuel",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd)){
		    sendMessage(playerid,"Usage: /fillfuel <litres>",1);
		    sendMessage(playerid,"Ex: /fillfuel 50",1);
		    return sendMessage(playerid,"Note: Fuel costs $2/litre.");
		}
		new amount = strval(cmd);
		if(!fueling[playerid]){
			if(IsPlayerInAnyVehicle(playerid)){
			    if(IsAtGasStation(playerid)){
			        new v = GetPlayerVehicleID(playerid);
					if(amount>0){
	 				    new charge = 2*amount;
					    new cash = getPlayerMoney(playerid);
					    if(amount+fuel[v] > getVehicleFuelCapacity(v)){
					        amount = getVehicleFuelCapacity(v)-fuel[v];
					        charge = amount * 2;
					    }
					    if(charge > cash){
							charge = cash;
							amount = charge/2;
					    }
						sendMessage(playerid,"Please wait while your vehicle is being refueled.",1);
						fuelCar( playerid , charge , amount , 0);
					}
					else{
						sendMessage(playerid,"Enter a valid value for litres.",1);
					}
			    }
			    else{
			        sendMessage(playerid,"You are not at a petrol bunk.",1);
			    }
			}
			else{
			    sendMessage(playerid,"You are not in a car.",1);
			}
		}
		else{
			sendMessage(playerid,"Please wait while your vehicle is being refueled.",1);
		}
	}
/*	else if(strcmp("/jog",cmd,true)==0){
	    if(getPlayerDistanceFromPoint(playerid,775.0074,-69.2188,1000.6541)<60){
                  freezePlayer(playerid);
		    gym[playerid] = 1;
		    SetPlayerPos(playerid,758.3637,-63.5939,1000.653);
		    SetPlayerFacingAngle(playerid,181.1083);
		    SetPlayerCameraPos(playerid,758.3637,-63.5939-4,1000.653-0.3);
		    SetPlayerCameraLookAt(playerid,758.3637,-63.5939,1000.653);
		    ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",5,1,0,0,1,0);
		}
		else{
		    sendMessage(playerid,"You are not inside gym.",1);
		}
	}
	else if(strcmp("/pedal",cmd,true)==0){
	    if(getPlayerDistanceFromPoint(playerid,775.0074,-69.2188,1000.6541)<60){
                  freezePlayer(playerid);
		    gym[playerid] = 2;
		    SetPlayerPos(playerid,775.0074,-69.2189,1000.6541);
		    SetPlayerFacingAngle(playerid,87.1076);
		    SetPlayerCameraPos(playerid,775.0074+2,-69.2188,1000.6541+2);
		    SetPlayerCameraLookAt(playerid,775.0074,-69.2188,1000.6541);
		    ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",5,0,0,0,1,0);
		}
		else{
			sendMessage(playerid,"You are not inside gym.",1);
		}
	}
	else if(strcmp("/box",cmd,true)==0){
	    if(getPlayerDistanceFromPoint(playerid,775.0074,-69.2188,1000.6541)<60){
		    gym[playerid] = 3;
		    SetPlayerPos(playerid,771.8531,-61.9309,1000.5781);
		    SetPlayerFacingAngle(playerid,285.0892);
		    SetPlayerCameraPos(playerid,776.2925,-58.1337,1000.7184+4);
		    SetPlayerCameraLookAt(playerid,773.2988,-63.2749,1000.6622);
			SetPlayerFightingStyle(playerid,5);
		}
		else{
		    sendMessage(playerid,"You are not inside gym.",1);
		}
	}
*/	else if(strcmp("/getoff",cmd,true)==0){
	    if(gym[playerid] != 0){
			KillTimer(gymCheck[playerid]);
			if(gym[playerid] == 1){
				ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",1,0,0,0,0,0);
			}
			else if(gym[playerid] == 2){
				ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",1,0,0,0,0,0);
			}
			else if(gym[playerid] == 3){
				ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",1,0,0,0,0,0);
			}
			new style[6] = { 4,5,6,7,15,16};
			for(new j = 0;j < sizeof(skins);j++){
			    if(GetPlayerSkin(playerid) == skins[j]){
			        SetPlayerFightingStyle(playerid,style[j % 6]);
			    }
			}
			gym[playerid] = 0;
		    TogglePlayerControllable(playerid,1);
		    SetCameraBehindPlayer(playerid);
		}
	}
	else if(strcmp("/pos",cmd,true)==0){

	    new Float:x,Float:y,Float:z;
		sscanf(cmdtext,"sfff",cmd,x,y,z);
	    SetPlayerPos(playerid,x,y,z);
	}
/*	else if(strcmp("/hunger",cmd,true)==0){
		if(isPlayerAdmin(playerid)){
		    new i,j;
			sscanf(cmdtext,"sii",cmd,i,j);
//			hunger[i] = j;
//			format(string,256,"%s hunger is %f.",getName(i),hunger[i]);
			sendMessage(playerid,string,1);
		}
	}
	else if(strcmp("/checkhunger",cmd,true)==0){
		if(isPlayerAdmin(playerid)){
			format(string,256,"%s hunger is %f.",getName(playerid),hunger[playerid]);
			sendMessage(playerid,string,1);
		}
	}
*/
	else if(strcmp("/thanksto",cmd,true)==0){
		format(string,256,"| %20s | %30s | %3s |","Name","Country","Donation");
		sendMessage(playerid,string,1);
		mysql_query2("SELECT userid,country,amount FROM donations");
		mysql_store_result();
		if(mysql_num_rows()){
		    do{
		        new name[23],country[30],amount[10];
		        mysql_fetch_field("userid",name);
		        mysql_fetch_field("country",country);
		        mysql_fetch_field("amount",amount);
		        if(strval(amount) > 0){
			        format(string,256,"| %20s | %30s | $%3d |",name,country,strval(amount));
			        sendMessage(playerid,string);
				}
		    }
		    while(mysql_fetch_row_data());
		}
	    mysql_free_result();
	}
/*	else if(strcmp("/ihavebadconnection",cmd,true)==0){
		activateIHaveBadConnection(playerid);
	}
*/	else if(strcmp("/invisible",cmd,true)==0){
	    if(isAdminLevel(playerid,3)){
			if(isInvisible[playerid] == 0){
				isInvisible[playerid] = 1;
				sendMessage(playerid,"You have activated invisible mode.",1);
			}
			else{
				isInvisible[playerid] = 0;
				sendMessage(playerid,"You have deactivated invisible mode.",1);
			}
		}
	}
	else if(strcmp("/myreferrer",cmd,true)==0){
	    cmd = strtok(cmdtext,idx);
	    if(!strlen(cmd)){
	    	sendMessage(playerid,"Usage: /myreferrer <name>.",1);
	    	return sendMessage(playerid,"Ex: /myreferrer Kapil_Sriram.");
	    }
	    if(strcmp(cmd,getName(playerid),true)==0){
			return sendMessage(playerid,"You cant refer yourself.");
	    }
		format(string,256,"SELECT userid FROM register WHERE userid= '%s'",cmd);
		mysql_query2(string);
		mysql_store_result();
		new num = mysql_num_rows();
		mysql_free_result();
	    if(num){
			format(string,256,"INSERT INTO referrers ( userid , referrer ) VALUES ( '%s' , '%s' )",getName(playerid),cmd);
			mysql_query2(string);
			sendMessage(playerid,"Your referrer has been added to the database.",1);
	    }
	    else{
	    	sendMessage(playerid,"You must enter a valid referrer name.",1);
	    }
	}

	else if(strcmp("/promote",cmd,true)==0){
	    if(isPlayerPolice(playerid)){
	        new Rank = getPlayerJobRank(playerid);
	        if(Rank >= 10){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /promote <id>",1);
				    sendMessage(playerid,"Ex: /promote 6");
				}
				else{
				    new id = strval(cmd);
				    if(IsPlayerConnected(id)){
				        if(isPlayerPolice(id)){
				            new iRank = getPlayerJobRank(id);
				            if((iRank < 6) || ((iRank < 11)&& (iRank > 6)&&(Rank >= 11))){
				                setPlayerJobRank(id,iRank+1);
				                format(string,256,"$a has promoted you to '%s' by %s",getName(playerid),copRank[iRank+1]);
				                sendMessage(id,string,1);
				                format(string,256,"You have promoted %s to '%s'",getName(id),copRank[iRank+1]);
				                sendMessage(playerid,string,1);
				            }
				            else{
						         sendMessage(playerid,"The player high ranked only DGP can promote them.",1);
				            }
				        }
				        else{
				            sendMessage(playerid,"The player you are trying to promote is not police.",1);
				        }
				    }
				    else{
				        sendMessage(playerid,"You must enter a valid playerid.",1);
				    }
				}
	        }
	    }
	}
	else if(strcmp("/suspend",cmd,true)==0){
	    if(isPlayerPolice(playerid)){
	        new Rank = getPlayerJobRank(playerid);
	        if(Rank >= 10){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /suspend <id>",1);
				    sendMessage(playerid,"Ex: /suspend 6");
				}
				else{
				    new id = strval(cmd);
				    if(IsPlayerConnected(id)){
				        if(isPlayerPolice(id)){
				            new iRank = getPlayerJobRank(id);
				            if(iRank < 0){
				                return sendMessage(playerid,"The player you are trying to suspend is not police.",1);
				            }
				            if((iRank < 7) || ((iRank < 11)&& (iRank > 7)&&(Rank >= 11))){
				                setPlayerJobRank(id,0);
				                format(string,256,"%s has suspended you from police.",getName(playerid));
				                sendMessage(id,string,1);
				                format(string,256,"You have suspended %s.",getName(id));
				                sendMessage(playerid,string,1);
				            }
				            else{
						         sendMessage(playerid,"The player is high ranked only DGP can suspend them.",1);
				            }
				        }
				        else{
				            sendMessage(playerid,"The player you are trying to suspend is not police.",1);
				        }
				    }
				    else{
				        sendMessage(playerid,"You must enter a valid playerid.",1);
				    }
				}
	        }
	    }
	}
	else if(strcmp("/demote",cmd,true)==0){
	    if(isPlayerPolice(playerid)){
	        new Rank = getPlayerJobRank(playerid);
	        if(Rank >= 10){
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
				    sendMessage(playerid,"Usage: /demote <id>",1);
				    sendMessage(playerid,"Ex: /demote 6");
				}
				else{
				    new id = strval(cmd);
				    if(IsPlayerConnected(id)){
				        if(isPlayerPolice(id)){
				            new iRank = getPlayerJobRank(id);
				            if(iRank < 0){
				                return sendMessage(playerid,"The player you are trying to demote is not police.",1);
				            }
				            if((iRank < 7) || ((iRank < 11)&& (iRank > 7)&&(Rank >= 11))){
				                setPlayerJobRank(id,iRank-1);
				                format(string,256,"%s has demoted you to '%s'",getName(playerid),copRank[iRank-1]);
				                sendMessage(id,string,1);
				                format(string,256,"You have demoted %s to '%s'",getName(id),copRank[iRank-1]);
				                sendMessage(playerid,string,1);
				            }
				            else{
						         sendMessage(playerid,"The player is high ranked only DGP can demote them.",1);
				            }
				        }
				        else{
				            sendMessage(playerid,"The player you are trying to demote is not police.",1);
				        }
				    }
				    else{
				        sendMessage(playerid,"You must enter a valid playerid.",1);
				    }
				}
	        }
	    }
	}
	else if(strcmp("/cb",cmd,true)==0){
		if(IsPlayerInAnyVehicle(playerid)){
		    if(player[playerid][cb]){
		        new text[256];
		    	if(sscanf(cmdtext,"ss",cmd,text)==0){
					new name[23];
					name = getName(playerid);
					format(string,256,"%s)) %s",name,text);
				    for(new i =0;i < MAX_PLAYERS;i++){
				        if(IsPlayerConnected(i)){
						    if(player[playerid][cb]){
						        if(player[playerid][onphone] == 1){
									SendClientMessage(i,COLOR_CBRADIO,string);
//									addBrief(i,);
						        }
						    }
						}
				    }
					SendClientMessage(playerid,COLOR_CBRADIO,string);
//					addBrief(playerid,string);

		    	}
		    	else{
				     sendMessage(playerid,"Usage: /cb <message>",1);
				     sendMessage(playerid,"Ex: /cb i think he is fine");
		    	}
		    }
		    else{
		        sendMessage(playerid,"You haven't set your cb radio frequency yet.",1);
		        sendMessage(playerid,"Hint: /setcb to set your frequency level.");
		    }
		}
		else{
			sendMessage(playerid,"You are not in a car.",1);
		}
	}
	else if(strcmp("/setcb",cmd,true)==0){
	    if(IsPlayerInAnyVehicle(playerid)){
	        new Float:freq;
	        if(sscanf(cmdtext,"sf",cmd,freq)==0){
	            if(freq > 99.9){
	                return sendMessage(playerid,"Enter a frequency range between 0.0 - 99.9.");
	            }
	            if(freq < 0.0){
	                return sendMessage(playerid,"Enter a frequency range between 0.0 - 99.9.");
	            }

	            if(player[playerid][cb]){
	                sendMessage(playerid,"You have changed your cb radio frequency level.",1);
	            }
	            else{
		            sendMessage(playerid,"You have set your cb radio frequency level.",1);
		            sendMessage(playerid,"Hint: Use /cb to talk in the current channel.");
	            }
	            player[playerid][cb] = freq;

	        }
	        else{
			     sendMessage(playerid,"Usage: /setcb <frequency level>",1);
			     sendMessage(playerid,"Ex: /setcb 98.3");
	        }
	    }
	    else{
	        sendMessage(playerid,"You are not in a car.",1);
	    }
	}
	else if(strcmp("/leave",cmd,true)==0){
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
			    if(GetPlayerInterior(playerid)){
				    SetPlayerVirtualWorld(playerid,0);
				    SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,houses[i][outx],houses[i][outy],houses[i][outz]);

				}
			}
		}
		return 1;
	}
	else if(strcmp("/heal",cmd,true)==0){
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
			    if(GetPlayerInterior(playerid)){
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,float(getPlayerMuscles(playerid)));
					break;
				}
			}
		}
		return 1;
	}
	else if(strcmp("/record",cmd,true)==0){
		StartRecordingPlayerData(playerid,PLAYER_RECORDING_TYPE_DRIVER,"suspectfile");
		return 1;
	}
	else if(strcmp("/stop",cmd,true)==0){
		StopRecordingPlayerData(playerid);
		return 1;
	}
	else if(strcmp("/this",cmd,true)==0){
		printf("v = %d",GetPlayerVehicleID(playerid));
	}
	else if(strcmp("/collections",cmd,true)==0){
		for(new i =0;i < sizeof(bizes);i++){
		    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 5){
				format(string,256,"SELECT owner,collection FROM bizes WHERE bizno = %d",bizes[i][bizno]);
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_field("owner",string);
				if(strcmp(getName(playerid),string,true)==0){
					mysql_fetch_field("collection",string);
					new val = strval(string);
					format(string,256,"Your collections from Shop #: %d is $%d",bizes[i][bizno],val);
					sendMessage(playerid,string,1);
                    mysql_free_result();
                    return 1;
				}
				mysql_free_result();
		    }
		}
		return sendMessage(playerid,"You are not close enough to any of your shops.",1);
	}
	else if(strcmp("/pocket",cmd,true)==0){
		for(new i =0;i < sizeof(bizes);i++){
		    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 5){
				format(string,256,"SELECT owner,collection FROM bizes WHERE bizno = %d",bizes[i][bizno]);
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_field("owner",string);
				if(strcmp(getName(playerid),string,true)==0){
					mysql_fetch_field("collection",string);
					new val = strval(string);
					format(string,256,"You have collected $%d into your pocket from Shop #: %d",val,bizes[i][bizno]);
					sendMessage(playerid,string,1);
					givePlayerMoney(playerid,val);
					addGlobalStats(playerid,"shops",val);
					format(string,256,"UPDATE bizes SET collection = 0 WHERE bizno = %d",bizes[i][bizno]);
					mysql_query2(string);
					mysql_free_result();
					return 1;
				}
				mysql_free_result();
		    }
		}
		return sendMessage(playerid,"You are not close enough to any of your shops.",1);
	}
	/*
		                givePlayerDrugs(playerid,-amount);
		                givePlayerDrugs(id,amount);
		                format(string,256,"You received %dg of drugs from %s.",amount,getName(playerid));
		                sendMessage(id,string,1);
		                format(string,256,"You gave %dg of drugs to %s.",amount,getName(id));
		                sendMessage(playerid,string,1);
						format(string,256,"  %s gives some drugs to %s.",getName(playerid),getName(id),amount);
						for(new i = 0;i < MAX_PLAYERS;i++){
						    if((i != playerid) && (i != id))
						    if(isPlayerClose(i,playerid)){
						        SendClientMessage(i,COLOR_ME,string);
						    }
						}
	*/
	else if(strcmp("/selldrugs",cmd,true)==0){
	    new id,amount,cash;
	    if(isPlayerDrugDealer(playerid)){
		    if(sscanf(cmdtext,"siii",cmd,id,amount,cash)==0){
		        if(IsPlayerConnected(id) && (playerid != id)){
		            if(getPlayerDistanceFromPlayer(playerid,id) > 10){
		                return sendMessage(playerid,"Player is not close enough.",1);
		            }
		            if((amount > 0) && (getPlayerDrugs(playerid) >= amount)){
		                if(cash < 0){
		                    return sendMessage(playerid,"You need to enter a valid cost.",1);
		                }
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"Drug");
						format(string,256,"%s wants to sell you %dg of drugs for $%d.",getName(playerid),amount,cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|Amount: %dg|Cost: $%d|",sell[playerid][stype],amount,cash);
						sendMessage(playerid,string);
		            }
		            else{
		                sendMessage(playerid,"You need to enter a valid amount.",1);
					}
		        }
		        else{
		            sendMessage(playerid,"You need to enter a valid playerid.",1);
		        }
		    }
		    else{
		        sendMessage(playerid,"Usage: /selldrugs <playerid> <grams> <cost>",1);
		        sendMessage(playerid,"Ex: /selldrugs 4 25 4000");
		    }
		}
	}
	else if(strcmp("/sellgold",cmd,true)==0){
	    new id,amount;
	    if(isPlayerGoldMiner(playerid)){
		    if(sscanf(cmdtext,"sii",cmd,id,amount)==0){
		        if(IsPlayerConnected(id) && (playerid != id)){
		            if(getPlayerDistanceFromPlayer(playerid,id) > 10){
		                return sendMessage(playerid,"Player is not close enough.",1);
		            }
		            if((amount > 6) && (getPlayerGold(playerid) >= amount)){
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
					    new Float:goldrate = todaysGoldRate();
						new cash = floatround(goldrate * amount);

						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"Gold");
						format(string,256,"%s wants to sell you %dcg of gold for $%d.",getName(playerid),amount,cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|Amount: %dcg|Cost: $%d|",sell[playerid][stype],amount,cash);
						sendMessage(playerid,string);
		            }
		            else{
		                sendMessage(playerid,"You need to enter a valid amount.",1);
					}
		        }
		        else{
		            sendMessage(playerid,"You need to enter a valid playerid.",1);
		        }
		    }
		    else{
		        sendMessage(playerid,"Usage: /sellgold <playerid> <centigrams>",1);
		        sendMessage(playerid,"Ex: /sellgold  5 2500");
		    }
		}
	}
	else if(strcmp("/sellfish",cmd,true)==0){
	    new id,amount,cash;
	    if(isPlayerFisherman(playerid)){
		    if(sscanf(cmdtext,"siii",cmd,id,amount,cash)==0){
		        if(IsPlayerConnected(id) && (playerid != id)){
		            if(getPlayerDistanceFromPlayer(playerid,id) > 10){
		                return sendMessage(playerid,"Player is not close enough.",1);
		            }
		            if((amount > 0) && (getPlayerFish(playerid) >= amount)){
		                if(cash < 0){
		                    return sendMessage(playerid,"You need to enter a valid cost.",1);
		                }
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"Fish");
						format(string,256,"%s wants to sell you %dg of fishes for $%d.",getName(playerid),amount,cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|Amount: %d|Cost: $%d|",sell[playerid][stype],amount,cash);
						sendMessage(playerid,string);
		            }
		            else{
		                sendMessage(playerid,"You need to enter a valid amount.",1);
					}
		        }
		        else{
		            sendMessage(playerid,"You need to enter a valid playerid.",1);
		        }
		    }
		    else{
		        sendMessage(playerid,"Usage: /sellfish <playerid> <amount> <cost>",1);
		        sendMessage(playerid,"Ex: /sellfish 4 3 4000");
		    }
		}
	}
	else if(strcmp("/sellhouse",cmd,true)==0){
	    new id,amount,cash;
	    if(sscanf(cmdtext,"siii",cmd,id,amount,cash)==0){
	        if(IsPlayerConnected(id) && (playerid != id)){
	            if(getPlayerDistanceFromPlayer(playerid,id) > 10){
	                return sendMessage(playerid,"Player is not close enough.",1);
	            }
	            if(amount > 90000){
	                if(cash < 0){
	                    return sendMessage(playerid,"You need to enter a valid cost.",1);
	                }
					format(string,256,"SELECT * FROM houses WHERE owner = '%s' AND houseno = %d",getName(playerid),amount);
					mysql_query2(string);
					mysql_store_result();
					new num = mysql_num_rows();
					if(num == 1){
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"House");
						format(string,256,"%s wants to sell you house#: %d for $%d.",getName(playerid),amount,cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|House#: %d|Cost: $%d|",sell[playerid][stype],amount,cash);
						sendMessage(playerid,string);
					}
					else{
					    sendMessage(playerid,"You dont own any such house.",1);
					}
	            }
	            else{
	                sendMessage(playerid,"You need to enter a valid house#.",1);
				}
	        }
	        else{
	            sendMessage(playerid,"You need to enter a valid playerid.",1);
	        }
	    }
	    else{
	        sendMessage(playerid,"Usage: /sellhouse <playerid> <house#> <cost>",1);
	        sendMessage(playerid,"Ex: /sellhouse 4 90025 4000");
	    }
	}
	else if(strcmp("/sellshop",cmd,true)==0){
	    new id,amount,cash;
	    if(sscanf(cmdtext,"siii",cmd,id,amount,cash)==0){
	        if(IsPlayerConnected(id) && (playerid != id)){
	            if((amount > 70000) && (amount < 80000)){
	                if(cash < 0){
	                    return sendMessage(playerid,"You need to enter a valid cost.",1);
	                }
					format(string,256,"SELECT * FROM bizes WHERE owner = '%s' AND bizno = %d",getName(playerid),amount);
					mysql_query2(string);
					mysql_store_result();
					new num = mysql_num_rows();
					mysql_free_result();
					if(num == 1){
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"Shop");
						format(string,256,"%s wants to sell you shop#: %d for $%d.",getName(playerid),amount,cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|Shop#: %d|Cost: $%d|",sell[playerid][stype],amount,cash);
						sendMessage(playerid,string);
					}
					else{
					    sendMessage(playerid,"You dont own any such shop.",1);
					}
	            }
	            else{
	                sendMessage(playerid,"You need to enter a valid shops#.",1);
				}
	        }
	        else{
	            sendMessage(playerid,"You need to enter a valid playerid.",1);
	        }
	    }
	    else{
	        sendMessage(playerid,"Usage: /sellshop <playerid> <shop#> <cost>",1);
	        sendMessage(playerid,"Ex: /sellshop 4 70029 4000");
	    }
	}
	else if(strcmp("/sellcar",cmd,true)==0){
	    new id,amount,cash;
	    if(IsPlayerInAnyVehicle(playerid)){
		    if(sscanf(cmdtext,"sii",cmd,id,cash)==0){
		        if(IsPlayerConnected(id) && (playerid != id) && (IsPlayerInAnyVehicle(playerid))){
		            amount = carId[GetPlayerVehicleID(playerid)];
	                if(cash < 0){
	                    return sendMessage(playerid,"You need to enter a valid cost.",1);
	                }
					format(string,256,"SELECT * FROM cars WHERE owner = '%s' AND parking = %d",getName(playerid),amount);
					mysql_query2(string);
					mysql_store_result();
					new num = mysql_num_rows();
					mysql_free_result();
					if(num == 1){
						sell[playerid][srequestid] = 1000 + random(8999);
						sell[playerid][sid] = id;
						sell[playerid][scost] = cash;
						sell[playerid][samount] = amount;
						format(sell[playerid][stype],10,"Car");
						format(string,256,"%s wants to sell you his car fors $%d.",getName(playerid),cash);
						sendMessage(id,string,1);
						format(string,256,"To accept the deal type /acceptdeal %d.",sell[playerid][srequestid]);
						sendMessage(id,string);
						format(string,256,"Your request was sent to %s.",getName(id));
						sendMessage(playerid,string,1);
						format(string,256,"|Product: %s|Cost: $%d|",sell[playerid][stype],cash);
						sendMessage(playerid,string);
					}
					else{
					    sendMessage(playerid,"You dont own this car.",1);
					}
		        }
		        else{
		            sendMessage(playerid,"You need to enter a valid playerid.",1);
		        }
		    }
		    else{
		        sendMessage(playerid,"Usage: /sellcar <playerid> <cost>",1);
		        sendMessage(playerid,"Ex: /sellcar 4 23400");
		    }
		}
		else{
			sendMessage(playerid,"You are not in a car.",1);
		}
	}
	else if(strcmp("/acceptdeal",cmd,true)==0){
	    cmd = strtok(cmdtext,idx);
	    if(!strlen(cmd)){
	        sendMessage(playerid,"Usage: /acceptdeal <dealid>.",1);
	        return sendMessage(playerid,"Ex: /acceptdeal 7623.");
	    }
	    new r = strval(cmd);
	    for(new i = 0;i < MAX_PLAYERS;i++){
	        if(IsPlayerConnected(i)){
	            if(sell[i][srequestid] == r){
	                if(sell[i][sid] == playerid){
	                    if(GetPlayerMoney(playerid) >= sell[i][scost]){
	                        if(strcmp(sell[i][stype],"Drug",true)==0){
	                            if(getPlayerDrugs(i) > sell[i][samount]){
	                                addGlobalStats(playerid,"drugs",sell[i][scost]);
	                                addGlobalStats(i,"deals",sell[i][scost]);
	                                givePlayerMoney(playerid,-sell[i][scost]);
	                                givePlayerMoney(i,sell[i][scost]);
									format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
									sendMessage(playerid,string,1);
									format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
									sendMessage(i,string,1);

									givePlayerDrugs(i,-sell[i][samount]);
									givePlayerDrugs(playerid,sell[i][samount]);
									format(string,256,"%s gives some drugs to %s.",getName(i),getName(playerid));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given %dg of drugs to %s.",sell[i][samount],getName(playerid));
									sendMessage(i,string);
									format(string,256,"You have received %dg of drugs from %s.",sell[i][samount],getName(i));
									sendMessage(playerid,string);
		                        }
	                            else{
	                                sendMessage(playerid,"The deal could not carry on anymore.",1);
	                            }
	                        }
	                        else if(strcmp(sell[i][stype],"Gold",true)==0){
	                            if(getPlayerGold(i) > sell[i][samount]){
	                                addGlobalStats(playerid,"gold",sell[i][scost]);
	                                addGlobalStats(i,"deals",sell[i][scost]);
	                                givePlayerMoney(playerid,-sell[i][scost]);
	                                givePlayerMoney(i,sell[i][scost]);
									format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
									sendMessage(playerid,string,1);
									format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
									sendMessage(i,string,1);

									givePlayerGold(i,-sell[i][samount]);
									givePlayerGold(playerid,sell[i][samount]);
									format(string,256,"%s gives some gold to %s.",getName(i),getName(playerid));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given %dcg of gold to %s.",sell[i][samount],getName(playerid));
									sendMessage(i,string);
									format(string,256,"You have received %dcg of gold from %s.",sell[i][samount],getName(i));
									sendMessage(playerid,string);
	                            }
	                        }
	                        else if(strcmp(sell[i][stype],"Fish",true)==0){
	                            if(getPlayerFish(i) > sell[i][samount]){
	                                addGlobalStats(playerid,"fish",sell[i][scost]);
	                                addGlobalStats(i,"deals",sell[i][scost]);
	                                givePlayerMoney(playerid,-sell[i][scost]);
	                                givePlayerMoney(i,sell[i][scost]);
									format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
									sendMessage(playerid,string,1);
									format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
									sendMessage(i,string,1);

									givePlayerFish(i,-sell[i][samount]);
									givePlayerFish(playerid,sell[i][samount]);
									format(string,256,"%s gives some fishes to %s.",getName(i),getName(playerid));
									for(new j = 0;j < MAX_PLAYERS;j++){
									    if(isPlayerClose(i,j) && i!=j && j != playerid){
											SendClientMessage(j,COLOR_ME,string);
									    }
									}
									format(string,256,"You have given %d fish(es) to %s.",sell[i][samount],getName(playerid));
									sendMessage(i,string);
									format(string,256,"You have received %d fish(es) from %s.",sell[i][samount],getName(i));
									sendMessage(playerid,string);
	                            }
	                        }
	                        else if(strcmp(sell[i][stype],"House",true)==0){
	                        	addGlobalStats(playerid,"properties",sell[i][scost]);
	                        	addGlobalStats(i,"deals",sell[i][scost]);
                                givePlayerMoney(playerid,-sell[i][scost]);
                                givePlayerMoney(i,sell[i][scost]);
								format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
								format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
								sendMessage(playerid,string,1);
								format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
								sendMessage(i,string,1);

							    format(string,256,"UPDATE houses SET owner = '%s' WHERE owner = '%s' AND houseno = %d",getName(playerid),getName(i),sell[i][samount]);
							    mysql_query2(string);
								format(string,256,"%s has sold house# %d to you. Now you own the house!",getName(i),sell[i][samount]);
								sendMessage(playerid,string,1);
								format(string,256,"You have sold house# %d to %s",sell[i][samount],getName(playerid));
								sendMessage(i,string,1);
								sendMessage(i,"Makesure you change your spawn position from this house.");
								sendMessage(i,"And also makesure your car is not parked at this house.");
								new Float:x,Float:y,Float:z,Float:rot;
								new p = random(sizeof(spawnPositions));
								x = spawnPositions[p][0];
								y = spawnPositions[p][1];
								z = spawnPositions[p][2];
								rot = spawnPositions[p][3];
							    format(string,256,"UPDATE spawns SET  x = %f,y = %f ,z = %f ,r = %f, i = 0 , v = 0 WHERE userid = '%s'",x,y,z,rot,getName(i));
								mysql_query2(string);

								format(string,256,"%s gives some documents to %s.",getName(playerid),getName(i));

								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
	                        }
	                        else if(strcmp(sell[i][stype],"Shop",true)==0){
	                            addGlobalStats(playerid,"properties",sell[i][scost]);
	                            addGlobalStats(i,"deals",sell[i][scost]);
                                givePlayerMoney(playerid,-sell[i][scost]);
                                givePlayerMoney(i,sell[i][scost]);
								format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
								format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
								sendMessage(playerid,string,1);
								format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
								sendMessage(i,string,1);

							    format(string,256,"UPDATE bizes SET owner = '%s' WHERE owner = '%s' AND bizno = %d",getName(playerid),getName(i),sell[i][samount]);
							    mysql_query2(string);
								format(string,256,"%s has sold shop# %d to you. Now you own the shop!",getName(i),sell[i][samount]);
								sendMessage(playerid,string,1);
								format(string,256,"You have sold shop# %d to %s",sell[i][samount],getName(playerid));
								sendMessage(i,string,1);
								sendMessage(playerid,"Makesure you have pocket all the collections.");

								format(string,256,"%s gives some documents to %s.",getName(i),getName(playerid));
								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
	                        }
	                        else if(strcmp(sell[i][stype],"Car",true)==0){
		                        addGlobalStats(playerid,"car",sell[i][scost]);
		                        addGlobalStats(i,"deals",sell[i][scost]);
                                givePlayerMoney(playerid,-sell[i][scost]);
                                givePlayerMoney(i,sell[i][scost]);
								format(string,256,"%s gives some money to %s.",getName(playerid),getName(i));
								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
								format(string,256,"You have given $%d to %s.",sell[i][scost],getName(i));
								sendMessage(playerid,string,1);
								format(string,256,"You have received $%d from %s.",sell[i][scost],getName(playerid));
								sendMessage(i,string,1);

							    format(string,256,"UPDATE cars SET owner = '%s' WHERE owner = '%s' AND parking = %d",getName(playerid),getName(i),sell[i][samount]);
							    mysql_query2(string);
								format(string,256,"%s has sold his car to you. Now you own the car!",getName(i),sell[i][samount]);
								sendMessage(playerid,string,1);
								format(string,256,"You have sold your car to %s",sell[i][samount],getName(playerid));
								sendMessage(i,string,1);
								RemovePlayerFromVehicle(i);
								for(new j = 0;j < MAX_VEHICLES;j++){
								    if(carId[j] == sell[i][samount]){
		                                SetVehicleParamsForPlayer(j,playerid,0,0);
		                                SetVehicleParamsForPlayer(j,i,0,1);
		                                break;
								    }
								}

								format(string,256,"%s gives some documents to %s.",getName(i),getName(playerid));
								for(new j = 0;j < MAX_PLAYERS;j++){
								    if(isPlayerClose(i,j) && i!=j && j != playerid){
										SendClientMessage(j,COLOR_ME,string);
								    }
								}
	                        }
	                        else{
                                sendMessage(playerid,"Invalid Product type.");
	                        }
	                    }
	                    else{
                            sendMessage(playerid,"You dont have enough money.");
	                    }
	                }
	                else{
	                    sendMessage(playerid,"That deal was not with you.");
	                }
   	                return 1;
	            }
	        }
	    }
	    sendMessage(playerid,"Sorry, no such deal found.");
	}
	else if(strcmp("/givecash",cmd,true)==0){
	    new id,amount;
	    if(sscanf(cmdtext,"sii",cmd,id,amount)==0){
	        if(IsPlayerConnected(id) && (playerid != id)){
	            if((amount > 0) && (getPlayerMoney(playerid) >= amount)){
	                givePlayerMoney(playerid,-amount);
	                givePlayerMoney(id,amount);
	                addGlobalStats(playerid,"toplayers",amount);
	                addGlobalStats(id,"fromplayers",amount);
	                format(string,256,"You received $%d from %s.",amount,getName(playerid));
	                sendMessage(id,string,1);
	                format(string,256,"You gave $%d to %s.",amount,getName(id));
	                sendMessage(playerid,string,1);
					format(string,256,"  %s gives some cash to $%d.",getName(playerid),getName(id),amount);
					for(new i = 0;i < MAX_PLAYERS;i++){
					    if((i != playerid) && (i != id))
					    if(isPlayerClose(i,playerid)){
					        SendClientMessage(playerid,COLOR_ME,string);
					    }
					}
	            }
	            else{
	                sendMessage(playerid,"You need to enter a valid amount.",1);
				}
	        }
	        else{
	            sendMessage(playerid,"You need to enter a valid playerid.",1);
	        }
	    }
	    else{
	        sendMessage(playerid,"Usage: /givecash <playerid> <amount>",1);
	        sendMessage(playerid,"Ex: /givecash 4 100");
	    }
	}
	else if(strcmp("/eject",cmd,true)==0){
		if(IsPlayerInAnyVehicle(playerid)){
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				cmd = strtok(cmdtext,idx);
				if(strlen(cmd)){
				    new id = strval(cmd);
				    if(playerid == id){
				        return sendMessage(playerid,"You cannot eject yourself.",1);
				    }
				    if(isCarOwner(GetPlayerVehicleID(playerid),id)){
				   		return sendMessage(playerid,"You cannot eject the car owner.",1);
				    }
				    if(IsPlayerInVehicle(id,GetPlayerVehicleID(playerid))){
				        RemovePlayerFromVehicle(id);
                        format(string,256,"%s has ejected %s from his car.",getName(playerid),getName(id));
                        for(new i =0;i < MAX_PLAYERS;i++){
                            if(isPlayerClose(i,playerid)){
                            	SendClientMessage(i,COLOR_ME,string);
                            }
						}
				    }
				    else{
				        format(string,256,"%s is not in your car.",getName(id));
				        sendMessage(playerid,string,1);
				    }
				}
				else{
				    sendMessage(playerid,"Usage: /eject <playerid>",1);
				    sendMessage(playerid,"Ex: /eject 4");
				}

		    }
		}
		else{
		    sendMessage(playerid,"You are not in a car.",1);
		}
	}
	else if(strcmp("/lock",cmd,true)==0){
	    new v = -1,Float:d = 9999.9999;
        if(GetPlayerInterior(playerid)!=0)
            return sendMessage(playerid,"You must be outside to use that command.",1);
	    for(new i = 0;i < MAX_VEHICLES;i++){
	        if(isCarOwner(playerid,i)){
		        new Float:c = getPlayerDistanceFromVehicle(playerid,i);
		        if((c < d)&&(IsVehicleStreamedIn(i,playerid))){
		            d = c;
		            v = i;
		        }
	        }
	    }
	    if(v == -1){
			return sendMessage(playerid,"You are not close enough to any of your cars.",1);
	    }
	    if(locked[v] == 1){
	        return sendMessage(playerid,"Car doors were already locked.",1);
	    }
		locked[v] = 1;
		GameText(playerid,"Locked",2000);
		format(string,256,"  %s locks his car doors.",getName(playerid));
		PlayerPlaySound(playerid,1131,0,0,0);
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(i != playerid)
		    if(isPlayerClose(playerid,i)){
				SetVehicleParamsForPlayer(v,i,0,1);
				PlayerPlaySound(i,1131,0,0,0);
				SendClientMessage(i,COLOR_ME,string);
			}
		}
	}
	else if(strcmp("/unlock",cmd,true)==0){
	    new v = -1,Float:d = 9999.9999;
        if(GetPlayerInterior(playerid)!=0)
            return sendMessage(playerid,"You must be outside to use that command.",1);
	    for(new i = 0;i < MAX_VEHICLES;i++){
	        if(isCarOwner(playerid,i)){
		        new Float:c = getPlayerDistanceFromVehicle(playerid,i);
		        if((c < d)&&(IsVehicleStreamedIn(i,playerid))){
		            d = c;
		            v = i;
		        }
	        }
	    }
	    if(v == -1){
			return sendMessage(playerid,"You are not close enough to any of your cars.",1);
	    }
	    if(locked[v] == 0){
	        return sendMessage(playerid,"Car doors were already unlocked.",1);
	    }

		locked[v] = 0;
		GameText(playerid,"Unlocked",2000);
		PlayerPlaySound(playerid,1131,0,0,0);
		format(string,256,"  %s unlocks his car doors.",getName(playerid));
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(i != playerid)
		    if(isPlayerClose(playerid,i)){
				SetVehicleParamsForPlayer(v,i,0,0);
				PlayerPlaySound(i,1131,0,0,0);
				SendClientMessage(i,COLOR_ME,string);
			}
		}
	}
	else if(strcmp("/deposit",cmd,true)==0){
		if(isPlayerInBank(playerid)){
		    cmd = strtok(cmdtext,idx);
		    if(!strlen(cmd)){
		        sendMessage(playerid,"Usage: /deposit <amount>",1);
		        return sendMessage(playerid,"Ex: /deposit 3000");
		    }
		    new amount = strval(cmd);
		    if((getPlayerMoney(playerid) >= amount) && (amount > 0)){
				givePlayerMoney(playerid,-amount);
				givePlayerBankMoney(getName(playerid),amount,"You");
				format(string,256,"You deposited $%d into your bank account.",amount);
				sendMessage(playerid,string,1);
				format(string,256,"Your current bank balance is $%.2f.",checkPlayerBankMoney(playerid));
				sendMessage(playerid,string);
		    }
		    else{
		        sendMessage(playerid,"Transaction declained, enter a valid value for amount.",1);
		    }
		}
		else{
		    return sendMessage(playerid,"You are not at an 24-7.",1);
		}
		return 1;
	}
	else if(strcmp("/withdraw",cmd,true)==0){
		if(isPlayerInBank(playerid)){
		    cmd = strtok(cmdtext,idx);
		    if(!strlen(cmd)){
		        sendMessage(playerid,"Usage: /withdraw <amount>",1);
		        return sendMessage(playerid,"Ex: /withdraw 3000");
		    }
		    new amount = strval(cmd);
		    if((checkPlayerBankMoney(playerid) >= float(amount)) && (float(amount) > 0)){
				givePlayerMoney(playerid,amount);
				removePlayerBankMoney(getName(playerid),amount,"You");
				format(string,256,"You withdrew $%d from your bank account.",amount);
				sendMessage(playerid,string,1);
				format(string,256,"Your current bank balance is $%.2f.",checkPlayerBankMoney(playerid));
				sendMessage(playerid,string);

		    }
		    else{
		        sendMessage(playerid,"Transaction declained, enter a valid value for amount.",1);
		    }
		}
		else{
		    return sendMessage(playerid,"You are not at an 24-7.",1);
		}
		return 1;
	}
	else if(strcmp("/balance",cmd,true)==0){
		if(isPlayerInBank(playerid)){
			format(string,256,"Your current bank balance is $%.2f.",checkPlayerBankMoney(playerid));
			sendMessage(playerid,string);
		}
		else{
		    return sendMessage(playerid,"You are not at an 24-7.",1);
		}
		return 1;
	}
 	else if(strcmp("/closestcar",cmd,true)==0){
 	    if(consumedDrugs[playerid] > 0){
	 	    if(closestCar[playerid] == 0 ){
			    if(GetPlayerWantedLevel(playerid)){
			        return sendMessage(playerid,"You cannot use it when you are a suspect.",1);
			    }
			    new v = -1,Float:d = 9999.9999;
		        new Float:x,Float:y,Float:z;
		        GetPlayerPos(playerid,x,y,z);
		        new Float:vx,Float:vy,Float:vz;
		        if(GetPlayerInterior(playerid)!=0)
		            return sendMessage(playerid,"You must be outside to use that command.",1);
			    for(new i = 0;i < MAX_VEHICLES;i++){
			        if((!IsPlayerInVehicle(playerid,i)) && (isCommonVehicle(i)) && (!isAnyPlayerInVehicle(i))){
				        GetVehiclePos(i,vx,vy,vz);
				        new Float:c = GetDistanceBetweenPoints(x,y,z,vx,vy,vz);
				        if( c < d){
				            d = c;
				            v = i;
				        }
			        }
			    }
			    if(v == -1){
			        if(IsPlayerInAnyVehicle(playerid))
			            if(isCarOwner(playerid,GetPlayerVehicleID(playerid)))
			            	return sendMessage(playerid,"You dont own any other car.",1);
					return sendMessage(playerid,"You dont own a car.",1);
			    }
				closestCar[playerid] = 1;
                freezePlayer(playerid);
				GetVehiclePos(v,vx,vy,vz);
				warpPlayerInToVehicle(playerid,x,y,vx,vy,vz,v,0);
			}
		}
		else{
			sendMessage(playerid,"You are not high to use this command.",1);
			sendMessage(playerid,"Hint: You should use /consumedrugs.");
		}
	}
/* 	else if(strcmp("/reach",cmd,true)==0){
 	    if(consumedDrugs[playerid] > 0){
	 	    if(closestCar[playerid] == 0 ){
			    if(GetPlayerWantedLevel(playerid)){
			        return sendMessage(playerid,"You cannot use it when you are a suspect.");
			    }

		        new Float:x,Float:y,Float:z;
		        GetPlayerPos(playerid,x,y,z);
		        new Float:vx,Float:vy,Float:vz;
		        if(GetPlayerInterior(playerid)!=0)
		            return sendMessage(playerid,"You must be outside to use that command.");
				cmd = strtok(cmdtext,idx);
				if(!strlen(cmd)){
					sendMessage(playerid,"Usage: /reach <playerid>");
					return sendMessage(playerid,"Ex: /reach 6");
				}
				new id = strval(cmd);
				if(IsPlayerConnected(id) && id != playerid){
				    if(GetPlayerInterior(id) == 0){
						if(GetPlayerWantedLevel(id) == 0){
						    GetPlayerVelocity(playerid,vx,vy,vz);
						    if((vx != 0) || (vy != 0) || (vz != 0)){
								return sendMessage(playerid,"You cannot reach players when they are moving fast.");
						    }
						    GetPlayerPos(id,vx,vy,vz);
						    closestCar[playerid] = 1;
							warpPlayerToPlayer(playerid,x,y,vx,vy,vz);
							sendMessage(playerid,"You can do /getback to stay at your current position.");
						}
						else{
							SendClientMessage(playerid,COLOR_ME,"You cannot reach the player now, try again later.");
						}
					}
					else{
						SendClientMessage(playerid,COLOR_ME,"You cannot reach the player now, try again later.");
					}
				}
				else{
				    SendClientMessage(playerid,COLOR_ME,"You must enter a valid playerid.");
				}
			}
		}
		else{
			sendMessage(playerid,"You are not high to use this command.");
			sendMessage(playerid,"Hint: You should use /consumedrugs.");
		}
	}
*/	else if(strcmp("/consumedrugs",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd)){
		    sendMessage(playerid,"Usage: /consumedrugs <amount>.",1);
		    return sendMessage(playerid,"Ex: /consumedrugs 55.");
		}
		new drugs = strval(cmd);
		if(getPlayerDrugs(playerid) >= drugs){
		    givePlayerDrugs(playerid,-drugs);
		    SetPlayerDrunkLevel(playerid,5000);
			consumedDrugs[playerid] += drugs;
			new Float:armour;
			GetPlayerArmour(playerid,armour);
			SetPlayerArmour(playerid,armour+(drugs*10));
			format(string,256,"You consumed %dg of drugs.",drugs);
			sendMessage(playerid,string,1);
			format(string,256,"%s consumes some drugs.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(isPlayerClose(i,playerid) && i!=playerid){
			        SendClientMessage(i,COLOR_ME,string);
			    }
			}
		}
		else{
		    format(string,256,"You only have %dg of drugs with you.",getPlayerDrugs(playerid));
		    sendMessage(playerid,string,1);
		}
	}
	else if(strcmp("/park",cmd,true)==0){
	    if(IsPlayerInAnyVehicle(playerid)){
			if(isCarOwner(playerid,GetPlayerVehicleID(playerid))){
			    new v = GetPlayerVehicleID(playerid);
				new Float:x,Float:y,Float:z;
				GetVehiclePos(v,x,y,z);

			    for(new i = 0;i < sizeof(parkId);i++){
					if(GetDistanceBetweenPoints(x,y,z,parking[i][0],parking[i][1],parking[i][2])<5.0)
     			    if(parkId[i] == player[playerid][LastPickup]){
	     			    format(string,256,"SELECT * FROM cars WHERE parking = %d",i);
	     			    mysql_query2(string);
             		    mysql_store_result();
	     			    if(mysql_num_rows()){
	     			        return sendMessage(playerid,"This parking slot is already occupied.",1);
	     			    }
				        new p = carId[v];
/*				        for(new j = 0;j < MAX_VEHICLES;j++){
				            if(carId[j] == i)
				                p = j;
				        }
*/				        mysql_free_result();
						format(string,256,"UPDATE cars SET parking = %d WHERE parking = %d",i,p);
						mysql_query2(string);
						mysql_free_result();
						new model = GetVehicleModel(v);
						DestroyVehicle(v);
						new color;
						format(string,256,"SELECT color FROM cars WHERE parking = %d",i);
						mysql_query2(string);
						mysql_store_result();
						color = mysql_fetch_int();
						mysql_free_result();
						new id = CreateVehicle(model,parking[i][0],parking[i][1],parking[i][2],parking[i][3],color,color,600);
						carId[id] = i;
						loadVehicleMods(id);
						return 1;
				    }
				 }

				for(new i = 0;i < sizeof(hParkId);i++){
					if(GetDistanceBetweenPoints(x,y,z,houses[i][parkx],houses[i][parky],houses[i][parkz])<5.0)
				    if(hParkId[i] == player[playerid][LastPickup]){
	     			    format(string,256,"SELECT * FROM cars WHERE parking = %d",i+1000);
	     			    mysql_query2(string);
	     			    mysql_store_result();
	     			    if(mysql_num_rows())
	     			        return sendMessage(playerid,"This parking slot is already occupied.",1);
				        new p = carId[v];
/*				        for(new j = 0;j < MAX_VEHICLES;j++){
				            if(carId[j] == i+1000)
				                p = j;
				        }
*/				        mysql_free_result();
						format(string,256,"SELECT owner FROM houses WHERE houseno = %d",houses[i][houseno]);
						mysql_query2(string);
						mysql_store_result();
						mysql_fetch_row(string);
						if(strcmp(string,getName(playerid))!=0)
						{
						    return sendMessage(playerid,"You must own this house to park your car here.",1);
						}
						mysql_free_result();
						format(string,256,"UPDATE cars SET parking = %d WHERE parking = %d",i+1000,p);
						mysql_query2(string);
						mysql_free_result();
						new model = GetVehicleModel(v);
						DestroyVehicle(v);
						new color;
						format(string,256,"SELECT color FROM cars WHERE parking = %d",i+1000);
						mysql_query2(string);
						mysql_store_result();
						color = mysql_fetch_int();
						mysql_free_result();
						carId[CreateVehicle(model,houses[i][parkx],houses[i][parky],houses[i][parkz],houses[i][parkr],color,color,600)] = i;
						return 1;
				    }
				}
				sendMessage(playerid,"You are not on the parking slot icon.",1);
			}
			else{
			    sendMessage(playerid,"You dont own this car.",1);
			}
	    }
		else{
		    sendMessage(playerid,"You must be in a car to park it.",1);
		}
	}
	else if(strcmp("/login",cmd,true)==0){
	    if(player[playerid][Spawned]){
	        return sendMessage(playerid,"You are already logged in.",1);
	    }
	    new password[23];
		if(sscanf(cmdtext,"ss",cmd,password)==0){
		    if(existPlayer(playerid)==0){
		        sendMessage(playerid,"You havent registered with us yet.",1);
		        return sendMessage(playerid,"Type /register to register with us.");
		    }
		    if(checkPlayerPassword( playerid, password)){

		        SetPlayerColor(playerid,0xB3F0FFFF);
				new Float:x,Float:y,Float:z,Float:r;
				new skin;
				format(string,256,"SELECT skin FROM stats WHERE userid = '%s'",getName(playerid));
				if(mysql_query2(string))
				{
				    mysql_store_result();
				    skin = mysql_fetch_int();
				    mysql_free_result();
				}
				format(string,256,"SELECT x,y,z,r FROM spawns WHERE userid = '%s'",getName(playerid));
				if(mysql_query2(string))
				{
					mysql_store_result();
					mysql_fetch_field_num(0,string);
					x = floatstr(string);
					mysql_fetch_field_num(1,string);
					y = floatstr(string);
					mysql_fetch_field_num(2,string);
					z = floatstr(string);
					mysql_fetch_field_num(3,string);
					r = floatstr(string);
					mysql_free_result();
					SetSpawnInfo(playerid,0,skin,x,y,z,r,0,0,0,0,0,0);
				}

		        SpawnPlayer(playerid);
		        player[playerid][LoggedIn] = 1;
		        sendMessage(playerid,"You have successfully logged in.",1);

				format(string,256,"* %s has joined.",getName(playerid));
			 	if(IsPlayerConnected(playerid)){
					SendClientMessageToAll(COLOR_LIGHTRED,string);
				}
			    new tmp[20];
			    GetPlayerIp(playerid,tmp,20);
			    format(string,256,"| Name: %s | Ip: %s |",getName(playerid),tmp);
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(isPlayerAdmin(i)){
						SendClientMessage(i,COLOR_LIGHTRED,string);
				    }
				}

		        format(string,256,"SELECT money FROM stats WHERE userid = '%s'",getName(playerid));
				mysql_query2(string);
				mysql_store_result();
				new money = mysql_fetch_int();
    			setPlayerMoney(playerid,money);
    			mysql_free_result();

    			format(string,256,"SELECT level FROM levels WHERE userid = '%s'",getName(playerid));
    			mysql_query2(string);
    			mysql_store_result();
    			new lvl = mysql_fetch_int();
    			mysql_free_result();

    			format(string,256,"SELECT job,rank FROM jobs WHERE userid = '%s' AND current = 1",getName(playerid));
    			mysql_query2(string);
    			mysql_store_result();

				mysql_free_result();

				SetPlayerScore(playerid,lvl);

				new mapicons = 0;
				for(new i = 0;i < sizeof(houses);i++)
					SetPlayerMapIcon(playerid,mapicons++,houses[i][doorx],houses[i][doory],houses[i][doorz],31,0);
				for(new i = 0;i < sizeofmotels;i++)
					SetPlayerMapIcon(playerid,mapicons++,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz),32,0);

				SetPlayerMapIcon(playerid,mapicons++, 2520.5139,2371.8625,10.8203,60,0);
				SetPlayerMapIcon(playerid,mapicons++,1692.1687,1451.2262,10.7650 ,5,0);
				SetPlayerMapIcon(playerid,mapicons++,1615.5975,1825.4496,10.8203 ,22,0);
				SetPlayerMapIcon(playerid,mapicons++, 260.3493,2896.4666,9.9887,24,0);
				SetPlayerMapIcon(playerid,mapicons++,1646.7952,2187.7395,10.820 ,27,0);
				SetPlayerMapIcon(playerid,mapicons++,-915.5036,2684.3025,42.3703 ,18,0);
				SetPlayerMapIcon(playerid,mapicons++,2294.6147,2428.0566,10.8203,30,0);
				SetPlayerMapIcon(playerid,mapicons++,1633.4078,612.4949,7.7813 ,9,0);
				SetPlayerMapIcon(playerid,mapicons++, 823.3005,857.4122,12.0251,11,0);


				SetPlayerMapIcon(playerid,mapicons++,  1004.0070,-939.3102,42.1797,56,0);
				SetPlayerMapIcon(playerid,mapicons++,1944.3260,-1772.9254,13.3906,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-90.5515,-1169.4578,2.4079,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-1609.7958,-2718.2048,48.5391,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-2029.4968,156.4366,28.9498,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-2408.7590,976.0934,45.4175,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-2243.9629,-2560.6477,31.8841,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-1676.6323,414.0262,6.9484,56,0);
				SetPlayerMapIcon(playerid,mapicons++,2202.2349,2474.3494,10.5258,56,0);
				SetPlayerMapIcon(playerid,mapicons++,614.9333,1689.7418,6.6968,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-1328.8250,2677.2173,49.7665,56,0);
				SetPlayerMapIcon(playerid,mapicons++,70.3882,1218.6783,18.5165,56,0);
				SetPlayerMapIcon(playerid,mapicons++,2113.7390,920.1079,10.5255,56,0);
				SetPlayerMapIcon(playerid,mapicons++,-1327.7218,2678.8723,50.0625,56,0);
				SetPlayerMapIcon(playerid,mapicons++,656.4265,-559.8610,16.5015,56,0);
				SetPlayerMapIcon(playerid,mapicons++,656.3797,-570.4138,16.5015,56,0);

				SetPlayerMapIcon(playerid,mapicons++, 2546.290283, 1971.762695, 10.820312,52,0);
				SetPlayerMapIcon(playerid,mapicons++,2885.277587, 2453.478271, 11.068956 ,52,0);
				SetPlayerMapIcon(playerid,mapicons++,2097.767578, 2223.978515, 11.023437 ,52,0);
				SetPlayerMapIcon(playerid,mapicons++, 2194.563720, 1991.017944, 12.296875,52,0);
				SetPlayerMapIcon(playerid,mapicons++,2452.393310, 2064.608154, 10.820312,52,0);
				SetPlayerMapIcon(playerid,mapicons++,1936.5498,2308.1729,10.8203,52,0);

				SetPlayerMapIcon(playerid,mapicons++,1940.4778,2062.7881,10.8203,55,0);
				SetPlayerMapIcon(playerid,mapicons++,1668.7592,1830.2897,10.8203,55,0);
				SetPlayerMapIcon(playerid,mapicons++,1651.7021,2193.6113,10.8203,55,0);
				SetPlayerMapIcon(playerid,mapicons++,2196.0103,1386.4563,10.8203,55,0);

				SetPlayerMapIcon(playerid,mapicons++,1970.2466,2294.6101,16.4559,54,0); // gym

				SetPlayerMapIcon(playerid,mapicons++,2391.3479,1041.9517,10.8203,63,0); // transfendor


				hoursTimer[playerid] = SetTimerEx("hoursCount", 60 * 1000,1,"i",playerid);


				for(new i = 0;i < sizeof(logo);i++){
				    TextDrawShowForPlayer(playerid,logo[i]);
				}

				printf("Total number of map icons: %d",mapicons);
				PlayerPlaySound(playerid,1063,0,0,0);
//				SetPlayerTeam(playerid,1);
				for(new i = 0;i <= 10;i++)
				    SetPlayerSkillLevel(playerid,i,0);

		    }
		    else
		        return sendMessage(playerid,"You have entered a wrong password.",1);
		}
		else{
			sendMessage(playerid,"Usage: /login <password>",1);
			sendMessage(playerid,"Ex: /login 123hello");
		}
	}
	else if(strcmp(cmd,"/changepassword",true)==0){
	    new newpass[23],oldpass[23];
		if(sscanf(cmdtext,"sss",cmd,oldpass,newpass)==0){
		    if(existPlayer(playerid)==0){
		        sendMessage(playerid,"You havent registered with us yet.",1);
		        return sendMessage(playerid,"Type /register to register with us.");
		    }
		    if(checkPlayerPassword( playerid, oldpass)){
		        changePassword(playerid,newpass);
		        sendMessage(playerid,"You have successfully changed your password.",1);
		    }
		    else
		        return sendMessage(playerid,"You have entered a wrong password.",1);
		}
		else{
			sendMessage(playerid,"Usage: /changepassword <oldpassword> <newpassword>",1);
			sendMessage(playerid,"Ex: /changepassword 123hello bye456");
		}
	}
	else if(strcmp(cmd,"/saveguns",true)==0){
	    new atHouse = -1;
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){ //
  			    if(GetPlayerInterior(playerid)){
  			        atHouse = houses[i][houseno];
  			    }
  			}
  		}
		if (atHouse == -1){
			for(new i = 0;i < sizeofmotels;i++){
				for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
					format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
					mysql_query2(string);
					mysql_store_result();
					mysql_fetch_row(string);
					mysql_free_result();
					if(strcmp(string,getName(playerid),true)==0){
					    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
								atHouse = floatround(imotels(i,j,houseno));
						}
				    }
				}
			}
		}

		if(atHouse != -1){
			for(new j = 0;j <= 12;j++){
	            new w,a;
				format(string,256,"SELECT weapon%d FROM weapons WHERE houseno = %d",j,atHouse);
				mysql_query2(string);
				mysql_store_result();
				w = mysql_fetch_int();
				format(string,256,"SELECT ammo%d FROM weapons WHERE houseno = %d",j,atHouse);
				mysql_query2(string);
				mysql_store_result();
				a = mysql_fetch_int();
				mysql_free_result();
				GivePlayerWeapon(playerid,w,a);
			}
	        new w,a;
	        for(new j = 0;j <= 12;j++){
				GetPlayerWeaponData(playerid,j,w,a);
				format(string,256,"UPDATE weapons SET weapon%d = %d , ammo%d = %d WHERE houseno = %d",j,w,j,a,atHouse);
				mysql_query2(string);
				mysql_free_result();
			}
			ResetPlayerWeapons(playerid);
			GameText(playerid,"Guns Saved",3000);
	    }
	    else{
			sendMessage(playerid,"You are not in your house/room.",1);
	    }
	}
	else if(strcmp(cmd,"/loadguns",true)==0){
	    new atHouse = -1;
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
  			    if(GetPlayerInterior(playerid)){
  			        atHouse = houses[i][houseno];
  			    }
  			}
  		}
		if (atHouse == -1){
			for(new i = 0;i < sizeofmotels;i++){
				for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
					format(string,256,"SELECT owner FROM houses WHERE houseno = %d",fmotels(i,j,houseno));
					mysql_query2(string);
					mysql_store_result();
					mysql_fetch_row(string);
					mysql_free_result();
					if(strcmp(string,getName(playerid),true)==0){
					    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
								atHouse = imotels(i,j,houseno);
						}
				    }
				}
			}
		}

		if(atHouse != -1){
	        for(new j = 0;j <= 12;j++){
	            new w,a;
				format(string,256,"SELECT weapon%d FROM weapons WHERE houseno = %d",j,atHouse);
				mysql_query2(string);
				mysql_store_result();
				w = mysql_fetch_int();
				mysql_free_result();
				format(string,256,"SELECT ammo%d FROM weapons WHERE houseno = %d",j,atHouse);
				mysql_query2(string);
				mysql_store_result();
				a = mysql_fetch_int();
				mysql_free_result();
				format(string,256,"UPDATE weapons SET ammo%d = 0,weapon%d = 0 WHERE houseno = %d",j,j,atHouse);
				mysql_query2(string);
				mysql_free_result();
				GivePlayerWeapon(playerid,w,a);
			}

			GameText(playerid,"Guns Loaded",3000);
	    }
	    else{
			sendMessage(playerid,"You are not in your house/room.",1);
	    }
	}
	else if(strcmp("/trashmymails",cmd,true)==0){
	    new atHouse = -1;
		for(new i = 0;i < sizeofmotels;i++){
			for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				if(strcmp(string,getName(playerid),true)==0){
				    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
							atHouse = imotels(i,j,houseno);
					}
			    }
			}
		}
		if (atHouse == -1){
			for(new i = 0;i < sizeof(houses);i++){
				if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
				    if(GetPlayerInterior(playerid)){
				        atHouse = houses[i][houseno];
					}
				}
			}
		}
		if(atHouse == -1){
		    return sendMessage(playerid,"You are not at your house/room.",1);
		}
		format(string,256,"DELETE FROM mails WHERE houseno = %d",atHouse);
		mysql_query2(string);
		sendMessage(playerid,"You have trashed all your mails.",1);
	}
	else if(strcmp("/listmymails",cmd,true)==0){
	    new atHouse = -1;
		for(new i = 0;i < sizeofmotels;i++){
			for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				if(strcmp(string,getName(playerid),true)==0){
				    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
							atHouse = imotels(i,j,houseno);
					}
			    }
			}
		}
		if (atHouse == -1){
			for(new i = 0;i < sizeof(houses);i++){
				if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
				    if(GetPlayerInterior(playerid)){
				        atHouse = houses[i][houseno];
					}
				}
			}
		}
		if(atHouse == -1){
		    return sendMessage(playerid,"You are not at your house/room.",1);
		}
		format(string,256,"SELECT mailid,ondate,sender,subject FROM mails WHERE houseno = %d",atHouse);
		mysql_query2(string);
		mysql_store_result();
		if(mysql_num_rows()==0){
			return sendMessage(playerid,"Mail box empty",1);
		}
		format(string,256,"|  %10s  |  %16s  |  %32s  |  %s  |","Mail Id","Time","Sender","Subject");
		sendMessage(playerid,string,1);
		do
		{
			new string1[16],string2[16],string3[32],string4[128];
			mysql_fetch_field("mailid",string1);
			new mailid = strval(string1);
		    mysql_fetch_field("ondate",string2);
		    mysql_fetch_field("sender",string3);
		    mysql_fetch_field("subject",string4);
			format(string,256,"|  %10d  |  %16s  |  %32s  |  %s  |",mailid,string2,string3,string4);
		    sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}
	else if(strcmp("/checkmails",cmd,true)==0){
	    new atHouse = -1;
		for(new i = 0;i < sizeofmotels;i++){
			for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				if(strcmp(string,getName(playerid),true)==0){
				    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
							atHouse = imotels(i,j,houseno);
					}
			    }
			}
		}
		if (atHouse == -1){
			for(new i = 0;i < sizeof(houses);i++){
				if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
				    if(GetPlayerInterior(playerid)){
				        atHouse = houses[i][houseno];
					}
				}
			}
		}
		if(atHouse == -1){
		    return sendMessage(playerid,"You are not at your house/room.",1);
		}
		format(string,256,"SELECT mailid,ondate,sender,subject FROM mails WHERE new = 1 AND houseno = %d",atHouse);
		mysql_query2(string);
		mysql_store_result();
		if(mysql_num_rows()==0){
			return sendMessage(playerid,"No new mails",1);
		}
		format(string,256,"|  %10s  |  %16s  |  %32s  |  %s  |","Mail Id","Time","Sender","Subject");
		sendMessage(playerid,string,1);
		do
		{
			new string1[16],string2[16],string3[32],string4[128];
			mysql_fetch_field("mailid",string1);
			new mailid = strval(string1);
		    mysql_fetch_field("ondate",string2);
		    mysql_fetch_field("sender",string3);
		    mysql_fetch_field("subject",string4);
		    format(string,256,"|  %10d  |  %16s  |  %32s  |  %s  |",mailid,string2,string3,string4);
		    sendMessage(playerid,string);
		}
		while(mysql_fetch_row_data());
		mysql_free_result();
	}
	else if(strcmp("/readmail",cmd,true)==0){
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd)){
		    sendMessage(playerid,"Usage: /readmail <mailid>",1);
		    return sendMessage(playerid,"Ex: /readmail 4");
		}
		new mailid = strval(cmd);
	    new atHouse = -1;
		for(new i = 0;i < sizeofmotels;i++){
			for(new j = 1;j < sizeof(motel) && imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				if(strcmp(string,getName(playerid),true)==0){
				    if(getPlayerDistanceFromPoint(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz)) < 5){
							atHouse = imotels(i,j,houseno);
					}
			    }
			}
		}
		if (atHouse == -1){
			for(new i = 0;i < sizeof(houses);i++){
				if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
				    if(GetPlayerInterior(playerid)){
				        atHouse = houses[i][houseno];
					}
				}
			}
		}
		if(atHouse == -1){
		    return sendMessage(playerid,"You are not at your house/room.",1);
		}
		format(string,256,"SELECT sender,message FROM mails WHERE mailid = %d AND houseno = %d",mailid,atHouse);
		mysql_query2(string);
		mysql_store_result();
		if(mysql_num_rows()){
			mysql_fetch_field("sender",string);
			mysql_fetch_field("message",_string2);
			ShowPlayerDialog(playerid,MAIL_DIALOG_IDS+random(1000),0,string,_string2,"Ok","Cancel");
			mysql_free_result();
			format(string,256,"UPDATE mails SET new = 0 WHERE mailid = %d",mailid);
			mysql_query2(string);
		}
		mysql_free_result();
	}
	else if(strcmp("/virtualworld",cmd,true)==0){
	    format(string,256,"Your current virtual world is %d",GetPlayerVirtualWorld(playerid));
		SendClientMessage(playerid,0xFFFFFFAA,string);
	}
	else if(strcmp("/stats",cmd,true)==0){
	    if(cstaton[playerid] == 0){
			new muscles,drugs,level,
			playingpoints,gold,house,cars,shops,rooms,fish;
	  		new shoes;
	  		new days,hours;
	  		new read,unread;
	  		new hno,phone;
	  		new password[30],registeredon[30],ip[30],name[23];
			name = getName(playerid);

			format(string,256,"SELECT muscles,drugs,gold,fish FROM stats WHERE userid = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			mysql_fetch_field("muscles",string);
			muscles = strval(string);
			mysql_fetch_field("drugs",string);
			drugs = strval(string);
			mysql_fetch_field("gold",string);
			gold = strval(string);
			mysql_fetch_field("fish",string);
			fish = strval(string);
			mysql_free_result();


			format(string,256,"SELECT level,playingpoints FROM levels WHERE userid = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			mysql_fetch_field("level",string);
			level = strval(string);
			mysql_fetch_field("playingpoints",string);
			playingpoints = strval(string);
			mysql_free_result();

			format(string,256,"SELECT houseno FROM houses WHERE owner = '%s' AND houseno >= 90000",name);
			mysql_query2(string);
			mysql_store_result();
			house = mysql_num_rows();
			if(house > 0){
				hno = mysql_fetch_int();
			}
			mysql_free_result();

			format(string,256,"SELECT * FROM houses WHERE owner = '%s' AND houseno < 90000",name);
			mysql_query2(string);
			mysql_store_result();
			rooms = mysql_num_rows();
			if((rooms > 0) && (!hno)){
				hno = mysql_fetch_int();
			}
			mysql_free_result();

			format(string,256,"SELECT * FROM bizes WHERE owner = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			shops = mysql_num_rows();
			mysql_free_result();

			format(string,256,"SELECT number FROM phone WHERE userid = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			phone = mysql_fetch_int();
			mysql_free_result();

			format(string,256,"SELECT * FROM cars WHERE owner = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			cars = mysql_num_rows();
			mysql_free_result();

			read = 0;
			unread = 0;
			if(hno){
				format(string,256,"SELECT * FROM mails WHERE houseno = '%d' AND new = 0",hno);
				mysql_query2(string);
				mysql_store_result();
				read = mysql_num_rows();
				mysql_free_result();

				format(string,256,"SELECT * FROM mails WHERE houseno = '%d' AND new = 1",hno);
				mysql_query2(string);
				mysql_store_result();
				unread = mysql_num_rows();
				mysql_free_result();
			}

			format(string,256,"SELECT * FROM horseshoes WHERE userid = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			shoes = 0;
			for(new i = 0;i < sizeof(horseShoe);i++){
			    new tmp[10];
			    format(tmp,10,"shoe%d",i);
				mysql_fetch_field(tmp,string);
				if(strval(string) == 1){
				    shoes += 1;
				}
			}
			mysql_free_result();
			GetPlayerIp(playerid,ip,sizeof(ip));

			format(string,256,"SELECT password,ondate FROM register WHERE userid = '%s'",name);
			mysql_query2(string);
			mysql_store_result();
			mysql_fetch_field("ondate",registeredon);
			mysql_fetch_field("password",string);
			new len = strlen(string);
			for(new i = 0;i < len;i++){
			    strins(password,"]",0);
			}
			mysql_free_result();
			new indx;
			string = strtok(registeredon,indx);
			new y,m,d;
			indx = 0;
			y = strval(strtok(string,indx,'-'));
			m = strval(strtok(string,indx,'-'));
			d = strval(strtok(string,indx,'-'));
			new cd,cm,cy;
			days = 0;
			getdate(cy,cm,cd);
			while(y < cy){
			    days+=365;
			    y += 1;
			}
			while(m < cm){
			    days+=30;
			    m += 1;
			}
			while(d < cd){
			    days+=1;
			    d += 1;
			}

			new rank,job[25],Float:salaryrate,lasttime[30],duties;
			format(string,256,"SELECT job,rank,salaryrate,lasttime,duties FROM jobs WHERE userid = '%s' AND current = 1",name);
			mysql_query2(string);
			mysql_store_result();
			if(mysql_num_rows()){
				mysql_fetch_field("job",job);
				mysql_fetch_field("rank",string);
				rank = strval(string);
				mysql_fetch_field("salaryrate",string);
				salaryrate = floatstr(string);
				mysql_fetch_field("duties",string);
				duties = strval(string);
				mysql_fetch_field("lasttime",lasttime);
				new tmp;
				lasttime = strtok(lasttime,tmp);
			}
			else
				format(job,20,"None");
			mysql_free_result();

			new next = 0;
			if(rank == 1){
			    next = 5;
			}
			else if(rank == 2){
			    next = 15;
			}
			else if(rank == 3){
			    next = 30;
			}
			else if(rank == 4){
			    next = 50;
			}
			else if(rank == 5){
			    next = 80;
			}
			else if(rank == 6){
			    next = 125;
			}
			else if(rank == 7){
			    next = 185;
			}
			else if(rank == 8){
			    next = 265;
			}
			else if(rank == 9){
			    next = 365;
			}
			new Float:progress = float(duties)/float(next) * 100.0;
			if(next == 0){
			    progress = 0;
			}
			new RankName[40];
			if(strcmp(job,"Police",true)==0){
			    format(RankName,40,"%s",copRank[rank]);
			}
			else{
				format(RankName,40,"%s",rankName[rank]);
			}
			format(string,256,"~b~Server~w~~n~Name: %s~n~Password: %s~n~Level: %d~n~Playing points: %d/%d~n~Days passed: %d~n~Playing hours: %d",name,password,level,playingpoints,floatround(level*1.8),days,hours);
			cstats[0][playerid] = TextDrawCreate(400,10+100,string);
			format(string,256,"~b~Pocket~w~~n~Drugs: %dg~n~Gold: %dcg~n~Fishes: %d~n~Muscles: %d~n~Phone: %d~n~Bombs: %d",drugs,gold,fish,muscles,phone,bomb[playerid]);
			cstats[1][playerid] = TextDrawCreate(400,70+110,string);

			format(string,256,"~b~Current Job~w~~n~Job: %s~n~Salary Rate: %.1f~n~Rank: %s~n~Next rank progress: %.1f%~n~Last duty: %s",job,salaryrate,RankName,progress,lasttime);
			cstats[2][playerid] = TextDrawCreate(400,130+120,string);
			format(string,256,"~b~Assets~w~~n~Houses: %d~n~Cars: %d~n~Shops: %d~n~Rooms: %d~n~Stars: %d/%d",house,cars,shops,rooms,shoes,sizeof(horseShoe));
			cstats[3][playerid] = TextDrawCreate(400,180+130,string);
			format(string,256,"~b~Mails~w~~n~Unread mails: %d~n~Total mails: %d",unread,read+unread);
			cstats[4][playerid] = TextDrawCreate(400,230+140,string);

			for(new i = 0;i < sizeof(cstats);i++){
				TextDrawUseBox(cstats[i][playerid], 1);
				TextDrawFont(cstats[i][playerid], 2);
				TextDrawSetShadow(cstats[i][playerid],0);
			    TextDrawSetOutline(cstats[i][playerid],1);
			    TextDrawBackgroundColor(cstats[i][playerid],0x000000FF);
			    TextDrawColor(cstats[i][playerid],0xFFFFFFFF);
			    TextDrawAlignment(cstats[i][playerid],1);
			    TextDrawBoxColor(cstats[i][playerid],0x000000AA);
			    TextDrawLetterSize(cstats[i][playerid],0.4,1.0);
				TextDrawShowForPlayer(playerid,cstats[i][playerid]);
			}
			cstaton[playerid] = 1;
		}
	}
	else if(strcmp("/help",cmd,true)==0){
	    cmd = strtok(cmdtext,idx);
/*	    if(!strlen(cmd)){
			sendMessage(playerid, " ",1);
			sendMessage(playerid,"| /o | /b | /wh | /sh | /report |  /admins  |  /changepassword  |" );
			sendMessage(playerid,"|  /changeskin  |  /givecash  | /consumedrugs  |  /closestcar  |");
			sendMessage(playerid,"|  /listmyhouses | /listmyrooms | /listmyshops  | /listmycars  |");
			sendMessage(playerid,"|  /bounty  | /eatfish  |  /findajob  |  /resign  | /myjob | /stats  |");
	    	sendMessage(playerid,"|  /checkmails  |  /mymails  |  /readmails  |  /trashmymails  |");
	    	sendMessage(playerid,"|  /call | /sms | /hold | /conference | /unhold | /sms2all |");
	    	sendMessage(playerid,"|  /balance | /withdraw  | /deposit | /goldrate | /givegold  |");
	    	sendMessage(playerid,"|  /tie | /untie  | /blindfold | /unblindfold | /pull  | /dropgun |");
			sendMessage(playerid,"|  /fillfuel  |  /transferfuel  |  /help action  |  /help car |");
			sendMessage(playerid,"|  /help shop  |  /help room  |  /help admin  |  /help house  |");
//			sendMessage(playerid,"|  /thanksto |");

		}
    	else{
   		    if(strcmp(cmd,"admin",true)==0){
				if(isAdminLevel(playerid,1)){
					sendMessage(playerid,"|  /check  |  /spectate  |",1);
					sendMessage(playerid,"|  /stopspectate  |  /freeze  |");
					sendMessage(playerid,"|  /unfreeze  |  /warn  |");
					sendMessage(playerid,"|  /a  |   /noooc   |");
					sendMessage(playerid,"|  /a  |   /starblock   |");

				}
				if(isAdminLevel(playerid,2)){
					sendMessage(playerid,"|  /slap  |",1);
					sendMessage(playerid,"|  /lift  |");
				}
				if(isAdminLevel(playerid,3)){
					sendMessage(playerid,"|  /kick  |",1);
					sendMessage(playerid,"|  /invisible  |");
				}
				if(isAdminLevel(playerid,4)){
					sendMessage(playerid,"|  /goto  |  /bring  |",1);
					sendMessage(playerid,"|  /ban  |  /ann  |",1);
				}
				if(isAdminLevel(playerid,5)){
				    sendMessage(playerid,"|  /setint  |  /setvw  |",1);
					sendMessage(playerid,"|  /crash  |  /changename |");
					sendMessage(playerid,"|  /payday  |");
				}
				if(isAdminLevel(playerid,6)){
					sendMessage(playerid,"|  /query  |  /addadmin  |",1);
					sendMessage(playerid,"|  /removeadmin  |  /setadminlvl  |");


				}
   		    }
   		    else if(strcmp(cmd,"action",true)==0){
   		    	sendMessage(playerid,"|  /me  |  /do  |",1);
   		    	sendMessage(playerid,"|  /dance  |  /handsup  |",1);
   		    	sendMessage(playerid,"|  /lol  |  /crossarms  |");
   		    	sendMessage(playerid,"|  /lay  |  /hide  | ");
   		    	sendMessage(playerid,"|  /wave  |  /smoke  | ");
   		    	sendMessage(playerid,"|  /chairsit  |  /getlost  | ");
   		    	sendMessage(playerid,"|  /groundsit |");
   		    }
   		    else if(strcmp(cmd,"car",true)==0){
   		    	sendMessage(playerid,"|  /eject  |  /park  |",1);
   		    	sendMessage(playerid,"|  /lock  |  /unlock  |");
   		    	sendMessage(playerid,"|  /sellcar  |");
   		    }
   		    else if(strcmp(cmd,"house",true)==0){
   		    	sendMessage(playerid,"|  /heal  |  /sellhouse  |",1);
   		    	sendMessage(playerid,"|  /saveguns  |  /loadguns  |");
   		    }
   		    else if(strcmp(cmd,"shop",true)==0){
   		    	sendMessage(playerid,"|  /collections  |  /pocket  |",1);
   		    	sendMessage(playerid,"|  /sellshop  |");
   		    }
   		    else if(strcmp(cmd,"room",true)==0){
   		    	sendMessage(playerid,"|  /myroom  |  /unrent  |",1);
   		    	sendMessage(playerid,"|  /saveguns  |  /loadguns  |");
   		    }
   		    else{
				sendMessage(playerid,"Usage: /help <action|car|house|shop|room|admin>",1);
				sendMessage(playerid,"Ex: /help car");
   		    }
   		}

	}

*/
	    if(strlen(cmd)){
			if(strcmp("chat",cmd,true)==0){
				sendMessage(playerid,"As this is a roleplay server using sa-mps general chat(using T)",1);
				sendMessage(playerid,"will limit your voice upto certain distance. Which means only");
				sendMessage(playerid,"players close to you will be able to hear you. More over T");
				sendMessage(playerid,"is only supposed to be used to talk something related to your");
				sendMessage(playerid,"character. For chats outside your character you will have to use");
				sendMessage(playerid,"/O which is ooc(out of chacacter) chat. If you want to chat");
				sendMessage(playerid,"something ooc with a person close to you ingame use /B. You can");
				sendMessage(playerid,"also use /SH to shout and /WH to whisper something in character.");
			}
			else if(strcmp("server",cmd,true)==0){
				sendMessage(playerid,"If ever you have found any player hacking or you got bugged",1);
				sendMessage(playerid,"or you got into a certain situation where you want to chat with");
				sendMessage(playerid,"an admin use /REPORT so that your message goes direct to the");
				sendMessage(playerid,"admins. To see a list of admims who are online you can use");
				sendMessage(playerid,"/ADMINS command. If at all you want to change your skin you");
				sendMessage(playerid,"can use /CHANGESKIN. To change your password /CHANGEPASSWORD.");
				sendMessage(playerid,"To view a list of thank holders type /THANKSTO.");
			}
			else if(strcmp("mailbox",cmd,true)==0){
				sendMessage(playerid,"Every house or room has its own mailbox. You receive mails about",1);
				sendMessage(playerid,"your job updates and property updates. To check your list of mails");
				sendMessage(playerid,"you can use /LISTMYMAILS, or to check your unread mails you can use");
				sendMessage(playerid,"/CHECKMAILS command. Then if you want to read any of your mails use");
				sendMessage(playerid,"/READMAIL command. To trash all your mails use /TRASHMYMAILS command.");
			}
			else if(strcmp("phone",cmd,true)==0){
				sendMessage(playerid,"You can also make phone calls to chat in character for long distances.",1);
				sendMessage(playerid,"To make a phone call use /CALL command. To hold the call in between you");
				sendMessage(playerid,"can use /HOLD command. To unhold the call from hold do /UNHOLD, to reject");
				sendMessage(playerid,"or hang the call use /HANG. You can also make conference calls using");
				sendMessage(playerid,"/CONFERENCE command in between a call. To send a text message to someone");
				sendMessage(playerid,"you can use /SMS. To send adverts to everyone online you can use /SMS2ALL");
				sendMessage(playerid,"feature which is a commercial command though. And also there are few special");
				sendMessage(playerid,"number such as 911 for police. 912 for medic. 913 for taxi. 914 for telephone");
				sendMessage(playerid,"exchange, where you can find other peoples number.");
			}
			else if(strcmp("bank",cmd,true)==0){
				sendMessage(playerid,"Everyone holds a bank account by default. To check your balance you need",1);
				sendMessage(playerid,"to be in a 24/7 which are assumed to have ATM's in them. Use /BALANCE to");
				sendMessage(playerid,"check your bank balance. Use /WITHDRAW to withdraw some amount from your");
				sendMessage(playerid,"bank balance. And /DEPOSIT to deposite some money from your pocket. Banks");
				sendMessage(playerid,"also gives you 6.0 percent interest to your bank balance everyday. ");
			}
			else if(strcmp("gold",cmd,true)==0){
				sendMessage(playerid,"Gold rates keep changing every day. You can make good money by trading gold.",1);
				sendMessage(playerid,"The technique is to purchase gold from gold dealers when gold rate is cheap");
				sendMessage(playerid,"and sell them away when gold rate is high. But it depends on your luck if");
				sendMessage(playerid,"gold rates go higher or lower after you purchase them. Its a wise persons");
				sendMessage(playerid,"trade play. To check todays gold rate use /GOLDRATE. To trade gold use");
				sendMessage(playerid,"/TRADEGOLD command. You can also use gold as a mediator of exchange to give");
				sendMessage(playerid,"gold use /GIVEGOLD command.");
			}
			else if(strcmp("misc",cmd,true)==0){
				sendMessage(playerid,"To add a person as your bounty using /BOUNTY command. Use /EATFISH to eat",1);
				sendMessage(playerid,"fishes to increase your health anywhere. /STATS to check your game stats.");
				sendMessage(playerid,"/TIE to tie a person and /UNTIE to untie him. /BLINDFOLD to blindfold a");
				sendMessage(playerid,"person and /UNBLINDFOLD to unblindfold. /PULL to pull a tied person into");
				sendMessage(playerid,"your car. /EJECT to throw someone out of your car. /DROPGUN to drop the");
				sendMessage(playerid,"gun in your hand. /CB to use your cb radio.");
			}
			else if(strcmp("fuel",cmd,true)==0){
				sendMessage(playerid,"To re-fuel your car with petrol type /FILLFUEL command. To transfer fuel" ,1);
				sendMessage(playerid,"from one car to another car type /TRANSFERFUEL.");
			}
			else if(strcmp("roleplay",cmd,true)==0){
				sendMessage(playerid,"You can use /ME command to act as if you are doing some action. And",1);
				sendMessage(playerid,"/DO command to express the action you do. And here are a list of");
				sendMessage(playerid,"commands which animate your character /DANCE, /HANDSUP, /LOL, /LAY");
				sendMessage(playerid,"/CROSSARMS, /HIDE, /WAVE, /SMOKE, /CHAIRSIT, /GROUNDSIT, /GETLOST.");
			}
			else if(strcmp("car",cmd,true)==0){
				sendMessage(playerid,"Type /PARK at a parking slot to park your car. /LOCK to lock");
				sendMessage(playerid,"your closest car. /UNLOCK to unlock your closest car. /SELLCAR to");
				sendMessage(playerid,"sell your car to someone.");
			}
			else if(strcmp("house",cmd,true)==0){
				sendMessage(playerid,"Heal yourself to full health using /HEAL command. /SAVEGUNS to save your");
				sendMessage(playerid,"weapons. /LOADGUNS to load your weapons. /SPAWNHERE if you want to change");
				sendMessage(playerid,"your spawn position to this house. /SELLHOUSE to sell your house to someone.");
			}
			else if(strcmp("shop",cmd,true)==0){
				sendMessage(playerid,"To check the collection this session use /COLLECTIONS. To withdraw all",1);
				sendMessage(playerid,"that money into your pocket use /POCKET. To sell your shop to someone");
				sendMessage(playerid,"use /SELLSHOP command.");
			}
			else if(strcmp("room",cmd,true)==0){
				sendMessage(playerid,"Type /SAVEGUNS to save your guns into the current room. /LOADGUNS to load",1);
				sendMessage(playerid,"them back. Type /SPAWNHERE to change your spawn position to here. /MYROOM");
				sendMessage(playerid,"at the motel point to mark your room position incase you forgot. /UNRENT");
				sendMessage(playerid,"at the motel point to unrent from the motel.");
			}
			else if(strcmp("job",cmd,true)==0){
				sendMessage(playerid,"To view a list of your job commands and details use /MYJOB command. To",1);
				sendMessage(playerid,"resign from your job type /RESIGN. If you haven't found a job yet type");
				sendMessage(playerid,"/FINDAJOB to find a certain job.");
			}
			else if(strcmp("admin",cmd,true)==0){
				if(isAdminLevel(playerid,1)){
					sendMessage(playerid,"|  /check  |  /spectate  |",1);
					sendMessage(playerid,"|  /stopspectate  |  /freeze  |");
					sendMessage(playerid,"|  /unfreeze  |  /warn  |");
					sendMessage(playerid,"|  /a  |   /noooc   |");
					sendMessage(playerid,"|  /a  |   /starblock   |");

				}
				if(isAdminLevel(playerid,2)){
					sendMessage(playerid,"|  /slap  |",1);
					sendMessage(playerid,"|  /lift  |");
				}
				if(isAdminLevel(playerid,3)){
					sendMessage(playerid,"|  /kick  |  /invisible  |",1);
					sendMessage(playerid,"|  /mute  |  /unmute  |");

				}
				if(isAdminLevel(playerid,4)){
					sendMessage(playerid,"|  /goto  |  /bring  |",1);
					sendMessage(playerid,"|  /ban  |  /ann  |",1);
				}
				if(isAdminLevel(playerid,5)){
				    sendMessage(playerid,"|  /setint  |  /setvw  |",1);
					sendMessage(playerid,"|  /crash  |  /changename |");
					sendMessage(playerid,"|  /payday  |");
				}
				if(isAdminLevel(playerid,6)){
					sendMessage(playerid,"|  /query  |  /addadmin  |",1);
					sendMessage(playerid,"|  /removeadmin  |  /setadminlvl  |");
				}
			}

		}
		else{
			sendMessage(playerid,"Usage: /help <topic>",1);
			sendMessage(playerid,"Topics: server, chat, mailbox, phone, bank, gold");
			sendMessage(playerid,"fuel, roleplay, car, house, shop, room, job.");
		}
	}
	else{
		sendMessage(playerid,"Unknown Command.",1);
	}

	return 1;
}

stock getVehicleDriver( vehicleid ){
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i)){
	        if((GetPlayerVehicleID(i) == vehicleid) && (GetPlayerState(i) == PLAYER_STATE_DRIVER))
	            return i;
	    }
	}
	return -1;
}

new Float:taxiStart[MAX_PLAYERS][3];

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	if(isPoliceCar(vehicleid)){
	    if(ispassenger){
		    SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
	    }
	}
	if(isTaxi(vehicleid)){
		if(ispassenger){
			new d = getVehicleDriver(vehicleid);
			if(d != -1){
			    SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
				GetPlayerPos(playerid,taxiStart[playerid][0],taxiStart[playerid][1],taxiStart[playerid][2]);
			}
		}
	}
	if(isAmbulance(vehicleid)){
		if(ispassenger){
			new d = getVehicleDriver(vehicleid);
			if(d != -1){
			    SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
		   }
		}
	}
	if(GetVehicleModel(vehicleid)==469){ // sparrow
		if(ispassenger){
			new d = getVehicleDriver(vehicleid);
			if(d != -1){
			    SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
		   }
		}
		else{
		    GameTextForPlayer(playerid,"~r~This vehicle should be only used if requested by the police.",5000,5);
		}
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	if(isPoliceCar(vehicleid)){
	    if(!(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1)){
		    SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
	    }
	}
	if(isTaxi(vehicleid)){
		if(!isPlayerTaxiDriver(playerid)){
  			SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
		}
	}
	if(isAmbulance(vehicleid)){
		if(!isPlayerMedic(playerid)){
			SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
		}
	}
	if(isTaxi(vehicleid)){
		new d = getVehicleDriver(vehicleid);
		if((d != -1) && (d != playerid)){
		    new Float:l;
		    l = getPlayerDistanceFromPoint( playerid,taxiStart[playerid][0],taxiStart[playerid][1],taxiStart[playerid][2]);
			new fare = floatround(l) * 40 / 100;
			givePlayerMoney(playerid,-fare);
			givePlayerMoney(d,fare);
			format(string,256,"Your taxi fare is $%d, Distance: %fm.",fare,l);
			sendMessage(playerid,string,1);
			format(string,256,"Your earnings this session $%d, Distance: %fm.",fare,l);
			sendMessage(d,string,1);
		}
	}

	return 1;
}



public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	if(newstate == PLAYER_STATE_DRIVER){
	    new v = GetPlayerVehicleID(playerid);
	    vHud[playerid] = Create3DTextLabel(" ",COLOR_WHITE,0,0,0,1,0,0);
		Attach3DTextLabelToVehicle(vHud[playerid],v,0.5,1.5,-2);

	    if(isBuyCar(v)){
		    if(!isCarOwner(playerid,v)){
				for(new i = 0;i < MAX_PLAYERS;i++){
				    if(IsPlayerInVehicle(i,v)){
				        if(isCarOwner(i,v)){
				            if(GetPlayerState(i) != PLAYER_STATE_DRIVER){
								return 1;
							}
				        }
				    }
				}
                freezePlayer(playerid);
		        ShowMenuForPlayer(carExitMenu,playerid);
		        GameText(playerid,"You dont have the keys.", 5000);
		    }
		}
		if(isPlane(v)){
		    GivePlayerWeapon(playerid,46,1);
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER){
	    Delete3DTextLabel(vHud[playerid]);
	}
	else if(newstate == PLAYER_STATE_PASSENGER){
	    new vehicleid = GetPlayerVehicleID(playerid);
		if(isAmbulance(vehicleid)){
			new d = getVehicleDriver(vehicleid);
			if(d != -1){
				heal(playerid);
			}
		}
		if(isPlane(vehicleid)){
		    GivePlayerWeapon(playerid,46,1);
		}
	}

	return 1;
}

forward heal(playerid);
public heal(playerid){
	if(IsPlayerConnected(playerid)){
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsPlayerInAnyVehicle(playerid)){
			if(isAmbulance(vehicleid)){
				new Float:h;
				GetPlayerHealth(playerid,h);
				if(h < 100){
					SetPlayerHealth(playerid,h+1);
					SetTimerEx("heal",100,0,"i",playerid);
				}
				else{
					new d = getVehicleDriver(vehicleid);
					if(d != -1){
					    givePlayerMoney(playerid,100);
						GameText(playerid,"~g~+$100",3000);
					}
				}
			}
		}
	}
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if((GetPlayerVirtualWorld(playerid) == 666) && (GetPlayerInterior(playerid)== 7)){
		GameText(playerid,"You shouldnt move from the spot.",2000);
		SetPlayerPos(playerid,300.0833,-134.3030,1004.0625);
		SetPlayerInterior(playerid,7);
		SetPlayerFacingAngle(playerid,108.6664);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
new airport[MAX_PLAYERS];
public OnPlayerEnterRaceCheckpoint(playerid)
{
	new v = GetPlayerVehicleID(playerid);
	if(GetPlayerVirtualWorld(playerid) == 666){
//	    SetPlayerVirtualWorld(playerid,0);
		RemovePlayerFromVehicle(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		spawnPlayer(playerid);

	    new Float:h;
	    GetVehicleHealth(v,h);
//	    SetVehicleHealth(v,1000);
		if(v == taxi){
		    if(h >= 950){
				setJob( playerid , 1 );
			}
			else{
				format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job ='Taxi Driver' AND userid = '%s'",getName(playerid));
				mysql_query2(string);
				return sendMessage(playerid,"Too much damage to the taxi, you failed the test.",1);
			}
		}
		if(v == plane){
		    if(h >= 800){
                setJob( playerid , 2 );
			}
			else{
				format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job ='Pilot' AND userid = '%s'",getName(playerid));
				mysql_query2(string);
				return sendMessage(playerid,"Too much damage to the plane, you failed the test.",1);
			}
		}
		if(v == ambulance){
		    if(h >= 500){
                setJob( playerid , 3 );
			}
			else{
				format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job ='Medic' AND userid = '%s'",getName(playerid));
				mysql_query2(string);
				return sendMessage(playerid,"Too much damage to the ambulance, you failed the test.",1);
			}
		}
		if(v == sentinel){
            setJob( playerid , 6 );
		}
		sendMessage(playerid,"Congrats! You have got the job.",1);
		sendMessage(playerid,"You have successfully passed the test.");
	}
	else if(isPlane(v)){
        freezePlayer(playerid);
		if(airport[playerid] == 0){
			SetPlayerRaceCheckpoint(playerid,2,1477.8005,1476.4574,10.8203,1477.8005,1476.4574,10.8203-10.0,50);
            takeBack(playerid,0);
		}
		else if(airport[playerid] == 1){
			SetPlayerRaceCheckpoint(playerid,2,1389.4399,1471.4127,10.8203,1389.4399,1471.4127,10.8203-10.0,50);
            airport[playerid] = 2;
			takeBack(playerid,1);
		}
		else if(airport[playerid] == 2){
			DisablePlayerRaceCheckpoint(playerid);
			unfreezePlayer(playerid);
			SetVehicleHealth(GetPlayerVehicleID(playerid),999);
		    jobDuty(playerid); // pilot
		}
	}
	return 1;
}

forward takeBack(playerid,from);
public takeBack(playerid,from){
	if(IsPlayerConnected(playerid)){
		static five[MAX_PLAYERS];
		five[playerid]++;
		if(five[playerid] == 1){
		    sendMessage(playerid,"Unloading passengers, please wait...",1);
			SetTimerEx("takeBack",10000,0,"ii",playerid,from);
		}
		else if(five[playerid] == 2)
		{
		    sendMessage(playerid,"Unloading goods and laggages, please wait...");
			SetTimerEx("takeBack",5000,0,"ii",playerid,from);
		}
		else if(five[playerid] == 3)
		{
		    sendMessage(playerid,"Checking fuel status, please wait...");
			SetTimerEx("takeBack",5000,0,"ii",playerid,from);
		}
		else if(five[playerid] == 4)
		{
		    sendMessage(playerid,"Checking flight health condition, please wait...");
			SetTimerEx("takeBack",5000,0,"ii",playerid,from);
		}
		else if(five[playerid] == 5){
			if(from == 0)
				sendMessage(playerid,"Source: Los Santos Airport  |  Destination: Las Venturas Airport.",1);
			if(from == 1)
				sendMessage(playerid,"Source: San Fierro Airport  |  Destination: las Venturas Airport.",1);
			airport[playerid] = 2;
			SetVehicleHealth(GetPlayerVehicleID(playerid),999);
			unfreezePlayer(playerid);
			five[playerid] = 0;
		}
	}
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	new tmp[256],idx = 0;
	tmp = strtok(cmd,idx);
	if(strcmp(tmp,"cars",true)==0){
	    printf("START:");
	    new c = 0;
	    for(new i = 0;i < MAX_VEHICLES;i++){
	        if(isTaxi(i)){}
	        else if(isBoat(i)){}
            else if(isPlane(i)){}
            else if(isPetrolTruck(i)){}
            else if(isAmbulance(i)){}
            else if(isPoliceCar(i)){}
            else{
                new Float:x,Float:y,Float:z,Float:r;
                c++;
                GetVehiclePos(i,x,y,z);
                GetVehicleZAngle(i,r);
                format(string,256,"AddStaticVehicleEx(%d,%f,%f,%f,%f,-1,-1) // %d",GetVehicleModel(i),x,y,z,r,c);
				printf(string);
            }
	    }
	    printf(":END");
	}
	if(strcmp(tmp,"drop",true)==0)
	{
		tmp = strtok(cmd,idx);
		if(!strlen(tmp))
		    return printf("DROP <TABLE NAME>");
		format(string,256,"DROP TABLE %s",tmp);
		if(mysql_query2(string)){
		    mysql_free_result();
		    printf("DONE");
		}
		else
  			printf("FAILED");
	}
	if(strcmp(tmp,"clear",true)==0)
	{
        mysql_query2("DROP TABLE register");
        mysql_query2("DROP TABLE spawns");
        mysql_query2("DROP TABLE stats");
        mysql_query2("DROP TABLE houses");
        mysql_query2("DROP TABLE cars");
        mysql_query2("DROP TABLE mails");
        mysql_query2("DROP TABLE bizes");
        mysql_query2("DROP TABLE weapons");
        mysql_query2("DROP TABLE bank");
        mysql_query2("DROP TABLE statements");
        mysql_query2("DROP TABLE levels");
        mysql_query2("DROP TABLE jobs");
        mysql_query2("DROP TABLE phone");
        mysql_query2("DROP TABLE donations");
        mysql_query2("DROP TABLE horseshoes");
        mysql_query2("DROP TABLE crimes");
        mysql_query2("DROP TABLE admins");
        mysql_query2("DROP TABLE drugs");
        mysql_query2("DROP TABLE globalstats");
		printf("DONE");
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	if(!existPlayer(playerid))
	    return 0;
	new skin = GetPlayerSkin(playerid);
/*	if((skin >= 280) && (skin <= 283)){
	    if(!isPlayerPolice(playerid)){
	        GameText(playerid,"This skin is only for cops.",1000);
	        return 0;
	    }
	    if(getPlayerJobRank(playerid) <= 1){
	        GameText(playerid,"You are not a approved as a cop yet.",1000);
	        return 0;
	    }
	}
*/	format(string,256,"UPDATE stats SET skin = %d WHERE userid = '%s'",skin,getName(playerid));
	mysql_query2(string);
	mysql_free_result();

	new Float:x,Float:y,Float:z,Float:r;


	format(string,256,"SELECT x,y,z,r FROM spawns WHERE userid = '%s'",getName(playerid));
	if(mysql_query2(string))
	{
		mysql_store_result();
		mysql_fetch_field_num(0,string);
		x = floatstr(string);
		mysql_fetch_field_num(1,string);
		y = floatstr(string);
		mysql_fetch_field_num(2,string);
		z = floatstr(string);
		mysql_fetch_field_num(3,string);
		r = floatstr(string);
		mysql_free_result();
	}
	else
	    printf("error at requestspawn");
	SetSpawnInfo(playerid,0,skin,x,y,z,r,0,0,0,0,0,0);

	GameText(playerid,"Your skin has been updated",2000);
	if(player[playerid][LoggedIn])
	{
	    return 1;
	}
	return 0;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

forward restoreHParkPickup( parkid );
public restoreHParkPickup( parkid )
{
	DestroyPickup(hParkId[parkid]);
	hParkId[parkid] = CreatePickup(0,14,houses[parkid][parkx],houses[parkid][parky],houses[parkid][parkz]);
}
forward restoreParkPickup( parkid );
public restoreParkPickup( parkid )
{
	DestroyPickup(parkId[parkid]);
	parkId[parkid] = CreatePickup(0,14,parking[parkid][0],parking[parkid][1],parking[parkid][2]);
}

stock GetClosestVehicle(playerid)
{
	new v = -1;
	new Float:dis = 99999.99;
	for (new i=0;i<MAX_VEHICLES;i++){
	    new Float:x,Float:y,Float:z;
	    GetVehiclePos(i,x,y,z);
		new Float:dis2 = getPlayerDistanceFromPoint(playerid,x,y,z);
		if(dis2 < dis)
		{
			dis = dis2;
			v = i;
		}
	}
	return v;
}
stock GetClosestVehicleOtherThan(playerid,vehicleid)
{
	new v = -1;
	new Float:dis = 99999.99;
	for (new i=0;i<MAX_VEHICLES;i++){
	    if(i != vehicleid){
		    new Float:x,Float:y,Float:z;
		    GetVehiclePos(i,x,y,z);
			new Float:dis2 = getPlayerDistanceFromPoint(playerid,x,y,z);
			if(dis2 < dis)
			{
				dis = dis2;
				v = i;
			}
		}
	}
	return v;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	player[playerid][LastPickup] = pickupid;
	if(pickupid == racePickup){

	}
	for(new i = 0;i < sizeof(horseShoe);i++){
	    if(horseShoe[i] == pickupid){
			format(string,256,"SELECT shoe%d FROM horseshoes WHERE userid = '%s'",i,getName(playerid));
			mysql_query2(string);
			mysql_store_result();
			new found = mysql_fetch_int();
			mysql_free_result();
			if(!found){
				format(string,256,"UPDATE horseshoes SET shoe%d = 1 WHERE userid = '%s'",i,getName(playerid));
				mysql_query2(string);
				new ct = 0;
				for(new j = 0;j < sizeof(horseShoe);j++){
					format(string,256,"SELECT shoe%d FROM horseshoes WHERE userid = '%s'",j,getName(playerid));
					mysql_query2(string);
					mysql_store_result();
					found = mysql_fetch_int();
					mysql_free_result();
					if(found){
						ct+=1;
					}
				}
				if(ct < 50){
					format(string,256,"Stars found %d out of %d",ct,sizeof(horseShoe)); // 1|8
					GameTextForPlayer(playerid,string,5000,5);
				}
				else{
					format(string,256,"SELECT blocked FROM horseshoes WHERE userid = '%s'",getName(playerid));
					mysql_query2(string);
					mysql_store_result();
					new blocked = mysql_fetch_int();
					mysql_free_result();
					if(blocked == 1){
						sendMessage(playerid,"Congrats you have found all the stars!",1);
						sendMessage(playerid,"But you wont be getting any prizes because");
						sendMessage(playerid,"our server detected few unintentional messages");
						sendMessage(playerid,"from your client which we probably assume as");
						sendMessage(playerid,"hacks, so no prizes for hack suspects. Sorry.");
					    return 1;
					}
					PlayerPlaySound(playerid,1149,0,0,0);
					GameTextForPlayer(playerid,"CONGRATS! You just found all the ~g~stars!",5000,5);
					format(string,256,"~g~%s~w~ has found all the ~g~stars!",getName(playerid));
					for(new j = 0;j < MAX_PLAYERS;j++){
					    if(IsPlayerConnected(j) && j != playerid){
					        GameTextForPlayer(j,string,3000,5);
					    }
					}
					givePlayerMuscles(playerid,50);
					givePlayerDrugs(playerid,50);
					givePlayerGold(playerid,5000);
					givePlayerFish(playerid,50);
					for(new j = 0;j < 50;j++){
						addPlayerPlayingPoint( playerid );
					}
					sendMessage(playerid,"You have gained +50 muscles!",1);
					sendMessage(playerid,"You have gained +50 drugs!");
					sendMessage(playerid,"You have gained +50 gold!");
					sendMessage(playerid,"You have gained +50 fishes!");
					sendMessage(playerid,"You have gained +50 playing points!");
				}
			}
	        return 1;
	    }
	}
	if(pickupid == gymJogPickup){
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(gym[i] == 1){
		        return 1;
		    }
		}
        freezePlayer(playerid);
	    gym[playerid] = 1;
	    SetPlayerPos(playerid,758.3637,-63.5939,1000.653);
	    SetPlayerFacingAngle(playerid,181.1083);
	    SetPlayerCameraPos(playerid,758.3637,-63.5939-4,1000.653-0.3);
	    SetPlayerCameraLookAt(playerid,758.3637,-63.5939,1000.653);
	    ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",5,1,0,0,1,0);
		GameText(playerid,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
//		sendMessage(playerid,"Type /getoff when you feel enough.",1);
	    return 1;
	}
	if(pickupid == gymPedalPickup){
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(gym[i] == 2){
		        return 1;
		    }
		}
        freezePlayer(playerid);
	    gym[playerid] = 2;
	    SetPlayerPos(playerid,775.0074,-69.2189,1000.6541);
	    SetPlayerFacingAngle(playerid,87.1076);
	    SetPlayerCameraPos(playerid,775.0074+2,-69.2188,1000.6541+2);
	    SetPlayerCameraLookAt(playerid,775.0074,-69.2188,1000.6541);
	    ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",5,0,0,0,1,0);
		GameText(playerid,"~w~Tap your ~r~~k~~PED_FIREWEAPON~~w~ and ~r~~k~~PED_SPRINT~ ~w~to pedal.",5000);
//		sendMessage(playerid,"Type /getoff when you feel enough.");
	    return 1;
	}
	if(pickupid == gymBoxPickup){

	    gym[playerid] = 3;
	    SetPlayerPos(playerid,771.8531,-61.9309,1000.5781);
	    SetPlayerFacingAngle(playerid,285.0892);
	    SetPlayerCameraPos(playerid,776.2925,-58.1337,1000.7184+4);
	    SetPlayerCameraLookAt(playerid,773.2988,-63.2749,1000.6622);
		SetPlayerFightingStyle(playerid,5);
		GameText(playerid,"~w~Hold your~r~ ~k~~PED_LOCK_TARGET~~w~ and hit ~r~~k~~PED_SPRINT~~w~ to punch.",5000);
//		sendMessage(playerid,"Type /getoff when you feel enough.");
	    return 1;
	}


	if(bombPickup == pickupid){
	    if(isPlayerHitman(playerid)){
	        bomb[playerid] = 10;
	        new w,a;
			GetPlayerWeaponData(playerid,6,w,a);
			if(w == 34){
			    if(a < 20){
			        GivePlayerWeapon(playerid,34,20-a);
			    }
			}
			else{
				GivePlayerWeapon(playerid,34,20);
			}

			GameText(playerid,"Weaponry Collected",3000);
	    }
	    else{
	        GameText(playerid,"You are not a Hitman",3000);
	    }
	    return 1;
	}
	if(weaponPickup == pickupid){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
			GivePlayerWeapon(playerid,32,9999999999);
			GivePlayerWeapon(playerid,26,9999999999);
			GameText(playerid,"Weaponry Collected",3000);
	    }
	    return 1;
	}
	if(dutyPickup == pickupid){
	    if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
			new skin = GetPlayerSkin(playerid);
			switch(skin){
			    case 280:{
			   		SetPlayerSkin(playerid,281);
			    }
			    case 281:{
			   		SetPlayerSkin(playerid,282);
			    }
			    case 282:{
			   		SetPlayerSkin(playerid,283);
			    }
			    case 283:{
			   		SetPlayerSkin(playerid,284);
			    }
			    case 284:{
			   		SetPlayerSkin(playerid,288);
			    }
			    case 288:{
					GameText(playerid,"Off duty",3000);
					format(string,256,"SELECT skin FROM stats WHERE userid = '%s'",getName(playerid));
					mysql_query2(string);
					mysql_store_result();
					skin = mysql_fetch_int();
					mysql_free_result();
			   		SetPlayerSkin(playerid,skin);
			    }
			    default:{
			        SetPlayerSkin(playerid,280);
					GameText(playerid,"On duty",3000);
			    }
			}
	    }
	    return 1;
	}
	if((planePickup1 == pickupid)){
		if(isPlayerPilot(playerid)){
			if(getVehicleDriver(plane1)==-1)
			{
			    format(string,256,"SELECT TIMESTAMPDIFF(MINUTE,lasttime,NOW()) FROM jobs WHERE job = 'Pilot' AND userid= '%s'",getName(playerid));
				mysql_query2(string);
				mysql_store_result();
				new mins = mysql_fetch_int();
				mysql_free_result();
				if(mins >= 30){
		            airport[playerid] = 0;
					PutPlayerInVehicle(playerid,plane1,0);
					SetPlayerRaceCheckpoint(playerid,0,1753.3757,-2593.7380,13.5469,1753.3757,-2593.7380,13.5469-10.0,50);
					sendMessage(playerid,"Source: Las Venturas Airport  |  Destination: Los Santos Airport.",1);
				}
				else{
				    sendMessage(playerid,"You cant make a flight so often.",1);
				}
			}
		}
		else{
		    GameText(playerid,"You are not a pilot",3000);
		}
		return 1;
	}
	if((planePickup2 == pickupid)){
		if(isPlayerPilot(playerid)){
			if(getVehicleDriver(plane2)==-1)
			{
			    format(string,256,"SELECT TIMESTAMPDIFF(MINUTE,lasttime,NOW()) FROM jobs WHERE job = 'Pilot' AND userid= '%s'",getName(playerid));
				mysql_query2(string);
				mysql_store_result();
				new mins = mysql_fetch_int();
				mysql_free_result();
				if(mins >= 30){
	   	            airport[playerid] = 1;
					PutPlayerInVehicle(playerid,plane2,0);
					SetPlayerRaceCheckpoint(playerid,0,-1291.4720,200.4893,14.1484,-1291.4720,200.4893,14.1484-10.0,50);
					sendMessage(playerid,"Source: Las Venturas Airport  |  Destination: San Fierro Airport.");
				}
				else{
				    sendMessage(playerid,"You cant make a flight so often.",1);
				}
			}
		}
		else{
		    GameText(playerid,"You are not a pilot",3000);
		}
		return 1;
	}

	if(pickupid == joinTaxiDriverPickup){
	    if(isPlayerTaxiDriver(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+1,0,"Job","\
	    Job Name: Taxi Driver\n\
	    Salary Rate: 2.0\n\
	    Ranks: 10\n\
		Special Vehicle: Yes\n\
		Special Weaponary: No\n\
		Paycheck dependent: No\n\
		Test: Yes\n\
		Type: Official"
		,"Join","Cancel");
	}
	else if(pickupid == joinGoldMinerPickup){
	    if(isPlayerGoldMiner(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+4,0,"Job","\
	    Job Name: Gold Miner\n\
	    Salary Rate: 1.7\n\
	    Ranks: 10\n\
		Special Vehicle: No\n\
		Special Weaponary: No\n\
		Paycheck dependent: No\n\
		Test: No\n\
		Type: Official"
		,"Join","Cancel");
	}
	else if(pickupid == joinFishermanPickup){
	    if(isPlayerFisherman(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+7,0,"Job","\
	    Job Name: Fisherman\n\
	    Salary Rate: 1.5\n\
	    Ranks: 10\n\
		Special Vehicle: Yes\n\
		Special Weaponary: No\n\
		Paycheck dependent: NO\n\
		Test: No\n\
		Type: Official"
		,"Join","Cancel");
	}
	else if(pickupid == joinPilotPickup){
	    if(isPlayerPilot(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+2,0,"Job","\
	    Job Name: Pilot\n\
	    Salary Rate: 3.4\n\
	    Ranks: 10\n\
		Special Vehicle: Yes\n\
		Special Weaponary: No\n\
		Paycheck dependent: Yes\n\
		Test: Yes\n\
		Type: Official"
		,"Join","Cancel");

	}
	else if(pickupid == joinMedicPickup){
	    if(isPlayerMedic(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+3,0,"Job","\
	    Job Name: Medic\n\
	    Salary Rate: 1.4\n\
	    Ranks: 10\n\
		Special Vehicle: Yes\n\
		Special Weaponary: No\n\
		Paycheck dependent: Yes\n\
		Test: Yes\n\
		Type: Official","Join","Cancel");
	}
	else if(pickupid == joinFuelSupplierPickup){
	    if(isPlayerFuelSupplier(playerid))
	        return 1;
	}
	else if(pickupid == joinDrugDealerPickup){
	    if(isPlayerDrugDealer(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+6,0,"Job","\
	    Job Name: Drug Dealer\n\
	    Salary Rate: 1.4\n\
	    Ranks: 10\n\
		Special Vehicle: No\n\
		Special Weaponary: No\n\
		Paycheck dependent: No\n\
		Test: Yes\n\
		Type: Unofficial","Join","Cancel");
	}

	else if(pickupid == joinMechanicPickup){
	    if(isPlayerMechanic(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+8,0,"Job","\
	    Job Name: Mechanic\n\
	    Salary Rate: 2.6\n\
	    Ranks: 10\n\
		Special Vehicle: No\n\
		Special Weaponary: No\n\
		Paycheck dependent: No\n\
		Test: No\n\
		Type: Official","Join","Cancel");
	}
	else if(pickupid == joinHitmanPickup){
	    if(isPlayerHitman(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+9,0,"Job","\
	    Job Name: Hitman\n\
	    Salary Rate: 1.9\n\
	    Ranks: 10\n\
		Special Vehicle: No\n\
		Special Weaponary: Yes\n\
		Paycheck dependent: No\n\
		Test: Yes\n\
		Type: Unofficial","Join","Cancel");
	}
	else if(pickupid == joinPolicePickup){
	    if(isPlayerPolice(playerid))
	        return 1;
	    ShowPlayerDialog(playerid,JOB_DIALOG_IDS+11,0,"Job","\
	    Job Name: Police\n\
	    Salary Rate: 2.6\n\
	    Ranks: 10\n\
		Special Vehicle: Yes\n\
		Special Weaponary: Yes\n\
		Paycheck dependent: Yes\n\
		Test: Yes\n\
		Type: Official","Join","Cancel");
	}

	for(new i = 0;i < sizeof(carDealerShip) && carDealerShip[i][pickup];i++){
		if(pickupid == carDealerShip[i][pickup]){
			format(string,256,"%s ( $%d )\n%s ( $%d )\n%s ( $%d )\n%s ( $%d )\n%s ( $%d )",
			VehicleNames[carDealerShip[i][carslist][0]-400],carDealerShip[i][carscost][0],
			VehicleNames[carDealerShip[i][carslist][1]-400],carDealerShip[i][carscost][1],
			VehicleNames[carDealerShip[i][carslist][2]-400],carDealerShip[i][carscost][2],
			VehicleNames[carDealerShip[i][carslist][3]-400],carDealerShip[i][carscost][3],
			VehicleNames[carDealerShip[i][carslist][4]-400],carDealerShip[i][carscost][4]
			);
			ShowPlayerDialog(playerid,CDS_DIALOGS_IDS+i,2,"Car Dealership",string,"Ok","Cancel");
			return 1;
		}
	}

	for(new i = 0;i < sizeof(motelId);i++){
	    if(motelId[i] == pickupid){
			for(new j = 1;j < sizeof(motel)&& imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				new name[23];
				name = getName(playerid);
				if(strcmp(name,string,true)==0){
				    GameText(playerid,"/myroom",3000);
				    return 1;
				}
			}
			for(new j = 1;j < sizeof(motel)&& imotels(i,j,houseno);j++){
				format(string,256,"SELECT owner FROM houses WHERE houseno = %d",imotels(i,j,houseno));
				mysql_query2(string);
				mysql_store_result();
				mysql_fetch_row(string);
				mysql_free_result();
				if(strcmp("NONE",string,true)==0){
				    format(string,256,"\
					Description: Rooms are available!\n\
					You can rent and spawn here.\n\n\
					Deposit: $%d\nRent: $%d/day",fmotels(i,0,cost)*10,fmotels(i,0,cost));
					ShowPlayerDialog(playerid,MOTEL_DIALOG_IDS+i*100+j,0,"Motel",string,"Rent","Cancel");
					SetPlayerPos(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz));

				    return 1;
				}
			}
			GameText(playerid,"No rooms available.",3000);
       	    return 1;
	    }
	}



	for(new i = 0;i < sizeof(parkId);i++)
	{
	    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	    if(parkId[i] == pickupid)
	    {
	        SetTimerEx("restoreParkPickup",5000,0,"i",i);
			new v = GetPlayerVehicleID(playerid);
			if(carId[v] != i){
				if(isBuyCar(v))
					GameText(playerid,"~p~/park",2000);
		    }
		    else{
		    	GameText(playerid,"This is your current parking slot",2000);
		    }
		    return 1;
	    }
	}

	for(new i = 0;i < sizeof(hParkId);i++)
	{
	    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	    if(hParkId[i] == pickupid)
	    {
	        SetTimerEx("restoreHParkPickup",5000,0,"i",i);
			new v = GetPlayerVehicleID(playerid);
			if(carId[v] != i+1000){
				if(isBuyCar(GetPlayerVehicleID(playerid)))
		        	GameText(playerid,"~b~/park",2000);
				else
						GameText(playerid,"You can only park buycars",3000);
		   	}
		   	else{
		   		GameText(playerid,"This is your current parking slot",2000);
		   	}
		   	return 1;
   		}
	}
	for(new i = 0;i < sizeof(houses);i++){
		if(houseId[i]==pickupid)
		{
		    format(string,256,"SELECT owner FROM houses WHERE houseno = %d",houses[i][houseno]);
		    mysql_query2(string);
		    mysql_store_result();
		    mysql_fetch_row(string);
		    mysql_free_result();
		    if(strcmp("NONE",string,true)==0)
			{
				SetPlayerPos(playerid,houses[i][inx],houses[i][iny],houses[i][inz]);
				SetPlayerInterior(playerid,houses[i][interior]);
				format(string,256,"Description: \
				This house is for sale, you can \n\
				purchase this house and	spawn here \n\
				from next time. It also got a parking \n\
				lot with it. You can save your weapons \n\
				in here too.\n\
				\nHouse #: %d\n\nCost: $%d",houses[i][houseno],houses[i][cost]);
				ShowPlayerDialog(playerid,HOUSE_DIALOG_IDS+i,0,"House",string,"Purchase","Cancel");
		    }
		    else if(strcmp(getName(playerid),string,true)==0)
		    {
			    SetPlayerPos(playerid,houses[i][inx],houses[i][iny],houses[i][inz]);
			    SetPlayerInterior(playerid,houses[i][interior]);
			    SetPlayerVirtualWorld(playerid,houses[i][houseno]);
			    sendMessage(playerid,"Type /leave to leave the house.",1);
		    }
		    else
		    {
				format(string,256,"House Owner: %s",string);
				GameText(playerid,string,10000);
		    }
		    return 1;
		}
	}
	for(new i = 0;i < sizeof(bizes);i++){
		if(bizes[i][infopickup] == pickupid)
		{
		    format(string,256,"SELECT owner FROM bizes WHERE bizno = %d",bizes[i][bizno]);
		    mysql_query2(string);
		    mysql_store_result();
		    mysql_fetch_row(string);
		    mysql_free_result();
		    if(strcmp("NONE",string,true)==0)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
				SetPlayerPos(playerid,x+1,y+1,z);
				format(string,256,"Description: \
				This shop is for sale, You can purchase this \n\
				and all the money players spend in this will be\n\
				yours.\n\
				\nShop #: %d\n\nCost: $%d",bizes[i][bizno],bizes[i][cost]);
				ShowPlayerDialog(playerid,BIZES_DIALOG_IDS+i,0,"Shop",string,"Purchase","Cancel");
		    }
		    else
		    {
				format(string,256,"Shop Owner: %s",string);
				GameText(playerid,string,10000);
		    }
		    return 1;
		}
	}


	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{

	new Menu:current = GetPlayerMenu(playerid);
	if(current == carExitMenu){
		ShowMenuForPlayer(carExitMenu,playerid);
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:current = GetPlayerMenu(playerid);
	if(current == carExitMenu){
		unfreezePlayer(playerid);
		RemovePlayerFromVehicle(playerid);
	}
	ShowMenuForPlayer(carExitMenu,playerid);
	HideMenuForPlayer(carExitMenu,playerid);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	if(newinteriorid == 0){
	    for(new i = 0;i < MAX_PLAYERS;i++){
  	        if(IsPlayerConnected(i)){
		    	SetPlayerMarkerForPlayer( playerid , i, GetPlayerColor( i ) );
		    }
		}
	}
	if(oldinteriorid == 0){
	    for(new i = 0;i < MAX_PLAYERS;i++){
	        if(IsPlayerConnected(i)){
			    SetPlayerMarkerForPlayer( playerid , i, ( GetPlayerColor( i ) & 0xFFFFFF00 ) );
			}
		}
	}
	if((oldinteriorid == 0) && (!IsPlayerInAnyVehicle(playerid))){
		for(new i = 0;i < sizeof(bizes);i++){
		    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 5){
    			SetPlayerVirtualWorld(playerid,i+1);
				format(string,256,"~b~Shop# %d",bizes[i][bizno]);
				GameTextForPlayer(playerid,string,3000,1);
				break;
			}
		}
	}
	else if((oldinteriorid == 0) && (IsPlayerInAnyVehicle(playerid))){
		for(new i = 0;i < sizeof(bizes);i++){
		    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 20){
    			SetPlayerVirtualWorld(playerid,i+1);
    			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),i+1);
				format(string,256,"~b~Shop# %d",bizes[i][bizno]);
				GameTextForPlayer(playerid,string,3000,1);
				break;
			}
		}
	}
	if(newinteriorid == 0){
		for(new i = 0;i < sizeof(houses);i++){
			if((houseId[i]==player[playerid][LastPickup]) && (GetPlayerVirtualWorld(playerid)==houses[i][houseno] )){
			    new Float:x,Float:y,Float:z;
			    GetPlayerPos(playerid,x,y,z);
			    SetTimerEx("SetPos",1000,0,"ifffi",playerid,x,y,z,oldinteriorid);
			    return 1;
			}
		}
	    if(round[playerid] > 1){
			sendMessage(playerid,"Your gym fees of $150 has been collected.",1);
			givePlayerMoney(playerid,-150);
			round[playerid] = 1;
			gym[playerid] = 0;
			addGlobalStats(playerid,"gym",150);
		}
		SetPlayerVirtualWorld(playerid,0);
		if(IsPlayerInAnyVehicle(playerid)){
		    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),0);
		}
	}

	return 1;
}

forward SetPos( playerid, Float:x, Float:y, Float:z, interiorid );
public SetPos( playerid, Float:x, Float:y, Float:z, interiorid ){
    SetPlayerPos(playerid,x,y,z);
    SetPlayerInterior(playerid,interiorid);
}
forward lowGym( playerid );
public lowGym( playerid )
{
	if(gym[playerid] == 1){
		ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",1,1,0,0,1,0);
	}
	else if(gym[playerid] == 2){
		ApplyAnimation(playerid,"GYMNASIUM","gym_bike_pedal",1,1,0,0,1,0);
	}
	gymCheck[playerid] = SetTimerEx("lowerGym",3000,0,"i",playerid);
}
forward lowerGym( playerid );
public lowerGym( playerid )
{
	if(gym[playerid] == 1){
		ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",1,1,0,0,1,0);
	}
	else if(gym[playerid] == 2){
		ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",1,1,0,0,1,0);
	}
	gymCheck[playerid] = SetTimerEx("stopGym",3000,0,"i",playerid);
}
forward stopGym( playerid );
public stopGym( playerid )
{
	if(gym[playerid] == 1){
		ApplyAnimation(playerid,"GYMNASIUM","gym_tread_tired",1,1,0,0,1,0);
	}
	else if(gym[playerid] == 2){
		ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",1,1,0,0,1,0);
	}
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

	if(IsPlayerNPC(playerid)){
		return 1;
	}

//	hunger[playerid] += 0.03;

	if(cstaton[playerid] >= 2 && cstaton[playerid] <= 8){
		if(newkeys == KEY_SECONDARY_ATTACK){
			switch(cstaton[playerid]-2){
			    case 0:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[0]);
					TextDrawShowForPlayer(playerid,tut[1]);
//					sendMessage(playerid,"[     2/7]");
			    }
			    case 1:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[1]);
					TextDrawShowForPlayer(playerid,tut[2]);
//					sendMessage(playerid,"[    3/7]");
			    }
/*			    case 2:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[2]);
					TextDrawShowForPlayer(playerid,tut[3]);
//					sendMessage(playerid,"[   4/7]");
			    }
			    case 3:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[3]);
					TextDrawShowForPlayer(playerid,tut[4]);
///					sendMessage(playerid,"[  5/7]");
			    }
			    case 4:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[4]);
					TextDrawShowForPlayer(playerid,tut[5]);
//					sendMessage(playerid,"[ 6/7]");
			    }
			    case 5:{
			    	cstaton[playerid]++;
				    TextDrawHideForPlayer(playerid,tut[5]);
					TextDrawShowForPlayer(playerid,tut[6]);
//					sendMessage(playerid,"[7/7]");
			    }
*/			    case 2:{
				    TextDrawHideForPlayer(playerid,tut[2]);
					cstaton[playerid] = 0;
					closestCar[playerid] = 2;
					TogglePlayerControllable(playerid,1);
					sendMessage(playerid,"You can now use the same login info at our forums.");
					sendMessage(playerid,"You can check your stats at http://stagesetlv.com/ucp");
					sendMessage(playerid,"Type /changeskin to change your skin.");
					sendMessage(playerid,"Type /help for more commands.");
			    }
			}
		}
	}


/*
	if(hunger[playerid] >= getPlayerMuscles(playerid)){
		SetTimerEx("bleedPlayer",1000,0,"i",playerid);
		GameText(playerid,"You are feeling very weak and unhealthy.",2000);
	}
	else if(hunger[playerid] > getPlayerMuscles(playerid)-10){
		GameText(playerid,"You are very hungry get something to eat immedietly.",2000);
	}
	else if(hunger[playerid] > getPlayerMuscles(playerid)-15){
		GameText(playerid,"You are feeling hungry get something to eat.",2000);
	}
*/
	if(cstaton[playerid]==1){
	    cstaton[playerid] = 0;
		for(new i = 0;i < sizeof(cstats);i++){
			TextDrawHideForPlayer(playerid,cstats[i][playerid]);
			TextDrawDestroy(cstats[i][playerid]);
		}
	}
//	printf("%d,%d",newkeys,oldkeys);
	if(getPlayerDistanceFromPoint(playerid,776.2856,-57.9722,1000.7184) < 10){
		if(gym[playerid] == 3){
			if(newkeys == 144){
		        if(round[playerid] % 200 == 0){
		            if(getPlayerMuscles(playerid) < 100){
			            givePlayerMuscles(playerid,1  );
						GameText(playerid,"~g~Your muscles has be upgraded!",4000);
					}

		        }
		        round[playerid]+=1;
//		        hunger[playerid]+=0.2;
			}
		}
	}

	if(oldkeys == KEY_SECONDARY_ATTACK){
	    if(gym[playerid] != 0){
			KillTimer(gymCheck[playerid]);
			if(gym[playerid] == 1){
				ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",1,0,0,0,0,0);
			}
			else if(gym[playerid] == 2){
				ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",1,0,0,0,0,0);
			}
			else if(gym[playerid] == 3){
				ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",1,0,0,0,0,0);
			}
			new style[6] = { 4,5,6,7,15,16};
			for(new j = 0;j < sizeof(skins);j++){
			    if(GetPlayerSkin(playerid) == skins[j]){
			        SetPlayerFightingStyle(playerid,style[j % 6]);
			    }
			}
			gym[playerid] = 0;
		    TogglePlayerControllable(playerid,1);
		    SetCameraBehindPlayer(playerid);
		}
	}
	if((newkeys == KEY_FIRE) && (oldkeys == KEY_SPRINT)){
	    if(gym[playerid] == 1){
	        KillTimer(gymCheck[playerid]);
            ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",1,1,0,0,1,0);
            gymCheck[playerid] = SetTimerEx("lowGym",1000,0,"i",playerid);
            round[playerid]+=1;
//	        hunger[playerid]+=0.2;
            if(round[playerid] % 100 == 0){
	            if(getPlayerMuscles(playerid) < 100){
	                givePlayerMuscles(playerid,1  );
					GameText(playerid,"~g~Your muscles has be upgraded!",4000);
				}
            }
	    }
	    else if(gym[playerid] == 2){
	        KillTimer(gymCheck[playerid]);
	    	ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",1,1,0,0,1,0);
	    	gymCheck[playerid] = SetTimerEx("lowGym",1000,0,"i",playerid);
//	        hunger[playerid]+=0.2;
	        round[playerid]+=1;
            if(round[playerid] % 100 == 0){
	            if(getPlayerMuscles(playerid) < 100){
	                givePlayerMuscles(playerid,1 );
					GameText(playerid,"~g~Your muscles has be upgraded!",4000);
				}
	        }
	    }
	    else if(tied[playerid] == 0){
		    if(tryingtotie[playerid] != -1){
		        tied[tryingtotie[playerid]]+=5;
		        if(tied[tryingtotie[playerid]] >= 100){
		            tied[tryingtotie[playerid]] = 100;
 		            unfreezePlayer(playerid);
					format(string,256,"You have tied %s.",getName(tryingtotie[playerid]));
					sendMessage(playerid,string,1);
					format(string,256,"%s has tied you.",getName(playerid));
					sendMessage(tryingtotie[playerid],string,1);
					format(string,256,"%s has tied %s.",getName(playerid),getName(tryingtotie[playerid]));
					for(new i = 0;i < MAX_PLAYERS;i++){
					    if(isPlayerClose(playerid,i) && playerid != i && tryingtotie[playerid] != i){
					        sendMessage(i,string,1);
					    }
					}
					tryingtotie[playerid] = -1;
		        }
		        else{
		            format(string,256,"Tied Up: %d",tied[tryingtotie[playerid]]);
		            GameText(playerid,string,1000);
		        }
		    }
		}
		for(new i =0;i < MAX_PLAYERS;i++){
		    if(tryingtotie[i] == playerid){
		        tied[playerid]-=5;
		        if(tied[playerid] <= 0){
					if(!(isPlayerPolice(i) && getPlayerJobRank(i) > 1)){
						format(string,256,"You got escaped from being tied by %s.",getName(i));
						sendMessage(playerid,string,1);
						format(string,256,"You have failed to tie %s.",getName(playerid));
						sendMessage(i,string,1);
						format(string,256,"%s has failed to tie %s.",getName(i),getName(playerid));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(playerid,j) && playerid != i && i != j){
						        sendMessage(j,string,1);
						    }
						}
					}
					else{
						format(string,256,"You got escaped from being cuff by %s.",getName(i));
						sendMessage(playerid,string,1);
						format(string,256,"You have failed to cuff %s.",getName(playerid));
						sendMessage(i,string,1);
						format(string,256,"%s has failed to cuff %s.",getName(i),getName(playerid));
						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(isPlayerClose(playerid,j) && playerid != i && i != j){
						        sendMessage(j,string,1);
						    }
						}
					}
		            tryingtotie[i] = -1;
		            unfreezePlayer(playerid);
		            unfreezePlayer(i);
		        }
		        else{
					if(isPlayerHitman(i)){
			            format(string,256,"Tied Up: %d",tied[playerid]);
		            }
		            else{
			            format(string,256,"Cuffed: %d",tied[playerid]);
		            }
		            GameText(playerid,string,1000);
		        }
		    }
		}

	}
	if(gPlayerUsingLoopingAnim[playerid])
	if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys)) {
	    StopLoopingAnim(playerid);
        TextDrawHideForPlayer(playerid,txtAnimHelper);
    }
	if((GetPlayerVirtualWorld(playerid)==666) && (GetPlayerInterior(playerid)==7)){
	    new w,a;
		GetPlayerWeaponData(playerid,2,w,a);
		if(newkeys == 0){
			if(a == 0){
			    for(new i = 0;i < 5;i++){
			        if(IsValidObject(target[i])){
					    SetPlayerVirtualWorld(playerid,0);
					    sendMessage(playerid,"You are out of ammo. You failed the trining.",1);
					    DisablePlayerCheckpoint(playerid);
						spawnPlayer(playerid);
						format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job ='Hitman' AND userid = '%s'",getName(playerid));
						mysql_query2(string);
						for(new j = 0;j < 5;j++)
						    DestroyObject(target[j]);
			            return 1;
			        }
			    }
				for(new i = 0;i < 5;i++)
				    DestroyObject(target[i]);
			    SetPlayerVirtualWorld(playerid,0);
			    sendMessage(playerid,"Congrats, You have passed the test! Your now a Hitman!",1);
				setJob( playerid , 9 );
				spawnPlayer(playerid);

			}
		}
	    if(newkeys == 132){
			new Float:x,Float:y,Float:z,Float:r;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,r);
			if((floatround(x) == 300) && (floatround(y)==-134) && (floatround(z) == 1004)){
				if(floatabs(floatsub(r,111.5)) < 0.5){
					if(IsValidObject(target[0])){
					    GameText(playerid,"~r~TARGED HIT!",2000);
						DestroyObject(target[0]);
					}
				}
				else if(floatabs(floatsub(r,103.5)) < 0.5){
					if(IsValidObject(target[1])){
					    GameText(playerid,"~r~TARGED HIT!",2000);
						DestroyObject(target[1]);
					}
				}
				else if(floatabs(floatsub(r,92.0)) < 0.5){
					if(IsValidObject(target[2])){
					    GameText(playerid,"~r~TARGED HIT!",2000);
						DestroyObject(target[2]);
					}
				}
				else if(floatabs(floatsub(r,80.8)) < 0.5){
					if(IsValidObject(target[3])){
					    GameText(playerid,"~r~TARGED HIT!",2000);
						DestroyObject(target[3]);
					}
				}
				else if(floatabs(floatsub(r,72.1)) < 0.5){
					if(IsValidObject(target[4])){
					    GameText(playerid,"~r~TARGED HIT!",2000);
						DestroyObject(target[4]);
					}
				}
			}
		}
		return 1;
	}
	// 8 up arrow
	// 32 down arrow

	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

new updated[MAX_PLAYERS];
public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	updated[playerid] =1;

	if(IsPlayerInAnyVehicle(playerid)){
		new vehicleid = GetPlayerVehicleID(playerid);
		new Float:health;
		GetVehicleHealth(vehicleid,health);
		if(health < 500){
			SetVehicleVelocity(vehicleid,0,0,0);
		}
		new c = getVehicleFuelCapacity(vehicleid);
		if(c){
		    if(fuel[vehicleid] <= 0){
		    	SetVehicleVelocity(vehicleid,0,0,0);
		    }
		}
	}
//	if(!iHaveBadConnection[playerid] ){
    OnPlayerUpdateEx(playerid);
//	}

	if(isInvisible[playerid]==1){
	    return 0;
	}
	return 1;
}

stock activateIHaveBadConnection(playerid){
	iHaveBadConnection[playerid] = 1;
	badConnectionTimer[playerid] = SetTimerEx("OnPlayerUpdateEx",1000,1,"i",playerid);
	SendClientMessage(playerid,COLOR_GREY,"*** iHaveBadConnection has been activated.");
}

stock deactivateIHaveBadConnection(playerid){
	iHaveBadConnection[playerid] = 0;
    KillTimer(badConnectionTimer[playerid]);
	SendClientMessage(playerid,COLOR_GREY,"*** iHaveBadConnection has been deactiaved.");
	SendClientMessage(playerid,COLOR_GREY,"*** Type /ihavebadconnection to activate.");
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	return 1;
}

stock isCommonVehicle(vehicleid){
	new m = GetVehicleModel(vehicleid);
	for(new i = 0;i < sizeof(blockedForCommonManVehicles);i++){
	    if(blockedForCommonManVehicles[i] == m){
	        return 0;
	    }
	}
	for(new i = 0;i < sizeof(cdscars);i++){
	    if(vehicleid == cdscars[i]){
	        return 0;
	    }
	}
	return 1;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(!isCommonVehicle(vehicleid)){
	    if(isTaxi(vehicleid) && (isPlayerTaxiDriver(forplayerid)))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else if(isPlane(vehicleid) && (isPlayerPilot(forplayerid)))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else if(isAmbulance(vehicleid) && (isPlayerMedic(forplayerid)))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else if(isPetrolTruck(vehicleid) && (isPlayerFuelSupplier(forplayerid)))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else if(isPoliceCar(vehicleid) && (isPlayerPolice(forplayerid) && getPlayerJobRank(forplayerid) > 1))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else if(isBoat(vehicleid))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		else
            SetVehicleParamsForPlayer(vehicleid,forplayerid,0,1);
	    return 1;
	}
	if(locked[vehicleid] == 1){
	    if(!isCarOwner(forplayerid,vehicleid))
		    SetVehicleParamsForPlayer(vehicleid,forplayerid,0,1);
	}
	else
	{
	    if(!isCarOwner(forplayerid,vehicleid))
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
	}

	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == 0){
	    if(!response){
	        GameTextForPlayer(playerid,"~r~Baaaaaaaaaa~",1,5);
	        Kick(playerid);
	    }
	    if(strcmp(inputtext,getName(playerid),true)!=0 && strlen(inputtext) < 23 && strlen(inputtext) > 2){
		    SetPlayerName(playerid,inputtext);
		}
		OnPlayerConnect(playerid);
		OnPlayerRequestClass(playerid,0);
	}
	else if(dialogid >= MOTEL_DIALOG_IDS) // 10000
	{
	    new j = dialogid % 100;
	    new i = (dialogid - MOTEL_DIALOG_IDS - j)/100;
	    if(response){
	        if(getPlayerMoney(playerid) > fmotels(i,0,cost)*10){
			    format(string,256,"UPDATE houses SET owner = '%s' WHERE houseno = %d",getName(playerid),imotels(i,j,houseno));
			    mysql_query2(string);
			    mysql_free_result();
			    format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=0 WHERE userid = '%s'",fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz),getName(playerid));
			    mysql_query2(string);
			    mysql_free_result();
			    SetSpawnInfo(playerid,0,GetPlayerSkin(playerid),fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz),0,0,0,0,0,0,0);
				sendMessage(playerid, "Congrats! From now you are renting over here.",1);
				PlayerPlaySound(playerid,1149,0,0,0);
				SetPlayerPos(playerid,fmotels(i,j,doorx),fmotels(i,j,doory),fmotels(i,j,doorz));
				format(string,256,"SELECT * FROM houses WHERE owner = '%s'",getName(playerid));
				mysql_query2(string);
				mysql_store_result();
				new n = mysql_num_rows();
				mysql_free_result();
				if(n <= 1 ){
					new date,month,year;
					getdate(year,month,date);
					format(_str,512,"\n\
					Admin Team\n\
					Stage Set Las Venturas\n\
					\n\
					%2d-%2d-%d\n\
					\n\
					%s\n\
					House # %d\n\
					\n\
					Dear %s\n\
					We are very much thankfull to you for selecting\n\
					our server as your hobby spot. We hope you will\n\
					have lots of fun with us.\n\
					\n\
					For any assistance feel free to contact us at\n\
					our website.\n\
					\n\
					Sincerely,\n\
					\n\
					Admin Team\
					",date,month,year,getName(playerid),imotels(i,j,houseno),getName(playerid));
					SendMail( imotels(i,j,houseno) ,"Admin Team", "Welcome", _str);
               	}
				new date,month,year;
				getdate(year,month,date);

				format(_str,512,
				"LV Real Estates\n\
				Fabulous Las Venturas\n\
				\n\
				%2d-%2d-%d\n\
				\n\
				%s\n\
				House # %d\n\
				\n\
				Dear %s\n\
				You are now a tenent at our motel. We asure you 100percent\n\
				safety for your	properties and you.\n\
				\n\
				If any problems occur in the environment please let\n\
				us know.\n\
				\n\
				Sincerely,\n\
				\n\
				LV Real Estates",date,month,year,getName(playerid),imotels(i,j,houseno),getName(playerid));
				SendMail( imotels(i,j,houseno) ,"LV Real Estates", "New Room", _str);

				return 1;
			}
			else{
				SetPlayerPos(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz));
			    format(string,256,"You dont have enough money($%d).",fmotels(i,0,cost)*10);
			    sendMessage(playerid,string,1);
			}
	    }
		else{
			SetPlayerPos(playerid,fmotels(i,0,doorx),fmotels(i,0,doory),fmotels(i,0,doorz));
		}
	}
	else if(dialogid >= MAIL_DIALOG_IDS){

	}
	else if(dialogid >= BIZES_DIALOG_IDS) // 2000
	{
		new id = dialogid - BIZES_DIALOG_IDS;
	    if(response)
	    {
	        if(getPlayerLevel(playerid) >= 15){
				if(getPlayerMoney(playerid) >= bizes[id][cost])
				{
				    new hid = getHouse( getName(playerid));
				    givePlayerMoney(playerid,-bizes[id][cost]);
				    addGlobalStats(playerid,"properties",bizes[id][cost]);
				    format(string,256,"UPDATE bizes SET owner = '%s' WHERE bizno = %d",getName(playerid),bizes[id][bizno]);
				    mysql_query2(string);
					sendMessage(playerid,"Congratulations! You have bought this shop.",1);
					PlayerPlaySound(playerid,1149,0,0,0);
					new date,month,year;
					getdate(year,month,date);
					format(_str,512,"\
					LV Finance Lmt.\n\
					Fabulous Las Venturas\n\
					\n\
					%2d-%2d-%d\n\
					\n\
					%s\n\
					House # %d\n\
					\n\
					Dear %s\n\
					We are really thankfull to you for trusting us\n\
					and makeing a purchase with us.\n\
					\n\
					Now that you have got a new asset to deal with,\n\
					we hope you make good weath	with it. Wish you\n\
					best of luck.\n\
					\n\
					Sincerely,\n\
					\n\
					LV Finance Lmt.",date,month,year,getName(playerid),hid,getName(playerid));
                    SendMail( hid ,"LV Finance Lmt.", "New Shop", _str);

				}
				else
				{
					format(string,256,"You dont have enough money($%d).",bizes[id][cost]);
				    sendMessage(playerid,string,1);
				}
			}
			else{
				sendMessage(playerid,"You must be atleast level 15 to buy a shop.",1);
			}
	    }
	}
	else if(dialogid >= HOUSE_DIALOG_IDS) // 1000
	{
	    new id = dialogid - HOUSE_DIALOG_IDS;
	    if(response)
	    {
	        if(getPlayerLevel(playerid) >= 10){
				if(getPlayerMoney(playerid) >= houses[id][cost])
				{
				    givePlayerMoney(playerid,-houses[id][cost]);
				    addGlobalStats(playerid,"properties",houses[id][cost]);
				    format(string,256,"UPDATE houses SET owner = '%s' WHERE houseno = %d",getName(playerid),houses[id][houseno]);
				    mysql_query2(string);
				    mysql_free_result();
				    format(string,256,"UPDATE spawns SET x=%f,y=%f,z=%f,r=0.0,i=%d,v=%d WHERE userid = '%s'",houses[id][inx],houses[id][iny],houses[id][inz],houses[id][interior],id,getName(playerid));
				    mysql_query2(string);
				    mysql_free_result();
					SetPlayerVirtualWorld(playerid,houses[id][houseno]);
					sendMessage(playerid,"Congratulations! You have bought this house.",1);
					PlayerPlaySound(playerid,1149,0,0,0);
					new date,month,year;
					getdate(year,month,date);
					format(_str,512,"\
					LV Real Estate\n\
					Fabulous Las Venturas\n\
					\n\
					%2d-%2d-%d\n\
					\n\
					%s\n\
					House # %d\n\
					\n\
					Dear %s\n\
					First of all congrats for you new house,\n\
					\n\
					Our constructions are recognized by the	government,\n\
					so its a great decision for	you to make a purchase\n\
					with us.\n\
					\n\
					We give you 100% insurance on safety and any loss\n\
					of property.\n\
					\n\
					Sincerely,\n\
					\n\
					LV Real Estate",date,month,year,getName(playerid),houses[id][houseno],getName(playerid));
					SendMail(houses[id][houseno] ,"LV Real Estates", "New House", _str);
				}
				else
				{
					format(string,256,"You dont have enough money($%d).",houses[id][cost]);
				    sendMessage(playerid,string,1);
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,houses[id][outx],houses[id][outy],houses[id][outz]);
				}
			}
			else{
       			sendMessage(playerid,"You must be atleast level 10 to buy a house.",1);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,houses[id][outx],houses[id][outy],houses[id][outz]);
			}
	    }
	    else
	    {
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,houses[id][outx],houses[id][outy],houses[id][outz]);
	    }
	}
	else if(dialogid > JOBTEST_DIALOG_IDS){
	    if(response){
		    for(new i = 1;i <= 11;i++){
				if(dialogid == JOBTEST_DIALOG_IDS+i){
				    if(i == 1){ // taxi
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
						new d = getVehicleDriver(taxi);
						if(d == -1){
							SetVehicleToRespawn(taxi);
						    SetPlayerVirtualWorld(playerid,666);
						    PutPlayerInVehicle(playerid,taxi,0);
						    SetPlayerRaceCheckpoint(playerid,1,2243.0334,1934.2269,31.6547,2243.0334,1934.2269,31.6547-10,10);// taxi finish
		                    freezePlayer(playerid);
						    SetTimerEx("testCount",5000,0,"i",playerid);
						    count[playerid] = 0;
						    sendMessage(playerid,"A good taxi driver has to deliver his passengers",1);
						    sendMessage(playerid,"safe and also in time. To prove your self as a");
						    sendMessage(playerid,"good taxi driver, reach your destination which");
						    sendMessage(playerid,"is marked red on the map, within the time.");

						    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Taxi Driver' AND userid = '%s'",getName(playerid));
						    mysql_query2(string);



						}
						else{
						    sendMessage(playerid,"You cannot have the test at the moment.",1);
						    sendMessage(playerid,"Please come back after some time.");
						}
				    }
				    else if(i == 2){ // pilot
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
						new d = getVehicleDriver(plane);
						if(d == -1){
							SetVehicleToRespawn(plane);
						    SetPlayerVirtualWorld(playerid,666);
						    PutPlayerInVehicle(playerid,plane,0);
						    SetPlayerRaceCheckpoint(playerid,1,353.7543,2509.8774,16.5278,353.7543,2509.8774,16.5278-10,30);// pilot finish
		                    freezePlayer(playerid);
						    SetTimerEx("testCount",5000,0,"i",playerid);
						    count[playerid] = 0;
							sendMessage(playerid,"We will have to ensure you know how to fly",1);
							sendMessage(playerid,"before we give you the job. We will be giving");
							sendMessage(playerid,"you a small plane, which you will have to land");
							sendMessage(playerid,"it safely without any damage on the red mark.");

						    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Pilot' AND userid = '%s'",getName(playerid));
						    mysql_query2(string);
						}
						else{
						    sendMessage(playerid,"You cannot have the test at the moment.",1);
						    sendMessage(playerid,"Please come back after some time.");
						}
				    }
				    else if(i == 3){ // medic
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
						new d = getVehicleDriver(ambulance);
						if(d == -1){
						    SetVehicleToRespawn(ambulance);
						    SetPlayerVirtualWorld(playerid,666);
						    PutPlayerInVehicle(playerid,ambulance,0);
						    SetPlayerRaceCheckpoint(playerid,1,1623.8207,1822.3953,10.6953,1623.8207,1822.3953,10.6953-10,10);// medic finish
		                    freezePlayer(playerid);
						    SetTimerEx("testCount",5000,0,"i",playerid);
						    count[playerid] = 0;
							sendMessage(playerid,"Medic is a very trust worthy job, a medic",1);
							sendMessage(playerid,"has to save the lives a injured people, so");
							sendMessage(playerid,"before we give you the job, we will have");
							sendMessage(playerid,"to be sure that our medics itself dont take");
							sendMessage(playerid,"away their lives with their driving. So reach");
							sendMessage(playerid,"the red marker as soon as possible.");

						    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Medic' AND userid = '%s'",getName(playerid));
						    mysql_query2(string);
						}
						else{
						    sendMessage(playerid,"You cannot have the test at the moment.",1);
						    sendMessage(playerid,"Please come back after some time.");
						}
				    }
				    else if(i == 6){ // drug dealer
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
						new d = getVehicleDriver(sentinel);
						if(d == -1){
						    SetVehicleToRespawn(sentinel);
						    SetPlayerVirtualWorld(playerid,666);
						    PutPlayerInVehicle(playerid,sentinel,0);
						    SetPlayerRaceCheckpoint(playerid,1,-1997.6350,-1549.4663,84.7346,-1997.6350,-1549.4663,84.7346-10,10);// drug dealer finish
		                    freezePlayer(playerid);
						    SetTimerEx("testCount",5000,0,"i",playerid);
						    count[playerid] = 0;
							sendMessage(playerid,"Drug dealer job is a dangerous job. You dont",1);
							sendMessage(playerid,"when the police might attack you from which");
							sendMessage(playerid,"direction and how. So no matter how they attack");
							sendMessage(playerid,"us you must be ready to escape as soon as you");
							sendMessage(playerid,"know its a raid. Reach the red marker within");
							sendMessage(playerid,"time no matter what it costs.");

						    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Drug Dealer' AND userid = '%s'",getName(playerid));
						    mysql_query2(string);
						}
						else{
						    sendMessage(playerid,"You cannot have the test at the moment.",1);
						    sendMessage(playerid,"Please come back after some time.");
						}
				    }
				    else if(i == 9){ // Hitman
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
				        for(new j = 0;j < 5;j++){
				            if(IsValidObject(j)){
							    sendMessage(playerid,"You cannot have the test at the moment.",1);
							    sendMessage(playerid,"Please come back after some time.");
			                    return 1;
					        }
				        }
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid,24,5);
						SetPlayerVirtualWorld(playerid,666);
						SetPlayerPos(playerid,300.0833,-134.3030,1004.0625);
						SetPlayerInterior(playerid,7);
						SetPlayerFacingAngle(playerid,108.6664);

					    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Hitman' AND userid = '%s'",getName(playerid));
					    mysql_query2(string);
						sendMessage(playerid,"You have 5 shots, and you also have 5 victims.",1);
						sendMessage(playerid,"You will need to shoot every target in the");
						sendMessage(playerid,"booth exactly at the center of the head to");
						sendMessage(playerid,"get selected.");
						target[0] = CreateObject(1586,275.6625,-143.8886,1004.0625,0,0,292.7199); // OBJECT
						target[1] = CreateObject(1586,275.4390,-140.1040,1004.0625,0,0,268.9064); // OBJECT
						target[2] = CreateObject(1585,274.2138,-134.9347,1004.0625,0,0,272.0398); // OBJECT
						target[3] = CreateObject(1585,275.2074,-129.9799,1004.0625,0,0,256.9996); // OBJECT
						target[4] = CreateObject(1585,275.6624,-126.1776,1004.0625,0,0,246.9728); // OBJECT
					    SetPlayerCheckpoint(playerid,300.0833,-134.3030,1004.0625,0.5);
					    SetCameraBehindPlayer(playerid);
					    return 1;
				    }
				    else if(i == 11){ // police
						format(string,256,"SELECT * FROM jobs WHERE job='Taxi Driver' AND userid = '%s' AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) >= 15",getName(playerid));
						mysql_query2(string);
						mysql_store_result();
						new n = mysql_num_rows();
						mysql_free_result();
						if(!n){
							return sendMessage(playerid,"You can only take a job test once every 15 minutes.",1);
						}
				        for(new j = 0;j < MAX_PLAYERS;j++){
				            if(IsPlayerConnected(j)){
					            if(IsPlayerInVehicle(j,police)){
								    sendMessage(playerid,"You cannot have the test at the moment.",1);
								    sendMessage(playerid,"Please come back after some time.");
				                    return 1;
					            }
					        }
				        }

						sendMessage(playerid,"Prove your cop skills by catching that suspect.",1);
						sendMessage(playerid,"She is too fast in her ride. You will have to");
						sendMessage(playerid,"catch her with your car and makesure you dont");
						sendMessage(playerid,"destroy the car or get killed in that process.");

					    format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job = 'Police' AND userid = '%s'",getName(playerid));
					    mysql_query2(string);
				        SetVehicleToRespawn(police);
						SetPlayerVirtualWorld(playerid,666);
						PutPlayerInVehicle(playerid,police,0);
						SetTimerEx("testCount",5000,0,"i",playerid);
						count[playerid] = 0;
		                freezePlayer(playerid);

						for(new j = 0;j < MAX_PLAYERS;j++){
						    if(GetPlayerSkin(j) == 298){
						        if(IsPlayerNPC(j)){
									SetVehicleParamsForPlayer(GetPlayerVehicleID(j),playerid,1,1);
						        }
						    }
						}
				    }
				    break;
				}
			}
		}
	}
	else if(dialogid >= JOB_DIALOG_IDS){ // 20
	    for(new i = 1;i <= 11;i++){
			if(dialogid == JOB_DIALOG_IDS+i){
			    if(response){
			        format(string,256,"SELECT * FROM houses WHERE owner = '%s'",getName(playerid));
			        mysql_query2(string);
			        mysql_store_result();
			        if(mysql_num_rows()!=0){
			            mysql_free_result();
					    format(string,256,"SELECT * FROM jobs WHERE userid = '%s' AND current = 1",getName(playerid));
						mysql_query2(string);
						mysql_store_result();

						if(mysql_num_rows()==0){
							mysql_free_result();
							new rank;
							format(string,256,"SELECT rank FROM jobs WHERE job = '%s' AND userid = '%s'",jobName[i],getName(playerid));
							mysql_query2(string);
							mysql_store_result();
							rank = mysql_fetch_int();
							mysql_free_result();
							if((rank == 1) && (i == 11)){
								ShowPlayerDialog(playerid,JOBTEST_DIALOG_IDS+i,0,"Test",
								"You will need to pass a test before you can\n\
								get the job. Once you pass the test you will\n\
								never have to do it again even if you rejon the\n\
								job any time later. Press 'Accept' to have the\n\
								test."
								,"Accept","Reject");
								return 1;
							}
							if((rank == 0) && (i != 8) && (i != 4) && (i != 7)){ // i = 8 mechanic has no test
								ShowPlayerDialog(playerid,JOBTEST_DIALOG_IDS+i,0,"Test",
								"You will need to pass a test before you can\n\
								get the job. Once you pass the test you will\n\
								never have to do it again even if you rejon the\n\
								job any time later. Press 'Accept' to have the\n\
								test."
								,"Accept","Reject");

								return 1;
							}
							setJob(playerid,i);
						}
						else{
						    mysql_free_result();
						    sendMessage(playerid,"You already got a job, must resign that first.",1);
						}
					}
					else{
					    mysql_free_result();
					    sendMessage(playerid,"You must be owning/renting a house/room.",1);
					}
				}
				break;
			}
		}
	}
	else if(dialogid >= CDS_DIALOGS_IDS){ // 1
	    if(response){
	        if(getPlayerLevel(playerid) >= 3){
		        new idx;
		        string = strtok(inputtext,idx);
		        new i = 0;
				for(i = 0;i < sizeof(VehicleNames);i++){
				    if(strcmp(string,VehicleNames[i],true)==0){
				        break;
				    }
				}
				if(i != sizeof(VehicleNames)-1){
					for(new j = 0;j < 5;j++){
					    if(carDealerShip[dialogid-CDS_DIALOGS_IDS][carslist][j] == i+400){
					        if(getPlayerMoney(playerid) >= carDealerShip[dialogid-CDS_DIALOGS_IDS][carscost][j]){
					            new id = -1;
								format(string,256,"SELECT houseno FROM houses WHERE owner = '%s'",getName(playerid));
								mysql_query2(string);
								mysql_store_result();
								do
								{
								    new h = mysql_fetch_int();
								    if(h > 90000){
										for(new l =0;l < sizeof(houses);l++){
										    if(houses[l][houseno] == h){
												id = 1000+h;
												for(new m = 0;m < MAX_VEHICLES;m++){
													if(carId[m] == 1000+h){
													    id = -1;
													}
												}
												if(id != -1){
												    break;
												}
												else{
												    id = 10000+1000+h;
												}
										    }
										}
								    }
								}
								while(mysql_fetch_row_data());
								mysql_free_result();
								if(id >= 10000){
								    id -= 11000;
								    new Float:d = 9999.0;
								    new shortest;
									for(new n = 0;n < sizeof(parking);n++){
									    if(GetDistanceBetweenPoints(parking[n][0],parking[n][1],parking[n][2],houses[id][parkx],houses[id][parky],houses[id][parkz]) < d){
									        d = GetDistanceBetweenPoints(parking[n][0],parking[n][1],parking[n][2],houses[id][parkx],houses[id][parky],houses[id][parkz]);
											shortest = n;
									    }
									}
									id += 1000;
									format(string,256,"UPDATE cars SET parking = %d WHERE parking = %d",shortest,id);
									mysql_query2(string);
								}
								if(id == -1){
								    new Float:d = 99999.0;
								    new Float:x,Float:y,Float:z;
									format(string,256,"SELECT x,y,z FROM spawns WHERE userid = '%s'",getName(playerid));
									mysql_query2(string);
									mysql_store_result();
									mysql_fetch_field("x",string);
									x = floatstr(string);
									mysql_fetch_field("y",string);
									y = floatstr(string);
									mysql_fetch_field("z",string);
									z = floatstr(string);
									for(new n = 0;n < sizeof(parking);n++){
									    if(GetDistanceBetweenPoints(parking[n][0],parking[n][1],parking[n][2],x,y,z) < d){
											format(string,256,"SELECT * FROM cars WHERE parking = %d",n);
											mysql_query2(string);
											mysql_store_result();
											if(mysql_num_rows() > 0){
											    mysql_free_result();
											    continue;
											}
											mysql_free_result();
									        d = GetDistanceBetweenPoints(parking[n][0],parking[n][1],parking[n][2],x,y,z);
											id = n;
									    }
									}
								}
								if(id != -1){
									format(string,256,"INSERT INTO cars ( owner , model , color , parking ) values ( '%s' , %d , %d , %d )",getName(playerid),i+400,random(62),id);
									mysql_query2(string);
									addGlobalStats(playerid,"cars",carDealerShip[dialogid-CDS_DIALOGS_IDS][carscost][j]);
									givePlayerMoney(playerid,-carDealerShip[dialogid-CDS_DIALOGS_IDS][carscost][j]);
									sendMessage(playerid,"Congratulations You have bought a new car !",1);
									sendMessage(playerid,"Your car will be parked asap at your closest parking.");
									SetTimerEx("AddCar",1000 * 60 * ( 5 + random(10)),0,"i",id);
									new date,month,year;
									getdate(year,month,date);
									new hid = getHouse(getName(playerid));
									format(_str,512,
									"Car Dealership\n\
									Fabulous Las Venturas\n\
									\n\
									%2d-%2d-%d\n\
									\n\
									%s\n\
									House # %d\n\
									\n\
									Dear %s\n\
									Thank you for the payment, your	car\n\
									will be delivered to your nearest spawn\n\
									point as soon as possible.\n\
									\n\
									Our cars are high quality and tested\n\
									vehicles, but incase if you still find any\n\
									problems with it after delivery, please\n\
									bring it back to us.\n\
									\n\
									Sincerely,\n\
									\n\
									Car Dealership",date,month,year,getName(playerid),hid,getName(playerid));
									SendMail( hid ,"Car Dealership", "New Car", _str);
								}
								else{
									sendMessage(playerid,"Sorry, we couldn't deliver you the car at this time.",1);
								}
					        }
					        else{
					            format(string,256,"You dont have enough money($%d).",carDealerShip[dialogid-CDS_DIALOGS_IDS][carscost][j]);
								sendMessage(playerid,string,1);
					        }
					    }
					}
				}
		    }
		    else{
		        sendMessage(playerid,"You must be atleast level 3 to buy a car.",1);
		    }
		}
	}
	return 1;
}

forward AddCar( park );
public AddCar( park )
{
	format(string,256,"SELECT model,color FROM cars WHERE parking = %d",park);
	mysql_query2(string,-1,0,TmP);
	mysql_store_result(TmP);
	new model,color;
	mysql_fetch_field("model",string,TmP);
	model = strval(string);
	mysql_fetch_field("color",string,TmP);
	color = strval(string);
	new v = CreateVehicle( model , parking[park][0], parking[park][1] , parking[park][2] , parking[park][3] , color , color , 600);
	carId[ v ] = park;
	mysql_free_result(TmP);
	// mail his here

}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerNPC(playerid)){
		return 1;
	}
	return 1;
}

stock sscanf(str[], format[], {Float,_}:...)
{
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs();
	while (paramPos < paramCount && str[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = str[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = str[++stringPos];
				}
				do
				{
					stringPos++;
					if (ch >= '0' && ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return 1;
					}
				}
				while ((ch = str[stringPos]) && ch != ' ');
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					ch,
					num = 0;
				while ((ch = str[stringPos++]))
				{
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						case ' ':
						{
							break;
						}
						default:
						{
							return 1;
						}
					}
				}
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, str[stringPos++]);
			}
			case 'f':
			{
				new tmp[25];
				strmid(tmp, str, stringPos, stringPos+sizeof(tmp)-2);
				setarg(paramPos, 0, _:floatstr(tmp));
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = str[stringPos++]) && ch != ' ')
					{
						setarg(paramPos, i++, ch);
					}
					if (!i) return 1;
				}
				else
				{
					while ((ch = str[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (str[stringPos] && str[stringPos] != ' ')
		{
			stringPos++;
		}
		while (str[stringPos] == ' ')
		{
			stringPos++;
		}
		paramPos++;
	}
	while (format[formatPos] == 'z') formatPos++;
	return format[formatPos];
}

stock strtok(const str[], &index, del = ' ' )
{
	new length = strlen(str);
	while ((index < length) && (str[index] <= del))
	{
		index++;
	}

	new offset = index;
	new res[20];
	while ((index < length) && (str[index] > del) && ((index - offset) < (sizeof(res) - 1)))
	{
		res[index - offset] = str[index];
		index++;
	}
	res[index - offset] = EOS;
	return res;
}

stock getName( playerid )
{
	new name[23];
	GetPlayerName(playerid,name,23);
	return name;
}

stock existPlayer( playerid )
{
	new num;
	new strng[256];
	format(strng,256,"SELECT * FROM register WHERE userid = '%s'",getName(playerid));

	if(! mysql_query2(strng,-1,0,TmP)){
	    printf("error at existPlayer");
	}
	else
	{
		mysql_store_result(TmP);
	    num = mysql_num_rows(TmP);
	}
	mysql_free_result(TmP);
	return num;
}


stock registerPlayer( playerid , password[]  )
{
	new strg[256];
	if(existPlayer( playerid )==0)
	{
	    format(strg,256,"INSERT INTO register ( userid , password ) values ( '%s' , '%s' )",getName(playerid),password);

	    if(!mysql_query2(strg,-1,0,TmP)){
			printf("error at registerPlayer1");
		}
		mysql_free_result(TmP);
		new rand = random(sizeof(spawnPositions));
		new Float:x,Float:y,Float:z,Float:r;
		x = spawnPositions[rand][0];
		y = spawnPositions[rand][1];
		z = spawnPositions[rand][2];
		r = spawnPositions[rand][3];
		new s[] = {
		7,
		15,
		17,
		20,
		22,
		23,
		25,
		26,
		28,
		34,
		41,
		46,
		48,
		50,
		56,
		59,
		101,
		147,
		153,
		184,
		186,
		187,
		188,
		191,
		192,
		193,
		217,
		223,
		227,
		228,
		234,
		242,
		247,
		248,
		249,
		250,
		241,
		};
		new skin = s[random(sizeof(s))];

//		SetSpawnInfo(playerid,1,skin,x,y,z,r,0,0,0,0,0,0);
	    format(strg,256,"INSERT INTO spawns ( userid, x , y , z , r ) VALUES ( '%s' , %f, %f , %f , %f )",getName(playerid),x,y,z,r);
	    if(!mysql_query2(strg,-1,0,TmP)){
			printf("error at registerPlayer2");
		}

	    format(strg,256,"INSERT INTO stats (userid,skin) VALUES( '%s' , %d )",getName(playerid),skin);
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer3");

	    format(strg,256,"INSERT INTO bank ( userid , balance )VALUES ( '%s' , 5000.0 )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer4");

	    format(strg,256,"INSERT INTO statements ( userid , statement ) VALUES ( '%s' , 'Bank account opened with $5000 balance.' )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer5");


	    format(strg,256,"INSERT INTO levels ( userid , playingpoints , level , time ) VALUES ( '%s' , 0 , 1 , NOW() )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer6");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Taxi Driver' , 2.0 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()) )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer7");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Pilot' , 3.4 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()) )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer8");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate, lasttime ) VALUES ( '%s' , 'Medic' , 1.4 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()) )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer9");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Gold Miner' , 1.7  , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer10");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Fuel Supplier' , 1.8  , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer11");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Drug Dealer' , 1.4 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer12");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Fisherman' , 1.5 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()) )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer13");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Mechanic' , 2.6 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()) )",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer14");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime) VALUES ( '%s' , 'Hitman' , 2.0  , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer15");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime ) VALUES ( '%s' , 'Sales Man' , 2.5 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer16");

	    format(strg,256,"INSERT INTO jobs ( userid , job , salaryrate , lasttime ) VALUES ( '%s' , 'Police' , 2.5 , TIMESTAMPADD( SQL_TSI_HOUR , -1, NOW()))",getName(playerid));
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer17");

	    format(strg,256,"INSERT INTO phone ( userid  ) VALUES ( '%s' )",getName(playerid) );
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer17");

	    format(strg,256,"INSERT INTO globalstats ( userid  ) VALUES ( '%s' )",getName(playerid) );
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer18");

	    format(strg,256,"INSERT INTO horseshoes ( userid  ) VALUES ( '%s' )",getName(playerid) );
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer19");

	    format(strg,256,"INSERT INTO donations ( userid  , country ) VALUES ( '%s' , 'Not Mentioned' )",getName(playerid) );
	    if(!mysql_query2(strg,-1,0,TmP))
			printf("error at registerPlayer20");

	}
}

stock checkPlayerPassword( playerid , password[] )
{
	new strg[256];
	if(existPlayer(playerid) != 0)
	{
		format(strg,256,"SELECT * FROM register WHERE userid = '%s' AND password = '%s'",getName(playerid),password);

		if(! mysql_query2(strg,-1,0,TmP))
			printf("error at checkPlayerPassword");
		else
		{
			mysql_store_result(TmP);
		    new num = mysql_num_rows(TmP);
		    mysql_free_result(TmP);
		    return num;
		}
	}
	return 0;
}

stock changePassword( playerid , newpass[] )
{
	new strg[256];
	if(existPlayer(playerid)!=0)
	{
	    format(strg,256,"UPDATE register SET password = '%s' WHERE userid = '%s'",newpass,getName(playerid));

		if(!mysql_query2(strg,-1,0,TmP))
			printf("error at changePassword");
	}

}

stock isBuyCar( vehicleid )
{
	if(carId[vehicleid] != -1)
	    return 1;
	return 0;
}

stock isCarOwner( playerid , carid ){
	new strg[256];
	if(isBuyCar(carid)){
		format(strg,256,"SELECT owner FROM cars WHERE parking = %d",carId[carid]);
		mysql_query2(strg,-1,0,TmP);
		mysql_store_result(TmP);
		mysql_fetch_row(strg,"|",TmP);
		mysql_free_result(TmP);
		if(strcmp(getName(playerid),strg)==0){
			return 1;
		}
	}
	return 0;
}

stock Float:findRotation(Float:x1,Float:y1,Float:x2,Float:y2)
{
  new Float:t = -atan2(x2-x1,y2-y1);
  if (t < 0)  t = t + 360.0;
  //printf("%f",t);
  return t;
}

stock GetXYInFrontOfPoint(Float:x,Float:y,&Float:x2,&Float:y2,Float:A,Float:distance)
{
	x2 = x + (distance * floatsin(-A,degrees));
	y2 = y + (distance * floatcos(-A,degrees));
}

forward takePlayerCameraTo(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z);
public takePlayerCameraTo(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z)
{
	new Float:a;
	a = findRotation(cx,cy,dx,dy);
	new Float:x2,Float:y2;
	GetXYInFrontOfPoint(cx,cy,x2,y2,a,0.2);
	SetPlayerCameraPos(playerid,x2,y2,z);
	SetPlayerCameraLookAt(playerid,dx,dy,z);
	if((floatround(cx) != floatround(dx)) || (floatround(cy) !=floatround(dy) ))
		SetTimerEx("takePlayerCameraTo",10,0,"ifffff",playerid,x2,y2,dx,dy,z);

}

forward warpPlayerInToVehicle(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z,v,seatid);
public warpPlayerInToVehicle(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z,v,seatid)
{
	new Float:a;
	a = findRotation(cx,cy,dx,dy);
	new Float:x2,Float:y2;
	GetXYInFrontOfPoint(cx,cy,x2,y2,a,0.5);// speed
	SetPlayerCameraPos(playerid,x2,y2,z);
	SetPlayerCameraLookAt(playerid,dx,dy,z);
	if((floatround(cx) != floatround(dx)) || (floatround(cy) !=floatround(dy) )){
	    if(closestCar[playerid] != 2){
			SetTimerEx("warpPlayerInToVehicle",10,0,"ifffffii",playerid,x2,y2,dx,dy,z,v,seatid);
		}
		else{
		    SetCameraBehindPlayer(playerid);
		    unfreezePlayer(playerid);
		    closestCar[playerid] = 0;
		}
	}
	else{
	    PutPlayerInVehicle(playerid,v,seatid);
//	    PlayerPlaySound(playerid,1154,0,0,0);
	    unfreezePlayer(playerid);
	    closestCar[playerid] = 0;
	}

}
forward warpPlayerToPlayer(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z);
public warpPlayerToPlayer(playerid,Float:cx,Float:cy,Float:dx,Float:dy,Float:z)
{
	new Float:a;
	a = findRotation(cx,cy,dx,dy);
	new Float:x2,Float:y2;
	GetXYInFrontOfPoint(cx,cy,x2,y2,a,0.4);// speed
	SetPlayerCameraPos(playerid,x2,y2,z);
	SetPlayerCameraLookAt(playerid,dx,dy,z);
	if((floatround(cx) != floatround(dx)) || (floatround(cy) !=floatround(dy) )){
	    if(closestCar[playerid] != 2){
			SetTimerEx("warpPlayerToPlayer",30,0,"ifffff",playerid,x2,y2,dx,dy,z);
		}
		else{
		    SetCameraBehindPlayer(playerid);
		    TogglePlayerControllable(playerid,1);
		    closestCar[playerid] = 0;
		}
	}
	else{
	    SetCameraBehindPlayer(playerid);
	    SetPlayerPosFindZ(playerid,dx,dy,z);
	    closestCar[playerid] = 0;
	}

}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid){
	if(isCarOwner(playerid,vehicleid)){
		format(string,256,"UPDATE cars SET paintjob = %d WHERE parking = %d", paintjobid,carId[vehicleid]);
		mysql_query2(string);
	}
	new diff = getPlayerMoney(playerid) - GetPlayerMoney(playerid);
	addGlobalStats(playerid,"cars",diff);
	savePlayerMoney(playerid,GetPlayerMoney(playerid));
	return 1;
}


public OnVehicleMod(playerid, vehicleid, componentid)
{
	if((componentid == 1008) || (componentid == 1009) || (componentid == 1010)){
	    setPlayerMoney(playerid,getPlayerMoney(playerid));
	    RemoveVehicleComponent(vehicleid,componentid);
	    return 1;
	}
	if(isBuyCar(vehicleid)){
	    new c[14];
	    for(new i = 0;i < 14;i++){
	        c[i] = GetVehicleComponentInSlot( vehicleid, i );
	    }
		format(string,256,"%d %d %d %d %d %d %d %d %d %d %d %d %d %d",c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[1],c[12],c[13]);
		format(string,256,"UPDATE cars SET mods = '%s' WHERE parking = %d",string,carId[vehicleid]);
		mysql_query2(string);
	}

	new diff = getPlayerMoney(playerid) - GetPlayerMoney(playerid);
	savePlayerMoney(playerid,GetPlayerMoney(playerid));
	addGlobalStats(playerid,"cars",diff);


    new i = GetPlayerVirtualWorld(playerid);
    if(i){
		OnPlayerUseBiz( playerid , i-1 , diff ); // Transfendors
	}


	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(isCarOwner(playerid,vehicleid)){
		format(string,256,"UPDATE cars SET color = %d WHERE parking = %d", color1,carId[vehicleid]);
		mysql_query2(string);
		ChangeVehicleColor(vehicleid,color1,color1);
	}
	new diff = getPlayerMoney(playerid) - GetPlayerMoney(playerid);
	addGlobalStats(playerid,"cars",diff);
	savePlayerMoney(playerid,GetPlayerMoney(playerid));

    new i = GetPlayerVirtualWorld(playerid);
    if(i){
		OnPlayerUseBiz( playerid , i-1 , diff ); // Transfendors
	}

	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
/*	new Float:health;
	GetVehicleHealth(vehicleid,health);
	if(health == 1000){
		for(new i = 0;i < sizeof(bizes);i++){
		    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 10){
				givePlayerMoney(playerid,-100);
				OnPlayerUseBiz( playerid ,  i , 100 );
				break;

			}
		}
	}
*/	return 1;
}

stock GameText( playerid ,const str[] , time ){
	new strg[256];
	format(strg,256,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~%s",str);
	GameTextForPlayer( playerid, strg, time , 3);
	return 1;
}

stock SendMail( house , name[] , subject[] ,message[] )
{
	new strg[256];
	format(_string2,1024,"INSERT INTO mails ( houseno , sender , subject, message ) values ( %d , '%s' , '%s' , '%s' )",house,name,subject,message);
	mysql_query2(_string2,-1,0,TmP);
	format(strg,256,"SELECT owner FROM houses WHERE houseno = %d",house);
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	mysql_fetch_row(strg,"|",TmP);
	for(new  i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i)){
			if(strcmp(strg,getName(i),true)==0){
			    format(strg,256,"[NEW MAIL] From: %s | Subject: %s | House#: %d |",name,subject,house);
			    sendMessage(i,strg,1);
			    break;
			}
	    }
	}
	mysql_free_result(TmP);
/*	format(strg,256,"SELECT * FROM mails WHERE houseno = '%d'",house);
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new num = mysql_num_rows(TmP);
	mysql_free_result(TmP);
	if(num > 30){
	    format(strg,256,"DELETE FROM mails WHERE houseno = '%d' LIMIT 1",house);
	    mysql_query2(strg,-1,0,TmP);
	}
*/
}

new shouldCameraRotate[ MAX_PLAYERS ] = 0;
new pausedCameraRot[MAX_PLAYERS] = 0;
forward StartCameraRot( playerid , Float:x , Float:y , Float:z, Float:distance );
public StartCameraRot( playerid , Float:x , Float:y , Float:z, Float:distance )
{
	shouldCameraRotate[ playerid] = 1;
	RotateCamera( playerid , x , y ,z, distance );
}

forward StopCameraRot( playerid );
public StopCameraRot( playerid )
{
	shouldCameraRotate[playerid] = 0;
}

new playerAngle[MAX_PLAYERS];
Float:getXfromDistance( Float:x  , Float:distance , Float:angle)
{
	new Float:a = 0.017453 * (90-angle);
	new Float:rrx;
	rrx = floatcos( a )*distance;
	return rrx+x;
}

Float:getYfromDistance( Float:y , Float:distance ,Float:angle )
{
	new Float:a = 0.017453 * (90-angle);
	new Float:rry;
	rry = floatsin( a )*distance;
	return rry+y;
}

forward RotateCamera( playerid , Float:x , Float:y ,Float:z, Float:distance );
public RotateCamera( playerid , Float:x , Float:y ,Float:z, Float:distance )
{
	if(IsPlayerConnected( playerid ))
	if( shouldCameraRotate[playerid] == 1)
	{
		if(pausedCameraRot[playerid] == 0)
		SetPlayerCameraPos( playerid , getXfromDistance( x , distance , playerAngle[playerid]+=1 ) , getYfromDistance( y , distance , playerAngle[playerid]+=1) ,z );
		SetPlayerCameraLookAt( playerid , x , y , z );
		SetTimerEx("RotateCamera", 50,0,"iffff",playerid,x,y,z,distance);
	}
	else
	    SetCameraBehindPlayer(playerid);
}

stock isPlayerInBank( playerid ){
	if(GetPlayerInterior(playerid) == 17){
		if(getPlayerDistanceFromPoint(playerid,-25.7220,-187.8216,1003.5469) < 20){
		    return 1;
		}
	}
	else if(GetPlayerInterior(playerid) == 10){
		if(getPlayerDistanceFromPoint(playerid,6.0856,-28.8966,1003.5494) < 20){
		    return 1;
		}
	}
	else if(GetPlayerInterior(playerid) == 18){
		if(getPlayerDistanceFromPoint(playerid,-30.9875,-89.6806,1003.5469) < 20){
		    return 1;
		}
	}
	else if(GetPlayerInterior(playerid) == 16){
		if(getPlayerDistanceFromPoint(playerid,-26.1856,-140.9164,1003.5469) < 20){
		    return 1;
		}
	}
	else if(GetPlayerInterior(playerid) == 4){
		if(getPlayerDistanceFromPoint(playerid,-27.844,-26.6737,1003.5573) < 20){
		    return 1;
		}
	}
	else if(GetPlayerInterior(playerid) == 6){
		if(getPlayerDistanceFromPoint(playerid,-26.8339,-55.5846,1003.5469) < 20){
		    return 1;
		}
	}
	return 0;
}

stock givePlayerBankMoney( name[] , Float:amount , by[] )
{
	new strg[256];
	format(strg,256,"UPDATE bank SET balance = balance + %f WHERE userid = '%s'",amount,name);
	mysql_query2(strg,-1,0,TmP);
	format(strg,256,"%s deposited $%f into your account.",by,amount);
	new string1[512];
	format(string1,512,"INSERT INTO statements ( userid , statement ) VALUES ( '%s' , '%s' )",name,strg);
 	mysql_query2(string1,-1,0,TmP);
}

stock removePlayerBankMoney( name[] , Float:amount , by[] )
{
	new strg[256];
	format(strg,256,"UPDATE bank SET balance = balance - %f WHERE userid = '%s'",amount,name);
	mysql_query2(strg,-1,0,TmP);
	format(strg,256,"%s withdrew $%f from your account.",by,amount);

	format(_str,512,"INSERT INTO statements ( userid , statement ) VALUES ( '%s' , '%s' )",name,strg);
 	mysql_query2(_str,-1,0,TmP);
}


stock OnPlayerUseBiz( playerid , bizid , amount )
{
#pragma unused playerid
	new strg[256];
	format(strg,256,"UPDATE bizes SET collection = collection + %d WHERE bizno = %d",amount,bizes[bizid][bizno]);
	mysql_query2(strg,-1,0,TmP);
}

stock getPlayerMoney(playerid)
{
	new strg[256];
	format(strg,256,"SELECT money FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new money = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return money;
}
stock getPlayerDrugs(playerid)
{
	new strg[256];
	format(strg,256,"SELECT drugs FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new drugs = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return drugs;
}
stock getPlayerMuscles(playerid)
{
	new strg[256];
	format(strg,256,"SELECT muscles FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new muscles = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return muscles;
}
stock givePlayerMuscles(playerid,amount)
{
	new strg[256];
	format(strg,256,"UPDATE stats SET muscles = muscles + %d WHERE userid = '%s'",amount,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}
stock getPlayerDrivingSkill(playerid)
{
	new strg[256];
	format(strg,256,"SELECT drivingskill FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new muscles = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return muscles;
}

stock getPlayerFightingSkill(playerid)
{
	new strg[256];
	format(strg,256,"SELECT fightingskill FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new muscles = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return muscles;
}

stock getPlayerWeaponSkill(playerid)
{
	new strg[256];
	format(strg,256,"SELECT weaponskill FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new muscles = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return muscles;
}


stock givePlayerDrivingSkill(playerid,amount)
{
	new strg[256];
	format(strg,256,"UPDATE stats SET drivingskill = drivingskill + %d WHERE userid = '%s'",amount,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}


stock givePlayerDrugs(playerid,amount)
{
	new strg[256];
	format(strg,256,"UPDATE stats SET drugs = drugs + %d WHERE userid = '%s'",amount,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}

stock getPlayerGold(playerid)
{
	new strg[256];
	format(strg,256,"SELECT gold FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new drugs = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return drugs;
}

stock givePlayerGold(playerid,amount)
{
	new strg[256];
	format(strg,256,"UPDATE stats SET gold = gold + %d WHERE userid = '%s'",amount,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}

stock getPlayerFish(playerid){
	new strg[256];
	format(strg,256,"SELECT fish FROM stats WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new drugs = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return drugs;
}

stock givePlayerFish(playerid,amount){
	new strg[256];
	format(strg,256,"UPDATE stats SET fish = fish + %d WHERE userid = '%s'",amount,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}

stock savePlayerMoney(playerid,money){
	new strg[256];
	format(strg,256,"UPDATE stats SET money = %d WHERE userid = '%s'",money,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}

stock setPlayerMoney(playerid,money){
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,money);
}

stock givePlayerMoney(playerid,money){
	new strg[256];
	format(strg,256,"UPDATE stats SET money = money + %d WHERE userid = '%s'",money,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	GivePlayerMoney(playerid,money);
}

stock getPlayerLevel(playerid){
	new strg[256];
	format(strg,256,"SELECT level FROM levels WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new lvl = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return lvl;
}

stock addPlayerPlayingPointByName( name[] ){
	new strg[256];
	format(strg,256,"SELECT playingpoints,level FROM levels WHERE userid = '%s'",name);
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	mysql_fetch_field("playingpoints",strg,TmP);
	new pp = strval(strg);
	mysql_fetch_field("level",strg,TmP);
	new lvl = strval(strg);
	mysql_free_result(TmP);
	pp++;
	if(pp >= (lvl * 1.8))
	{
	    lvl++;
		format(strg,256,"UPDATE levels SET level = %d,playingpoints = 0,time = NOW() WHERE userid = '%s'",lvl,name);
		mysql_query2(strg,-1,0,TmP);
		pp = 0;

	}
	format(strg,256,"UPDATE levels SET playingpoints = %d,time = NOW() WHERE userid = '%s'",pp,name);
	mysql_query2(strg,-1,0,TmP);
}

forward addPlayerPlayingPoint( playerid  );
public addPlayerPlayingPoint( playerid ){
	new strg[256];
	format(strg,256,"SELECT playingpoints,level FROM levels WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	mysql_fetch_field("playingpoints",strg,TmP);
	new pp = strval(strg);
	mysql_fetch_field("level",strg,TmP);
	new lvl = strval(strg);
	mysql_free_result(TmP);
	pp++;
	if(pp >= (lvl * 1.8))
	{
	    lvl++;
		format(strg,256,"UPDATE levels SET level = %d,playingpoints = 0,time = NOW() WHERE userid = '%s'",lvl,getName(playerid));
		mysql_query2(strg,-1,0,TmP);
		format(strg,256,"Level Up! You have gained (%d/%d) playing points",pp,pp);
		sendMessage(playerid,strg,1);
		format(strg,256,"Your current level is %d, playing points: (0/%d).",lvl,floatround((lvl) * 1.8));
		sendMessage(playerid,strg);
		pp = 0;

	}
	format(strg,256,"UPDATE levels SET playingpoints = %d,time = NOW() WHERE userid = '%s'",pp,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	GameText(playerid,"~p~] Playing Point",3000);
}

stock isPlayerTaxiDriver(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Taxi Driver' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerPilot(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Pilot' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}
stock isPlayerMedic(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Medic' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerFuelSupplier(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Fuel Supplier' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerGoldMiner(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Gold Miner' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerDrugDealer(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Drug Dealer' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerFisherman(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Fisherman' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerMechanic(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Mechanic' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerHitman(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Hitman' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerSalesMan(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Sales Man' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock isPlayerPolice(playerid){
	new strg[256];
	format(strg,256,"SELECT current FROM jobs WHERE job = 'Police' AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock getPlayerJobRank(playerid){
	new strg[256];
	format(strg,256,"SELECT rank FROM jobs WHERE current = 1 AND userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new c = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return c;
}

stock setPlayerJobRank(playerid,rank){
	new strg[256];
	format(strg,256,"UPDATE jobs SET rank = %d WHERE current = 1 AND userid = '%s'",rank,getName(playerid));
	mysql_query2(strg,-1,0,TmP);
}

stock jobDuty( playerid ){
	new strg[256];
	format(strg,256,"SELECT duties,rank,job FROM jobs WHERE userid = '%s' AND current = 1",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	if(mysql_num_rows(TmP)){
		new duties,rank,job[20];
		mysql_fetch_field("duties",strg,TmP);
		duties = strval(strg);
		mysql_fetch_field("rank",strg,TmP);
		rank = strval(strg);
		mysql_fetch_field("job",job,TmP);
		mysql_free_result(TmP);
		duties++;
	//	sendMessage(playerid,"You have successfully completed a job duty.");
		if(strcmp(job,"Police",true)==0){

		}
		else if(duties == 365){
			sendMessage(playerid,"Congrats! Your new job rank title is: Ultimate",1);
			rank++;
		}
		else if(duties == 265){
			sendMessage(playerid,"Congrats! Your new job rank title is: Elite",1);
			rank++;
		}
		else if(duties == 185){
			sendMessage(playerid,"Congrats! Your new job rank title is: Expert",1);
			rank++;
		}
		else if(duties == 125){
			sendMessage(playerid,"Congrats! Your new job rank title is: Professional",1);
			rank++;
		}
		else if(duties == 80){
			sendMessage(playerid,"Congrats! Your new job rank title is: Advanced",1);
			rank++;
		}
		else if(duties == 50){
			sendMessage(playerid,"Congrats! Your new job rank title is: Skilled",1);
			rank++;
		}
		else if(duties == 30){
			sendMessage(playerid,"Congrats! Your new job rank title is: Intermediate",1);
			rank++;
		}
		else if(duties ==  15){
			sendMessage(playerid,"Congrats! Your new job rank title is: Rookie",1);
			rank++;
		}
		else if(duties == 5){
			sendMessage(playerid,"Congrats! Your new job rank title is: Beginner",1);
			rank++;
		}
		else{
	//	    format(string,256,"Job: %s  |  Duties: %d  |  Rank: %s",job,duties,rankName[rank]);
	//		sendMessage(playerid,string);
		}
		format(strg,256,"UPDATE jobs SET rank = %d, duties = %d,lasttime = NOW() WHERE current = 1 AND userid = '%s'",rank,duties,getName(playerid));
		mysql_query2(strg,-1,0,TmP);
	}
	else
		mysql_free_result(TmP);
}

stock getHouse( name[] ){
	new strg[256];
	format(strg,256,"SELECT houseno FROM houses WHERE owner = '%s'",name);
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new h = mysql_fetch_int(TmP);
	mysql_free_result(TmP);
	return h;
}

forward payday();
public payday(){
	for(new a = 0;a < MAX_PLAYERS;a++){
	    if(IsPlayerConnected(a) && !IsPlayerNPC(a)){
				printf("checking %d for payday",a);
//		    if(player[a][minutes] >= 10){
			    new name[23];
			    format(name,23,"%s",getName(a));
				printf("Payday for %s is initializing.",name);
				new Float:bal =  getPlayerBankMoney( name );
			    new Float:intr;
				intr = bal * 1.0 /100.0;

			    format(string,256,"SELECT houseno FROM houses WHERE houseno < 90000 AND owner = '%s'",name);
			    mysql_query2(string);
			    mysql_store_result();
				new motelRents = 0;
				do
				{
				    new r = mysql_fetch_int();
				    new thise;
				    for(new i = 0;i < sizeof(motel);i++){
			            if(motel[i][houseno] == 0){
			                thise = i;
			            }
				        if(motel[i][houseno] == r){
				            motelRents += motel[thise][cost];
				        }
				    }
				}
				while(mysql_fetch_row_data());
				mysql_free_result();

				format(string,256,"SELECT level FROM levels WHERE userid = '%s'",name);
				mysql_query2(string);
				mysql_store_result();
				new level = mysql_fetch_int();
				mysql_free_result();


				format(string,256,"SELECT duties,salaryrate FROM jobs WHERE userid = '%s' AND current = 1 AND TIMESTAMPDIFF(MINUTE,lasttime,NOW()) < 60",name);
				mysql_query2(string);
				mysql_store_result();
				new Float:paycheck = 0;
				if(mysql_num_rows() == 1){
					mysql_fetch_field("duties",string);
					new duties = strval(string);
					mysql_fetch_field("salaryrate",string);
					new Float:salaryrate = floatstr(string);
					paycheck =  1.0 * (1000.0 * salaryrate) + (float(duties) * 20.0)+ (float(level) * 200.0);
				}
				else{
					mysql_fetch_field("duties",string);
					new duties = strval(string);
					mysql_fetch_field("salaryrate",string);
					new Float:salaryrate = floatstr(string);
					paycheck =  60.0/100.0 * (1000.0 * salaryrate) + (float(duties) * 20.0)+ (float(level) * 200.0);
				}
				new Float:total = intr + float(motelRents) + paycheck;
				new hid = getHouse(name);
				if(hid != -1){
					new date,month,year;
					getdate(year,month,date);
					format(_str,512,
					"Urban Development Team\n\
					Las Venturas Bank\n\
					\n\
					%2d-%2d-%d\n\
					\n\
					%s\n\
					House # %d\n\
					\n\
					Dear %s,\n\
					Here is your bank balance details\n\
					for todays paycheck:\n\
					Bank Intrest Gain: +$%f\n\
					Rents/Tax: -$%f\n\
					Paycheck: +$%f\n\
					------------------------\n\
					Grand Total: $%f\n\
					------------------------\n\
					Sincerely,\n\
					\n\
					Urban Development Team",date,month,year,name,hid,name,intr,float(motelRents),paycheck,total);
					SendMail( hid ,"Urban Development Team", "Payday", _str);
				}
				if(total > 0.0){
					givePlayerBankMoney(name,total,"Urban Development Team");
			    	format(string,256,"UPDATE globalstats SET paydays = paydays + %d WHERE userid = '%s'",floatround(total),name);
					mysql_query2(string);
				}
				printf("Payday for %s completed.",name);
//		    }
		}
	}
}

forward checkPayday();
public checkPayday(){
    printf("checking payday");
	new hour,minute;
	gettime(hour,minute);
	SetWorldTime(hour);
	if(LastPayday != hour){ // 1|8
		LastPayday = hour;
		payday();
	}
}

stock isAnyPlayerInVehicle(vehicleid){
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if((IsPlayerConnected(i)) && (IsPlayerInVehicle(i,vehicleid))){
	        if(GetPlayerState(i) == PLAYER_STATE_DRIVER){
	            return 1;
	        }
	    }
	}
	return 0;
}

stock isTaxi( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if(( m == 420) || (m == 438))
	    return 1;
	return 0;
}

stock isBoat( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if(( m == 453) || (m == 484))
	    return 1;
	return 0;
}

stock isPlane( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if((m == 577) || (m == 469))
	    return 1;
	return 0;
}

stock isPetrolTruck( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if( m == 403)
	    return 1;
	return 0;
}
stock isAmbulance( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if( m == 416)
	    return 1;
	return 0;
}
stock isPoliceCar( vehicleid ){
	new m = GetVehicleModel( vehicleid );
	if(m == 598)
	    return 1;
	return 0;
}

/*forward bleedPlayer( playerid );
public bleedPlayer( playerid ){
	if(IsPlayerConnected(playerid)){
	    if(player[playerid][Spawned] == 1){
			if(	hunger[playerid] >= getPlayerMuscles(playerid)){
			    new Float:h;
			    GetPlayerHealth(playerid,h);
			    SetPlayerHealth(playerid,h-5);
				SetTimerEx("bleedPlayer",2500,0,"i",playerid);
			}
		}
	}
}

*/
forward loopAll( );
public loopAll( ){
	static Float:xyz[MAX_PLAYERS][3];
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && player[i][LoggedIn]){
		    if(consumedDrugs[i] > 0){
				consumedDrugs[i] -= 1;
				if(consumedDrugs[i] <= 0){
				    //SetPlayerDrunkLevel(i,0);
				    consumedDrugs[i] = 0;
				}
			}
			if((getPlayerDistanceFromPoint(i,637.6959,832.1423,-42.9609) < 5) ||
				(getPlayerDistanceFromPoint(i,638.2682,850.2251,-42.9609) < 5)  ||
				(getPlayerDistanceFromPoint(i,601.0746,867.5930,-42.9609) < 5)){
				if(isPlayerGoldMiner(i)){
				    if(getPlayerGold(i) < 100000){
					    givePlayerGold(i,1);
					    format(string,256,"%dcg gold",getPlayerGold(i));
					    GameText(i,string,5000);
						dutyPoints[i]++;
						if(dutyPoints[i] >= 75){
						    jobDuty(i); // gold minor
						    dutyPoints[i] = 0;
						}
					}
				}
			}
			if(isBoat(GetPlayerSurfingVehicleID(i))){
				if(isPlayerFisherman(i)){
				    if(random(10) == 5){
						if(getPlayerFish(i) < 100){
						    givePlayerFish(i,1);
						    format(string,256,"%d fishes",getPlayerFish(i));
						    GameText(i,string,5000);
							dutyPoints[i]++;
							if(dutyPoints[i] >= 10){
							    jobDuty(i); // fisherman
							    dutyPoints[i] = 0;
							}
						}
					}
				}
			}

		    if(GetPlayerState(i) == PLAYER_STATE_DRIVER){
				new v = GetPlayerVehicleID(i);
				if(isTaxi( v )){
				    new Float:x,Float:y,Float:z;
				    GetVehiclePos(v,x,y,z);
				    distanceTravelled[i ] += GetDistanceBetweenPoints(x,y,z,xyz[i][0],xyz[i][1],xyz[i][2]);
					xyz[i][0] = x;
					xyz[i][1] = y;
					xyz[i][2] = z;
					if(distanceTravelled[i] >= 1000){
						jobDuty( i ); //taxi driver
						distanceTravelled[i] = 0.0;
					}
				}
				else if(isAmbulance( v )){
				    new Float:x,Float:y,Float:z;
				    GetVehiclePos(v,x,y,z);
				    distanceTravelled[i ] += GetDistanceBetweenPoints(x,y,z,xyz[i][0],xyz[i][1],xyz[i][2]);
					xyz[i][0] = x;
					xyz[i][1] = y;
					xyz[i][2] = z;
					if(distanceTravelled[i] >= 1000){
						jobDuty( i ); // medic
						distanceTravelled[i] = 0.0;
					}

				}
				else if(isPoliceCar( v )){
				    new Float:x,Float:y,Float:z;
				    GetVehiclePos(v,x,y,z);
				    distanceTravelled[i ] += GetDistanceBetweenPoints(x,y,z,xyz[i][0],xyz[i][1],xyz[i][2]);
					xyz[i][0] = x;
					xyz[i][1] = y;
					xyz[i][2] = z;
					if(distanceTravelled[i] >= 2500){
						jobDuty( i ); // police
						distanceTravelled[i] = 0.0;
					}

				}

				static Float:traveled[MAX_VEHICLES],Float:pTraveled[MAX_VEHICLES][3];
				new Float:x,Float:y,Float:z;
				GetVehiclePos(v,x,y,z);
				traveled[v] += GetDistanceBetweenPoints(x,y,z,pTraveled[v][0],pTraveled[v][1],pTraveled[v][2]);
				pTraveled[v][0] = x;
				pTraveled[v][1] = y;
				pTraveled[v][2] = z;
				if(traveled[v] >= 200){
				    fuel[v]--;
				    traveled[v] = 00.0;
				}
		    }
		}
	}
}

forward checkVehicle( playerid , v);
public checkVehicle( playerid , v){

    if(getPlayerDistanceFromVehicle(playerid,v) < 5){
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(IsPlayerInVehicle(i,v)){
		        unfreezePlayer(playerid);
		        checking[playerid] = 0;
		        return;
		    }
		}
		checking[playerid]++;
		if(checking[playerid] == 1){
		    sendMessage(playerid,"Checking vehicle panels condition...",1);
		    format(string,256,"%s is checking vehicle panel condition.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						sendMessage(i,string);
				    }
				}
			}
			SetTimerEx("checkVehicle",3000,0,"ii",playerid,v);
		}
		else if(checking[playerid] == 2){
		    sendMessage(playerid,"Checking vehicle doors condition...");
		    format(string,256,"%s is checking vehicle door condition.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						sendMessage(i,string);
				    }
				}
			}
			SetTimerEx("checkVehicle",3000,0,"ii",playerid,v);
		}
		else if(checking[playerid] == 3){
		    sendMessage(playerid,"Checking vehicle lights condition...");
		    format(string,256,"%s is checking vehicle lights condition.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						sendMessage(i,string);
				    }
				}
			}
			SetTimerEx("checkVehicle",3000,0,"ii",playerid,v);
		}
		else if(checking[playerid] == 4){
		    sendMessage(playerid,"Checking vehicle tires condition...");
		    format(string,256,"%s is checking vehicle tires condition.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						sendMessage(i,string);
				    }
				}
			}
			SetTimerEx("checkVehicle",3000,0,"ii",playerid,v);
		}
		else if(checking[playerid] == 5){
		    sendMessage(playerid,"Checking vehicle overall health condition...");
		    format(string,256,"%s is checking vehicle overall health condition.",getName(playerid));
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						sendMessage(i,string);
				    }
				}
			}
			SetTimerEx("checkVehicle",3000,0,"ii",playerid,v);
		}
		else if(checking[playerid] == 6){
		    new Float:health;
		    GetVehicleHealth(v,health);
		    format(string,256,"Vehicle ID: %d | Overall Health: %f",v,health);
		    sendMessage(playerid,string);
		    new p,d,l,t,tp = 0;
		    GetVehicleDamageStatus(v,p,d,l,t);
		    if(t == 15){
		        tp = 4;
		    }
		    else if(t > 10){
		        tp = 3;
		    }
		    else if(t > 5){
		        tp = 2;
		    }
		    else if(t > 0){
		        tp = 1;
		    }

		    format(string,256,"|  Panels: %d  |  Doors: %d  |  Lights: %d  |",p,d,l);
		    sendMessage(playerid,string);
		    format(string,256,"Number of Tires Popped: %d",tp);
		    sendMessage(playerid,string);

			checking[playerid] = 0;
			unfreezePlayer(playerid);
			if(isPlayerTaxiDriver(playerid)){
			    SetVehicleHealth(v,999);
			}
		}
	}
	else{
		unfreezePlayer(playerid);
		checking[playerid] = 0;
	}
}

forward replacePart(playerid,v,part);
public replacePart(playerid,v,part){
	if(getPlayerDistanceFromVehicle(playerid,v) < 5){
		for(new i = 0;i < MAX_PLAYERS;i++){
		    if(IsPlayerInVehicle(i,v)){
		        unfreezePlayer(playerid);
		        return;
		    }
		}
		replacing[playerid]++;
		if(replacing[playerid] >= 100){
		    unfreezePlayer(playerid);
		    replacing[playerid] = 0;
		    new p,d,l,t;
		    GetVehicleDamageStatus(v,p,d,l,t);
		    new Float:h;
		    GetVehicleHealth(v,h);
		    new partName[10];
		    if(part == 1){
				UpdateVehicleDamageStatus(v,p,d,l,0);
			    SetVehicleHealth(v,h + h * 10/100);
				format(partName,10,"tires");
		    }
		    else if(part == 2){
				UpdateVehicleDamageStatus(v,0,d,l,t);
				SetVehicleHealth(v,h + h * 50/100);
				format(partName,10,"panels");
		    }
		    else if(part == 3){
				UpdateVehicleDamageStatus(v,p,0,l,t);
				SetVehicleHealth(v,h + h * 25/100);
				format(partName,10,"doors");
		    }
		    else if(part == 4){
				UpdateVehicleDamageStatus(v,p,d,0,t);
				SetVehicleHealth(v,h + h * 25/100);
				format(partName,10,"lights");
		    }
		    else if(part >= 5){
		        new paint = part -5;
		        ChangeVehicleColor(v,paint,paint);
		        format(partName,10,"paint");
		    }
		    format(string,256,"You have replaced %s successfully.",partName);
		    sendMessage(playerid,string,1);
			dutyPoints[playerid]++;
			if(dutyPoints[playerid] >= 15){
			    jobDuty(playerid); // mechanic
			    dutyPoints[playerid] = 0;
			}
		    format(string,256,"%s has replaced the %s.",getName(playerid),partName);
			for(new i = 0;i < MAX_PLAYERS;i++){
			    if(i != playerid){
				    if(isPlayerClose(i,playerid)){
						SendClientMessage(i,COLOR_ME,string);
				    }
				}
			}
		}
		else{
			format(string,256,"~b~%d",replacing[playerid]);
	    	GameText(playerid,string,100);
        	SetTimerEx("replacePart",100,0,"iii",playerid,v,part);
		}
	}
	else{
		unfreezePlayer(playerid);
	}
}

forward bombPlaced(playerid,v);
public bombPlaced(playerid,v){

	checking[playerid]++;
	if(checking[playerid] >= 11){
		checking[playerid] =  0;
	}
	else if(checking[playerid] >= 10){
	    new Float:x,Float:y,Float:z;
	    GetVehiclePos(v,x,y,z);
		bombID[playerid] = CreateExplosion(x,y,z,10,10);
		GameText(playerid,"~r~Exploded",1000);
		checking[playerid] =  11;
		SetTimerEx("bombPlaced",1000,0,"ii",playerid,v);
	}
	else{
		format(string,256,"~r~%d",10-checking[playerid]);
    	GameText(playerid,string,1000);
    	SetTimerEx("bombPlaced",1000,0,"ii",playerid,v);
	}
}
stock SetPlayerJail(playerid){
	new Float:jails[3][4] =
	{
		{198.1349,162.0804,1003.0300,24.3831},
		{198.1261,174.6805,1003.0234,209.8438},
		{193.7771,175.3129,1003.0234,337.1648}
	};
	new r = 0;
	new Float:cd = 99999.999;
	for(new i = 0;i < sizeof(jails);i++){
		new Float:d = getPlayerDistanceFromPoint(playerid,jails[i][0],jails[i][1],jails[i][2]);
		if( d < cd){
		    r = i;
		}
	}
	format(string,256,"SELECT reason FROM crimes WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	mysql_store_result();
	new time = 0;
	do
	{
	    mysql_fetch_row(string);
		format(string,256,"Jail Time: 3 mins | Crime: %s.",string);
		sendMessage(playerid,string,1);
		time += 180;
	}
	while(mysql_fetch_row_data());
	mysql_free_result();
	SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid, 3);
	SetPlayerPos(playerid,jails[r][0],jails[r][1],jails[r][2]);
	SetTimerEx("respawnPlayer",time * 1000,0,"i",playerid);
}
stock surrender(playerid){
	format(string,256,"SELECT reason FROM crimes WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	mysql_store_result();
	new time = 0;
	do
	{
	    mysql_fetch_row(string);
		format(string,256,"Jail Time: 1 mins | Crime: %s.",string);
		sendMessage(playerid,string,1);
		time += 60;
	}
	while(mysql_fetch_row_data());
	mysql_free_result();
	SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid, 6);
	SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
	format(string,256,"DELETE FROM crimes WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	SetPlayerWantedLevel(playerid,0);
	SetTimerEx("respawnPlayer",time * 1000,0,"i",playerid);
}

forward respawnPlayer( playerid );
public respawnPlayer( playerid ){
	sendMessage(playerid,"Your jail sentance was complete.",1);
	spawnPlayer(playerid);
	format(string,256,"DELETE FROM crimes WHERE userid = '%s'",getName(playerid));
	mysql_query2(string);
	SetPlayerWantedLevel(playerid,0);
}

forward spawnPlayer( playerid );
public spawnPlayer( playerid ){
	SpawnPlayer(playerid);
}


forward testCount( playerid );
public testCount( playerid ){
	const end = 180;
	if((GetPlayerVirtualWorld(playerid) == 666) && (IsPlayerInAnyVehicle(playerid))){
		count[playerid]++;
		if(count[playerid] < 5){
		    format(string,256,"~r~%d",5-count[playerid]);
			GameText(playerid,string,1000);
			SetTimerEx("testCount",500,0,"i",playerid);
		}
		else{
			if(count[playerid] == 5){
			    unfreezePlayer(playerid);
			    if(GetPlayerVehicleID(playerid) == police){
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerNPC(i)){
				            if(GetPlayerSkin(i) == 298){
						    	SendClientMessage(i,0,"start");
//						    	printf("npc %d");
						    }
					    }
					}
				}
			}
		    if(count[playerid] >= end){
			    if(GetPlayerVehicleID(playerid) == police){
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerNPC(i)){
				            if(GetPlayerSkin(i) == 298){
								SendClientMessage(i,0,"stop");
								SendClientMessage(i,0,"start");
								SendClientMessage(i,0,"pause");
						    }
					    }
					}
				}
				DisablePlayerRaceCheckpoint(playerid);
		        SetPlayerVirtualWorld(playerid,0);
				SpawnPlayer(playerid);
		        sendMessage(playerid,"Time out. You failed the test, try again.",1);

		    }
			else{
			    new m,s;
				new a = end - count[playerid];
				m = a / 60;
				s = a % 60;
			    format(string,256,"%2d:%2d",m,s);
				GameText(playerid,string,1000);
				SetTimerEx("testCount",500,0,"i",playerid);
			    if(GetPlayerVehicleID(playerid) == police){
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(IsPlayerNPC(i)){
				            if(GetPlayerSkin(i) == 298){
								new v = GetPlayerVehicleID(i);
								new Float:x,Float:y,Float:r;
								new Float:fx,Float:fy;
								GetVehiclePos(v,x,y,r);
								GetVehicleZAngle(v,r);
								GetXYInFrontOfPoint(x,y,fx,fy,r,4);
								GetPlayerPos(playerid,x,y,r);
								if(getPlayerDistanceFromPoint( playerid, fx,fy,r) < 3.0){
									SendClientMessage(i,0,"stop");

									SendClientMessage(i,0,"start");
									SendClientMessage(i,0,"pause");
									SpawnPlayer(playerid);

									setJob( playerid , 11 );
								    SetPlayerVirtualWorld(playerid,0);
									sendMessage(playerid,"Congrats, You have passed the test.",1);
									sendMessage(playerid,"Now you can apply for a post( at the forums ).");
								}
								else if(getPlayerDistanceFromPoint( playerid, fx,fy,r) > 350.0){
									SendClientMessage(i,0,"stop");

									SendClientMessage(i,0,"start");
									SendClientMessage(i,0,"pause");
									RemovePlayerFromVehicle(playerid);
									SetPlayerVirtualWorld(playerid,0);
									spawnPlayer(playerid);

									format(string,256,"UPDATE jobs SET lasttime = NOW() WHERE job ='Police' AND userid = '%s'",getName(playerid));
									mysql_query2(string);
							        sendMessage(playerid,"Suspect got away. You failed the test.",1);
								}
								break;
						    }
					    }
					}
				}
			}
		}
	}
	else{
	    count[playerid] = 0;
	    SetPlayerVirtualWorld(playerid,0);
	    DisablePlayerRaceCheckpoint(playerid);
		spawnPlayer(playerid);
	    sendMessage(playerid,"You quit the test.",1);
	}
}

stock setJob( playerid , i ){
    format(string,256,"UPDATE jobs SET current = 1, joined = NOW() WHERE job = '%s' AND userid = '%s'",jobName[i],getName(playerid));
	mysql_query2(string);
	format(string,256,"From now you are a %s.",jobName[i]);
	sendMessage(playerid,string,1);

	sendMessage(playerid,string);
	new date,month,year;
	getdate(year,month,date);
	new hid = getHouse(getName(playerid));
	format(_str,512,
	"Urban Development Team\n\
	Fabulous Las Venturas\n\
	\n\
	%2d-%2d-%d\n\
	\n\
	%s\n\
	House # %d\n\
	\n\
	Dear %s\n\
	Your job application was approved. From now\n\
	you are a %s.\n\
	\n\
	Makesure you work sincerely else we wont\n\
	mind choosing someone for your place.\n\
	\n\
	Sincerely,\n\
	\n\
	Urban Development Team",date,month,year,getName(playerid),hid,getName(playerid),jobName[i]);
	SendMail( hid , "Urban Development Team" , "New Job" , _str);
	if(isPlayerTaxiDriver(playerid)){
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isTaxi(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
	else if(isPlayerPilot(playerid)){
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isPlane(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
	else if(isPlayerMedic(playerid)){
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isAmbulance(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
	else if(isPlayerFuelSupplier(playerid)){
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isPetrolTruck(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
	else if(isPlayerFisherman(playerid)){
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isBoat(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
	else if(isPlayerPolice(playerid) && getPlayerJobRank(playerid) > 1){
	    format(string,256,"UPDATE stats SET skin = 280 WHERE userid = '%s'",getName(playerid));
	    mysql_query2(string);
	    for(new j = 0;j < MAX_VEHICLES;j++){
	        if(IsVehicleStreamedIn(j,playerid)){
	            if(isPoliceCar(j)){
	                SetVehicleParamsForPlayer(j,playerid,0,0);
	            }
	        }
	    }
	}
}

new colors[] = {
0xFFA07AAA,
0x90EE90AA,
0xFFDEADAA,
0xFFB6C1AA,
0xFF7F50AA,
0xF0E68CAA,
0xE0FFFFAA,
0xF5F5DCAA,
0xDDA0DDAA,
0xA9A9A9AA
};
stock sendMessage( playerid , message[] , isnew = 0){
	static player_color[MAX_PLAYERS] = 0;
	if(isnew == 1){
	    new i = 0;
	    for(i = 0;i < sizeof(colors)-1;i++){
		    if(player_color[playerid] == colors[i]){
		        player_color[playerid] = colors[i+1];
		        i = -1;
				break;
		    }
		}
		if(i != -1)
	        player_color[playerid] = colors[0];
	}
	SendClientMessage(playerid,player_color[playerid],message);
//	addBrief(playerid,message);
	printf("%s(%s)",message,getName(playerid));
	return 1;
}

/*
forward revealIdentity( playerid );
public revealIdentity( playerid ){
	format(string,256,"%s(%d)",getName(playerid),playerid);
//	Update3DTextLabelText(tag1[playerid],GetPlayerColor(playerid),string);
	sendMessage(playerid,"Your identity is again normal.",1);
}
*/
forward updateDrugPlants();
public updateDrugPlants(){
	mysql_query2("UPDATE drugs SET drugs = drugs + 1 WHERE drugs < 100 AND owner  != 'NONE'");
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

//-------------------------------------------------

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}

//-------------------------------------------------

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

//-------------------------------------------------

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}


stock isPlayerAdmin( playerid ){
	new strg[256];
	if(IsPlayerAdmin(playerid)){
	    return 1;
	}
	format(strg,256,"SELECT level FROM admins WHERE userid = '%s'",getName(playerid));
	mysql_query2(strg,-1,0,TmP);
	mysql_store_result(TmP);
	new num = mysql_num_rows(TmP);
	mysql_free_result(TmP);
	return num;
}

stock isAdminLevel( playerid , level ){
	new strg[256];
	if(IsPlayerAdmin(playerid)){
	    return 1;
	}
	if(isPlayerAdmin(playerid)){
		format(strg,256,"SELECT level FROM admins WHERE userid = '%s'",getName(playerid));
		mysql_query2(strg,-1,0,TmP);
		mysql_store_result(TmP);
		new lvl = mysql_fetch_int(TmP);
		mysql_free_result(TmP);
		if(level <= lvl)
			return 1;
	}
	return 0;
}


stock getAdminLevel( playerid  ){
	new strg[256];
	if(IsPlayerAdmin(playerid)){
	    return 1;
	}
	if(isPlayerAdmin(playerid)){
		format(strg,256,"SELECT level FROM admins WHERE userid = '%s'",getName(playerid));
		mysql_query2(strg,-1,0,TmP);
		mysql_store_result(TmP);
		new lvl = mysql_fetch_int(TmP);
		mysql_free_result(TmP);
		return lvl;
	}
	return 0;
}


stock getPhone(playerid){
	new strg[256];
	if(IsPlayerConnected(playerid)){
		format(strg,256,"SELECT number FROM phone WHERE userid = '%s'",getName(playerid));
		mysql_query2(strg,-1,0,TmP);
		mysql_store_result(TmP);
		new phon = mysql_fetch_int(TmP);
		mysql_free_result(TmP);
		return phon;
	}
	return 0;
}

stock isPlayerClose(playerid,toplayerid){
	if(IsPlayerConnected(playerid) && playerid != toplayerid){
	    if(getPlayerDistanceFromPlayer(playerid,toplayerid) < 30){
	        return 1;
	    }
	}
	return 0;
}

forward failedToTie( playerid , i );
public failedToTie( playerid , i ){
    if((tied[playerid] < 100) && (tied[playerid] > 0)){
		if(!(isPlayerPolice(i) && getPlayerJobRank(i) > 1)){
			format(string,256,"You got escaped from being tied by %s.",getName(i));
			sendMessage(playerid,string,1);
			format(string,256,"You have failed to tie %s.",getName(playerid));
			sendMessage(i,string,1);
			format(string,256,"%s has failed to tie %s.",getName(i),getName(playerid));
			for(new j = 0;j < MAX_PLAYERS;j++){
			    if(isPlayerClose(playerid,i) && playerid != i && i != j){
			        sendMessage(j,string,1);
			    }
			}
		}
		else{
			format(string,256,"You got escaped from being cuff by %s.",getName(i));
			sendMessage(playerid,string,1);
			format(string,256,"You have failed to cuff %s.",getName(playerid));
			sendMessage(i,string,1);
			format(string,256,"%s has failed to cuff %s.",getName(i),getName(playerid));
			for(new j = 0;j < MAX_PLAYERS;j++){
			    if(isPlayerClose(playerid,i) && playerid != i && i != j){
			        sendMessage(j,string,1);
			    }
			}
		}
        tryingtotie[i] = -1;
        unfreezePlayer(playerid);
        unfreezePlayer(i);
    }
}

stock getVehicleFuelCapacity( vehicleid ){
	new m = GetVehicleModel(vehicleid);
	new nofuel[] = {
	    592, 577, 511, 593,
	    520, 553, 476, 519,
	    460, 513, 548, 425,
	    417, 487, 488, 497,
	    563, 447, 469, 472,
	    473, 493, 595, 484,
	    430, 453, 452, 446,
	    454, 509, 510, 481
	};
	for(new i = 0;i < sizeof(nofuel);i++){
	    if(nofuel[i] == m){
	        return 0;
	    }
	}
	if(isPlane( vehicleid )){
	    return 0;
	}
	if(isTaxi( vehicleid )){
	    return 0;
	}
	if(isBoat( vehicleid )){
	    return 0;
	}
	if(isAmbulance( vehicleid )){
	    return 0;
	}
	if(isPoliceCar( vehicleid )){
	    return 0;
	}
	if(taxi == vehicleid){
	    return 0;
	}
	if(sentinel == vehicleid){
	    return 0;
	}
	if(ambulance == vehicleid){
	    return 0;
	}
	if(police == vehicleid){
	    return 0;
	}
	if(plane == vehicleid){
	    return 0;
	}

	new cap[9] = {
	    250,300,350,400,450,
		500,450,300,300
	};
 	return cap[m%9];
}

IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(getPlayerDistanceFromPoint(playerid,1004.0070,-939.3102,42.1797) < 20|| getPlayerDistanceFromPoint(playerid,1944.3260,-1772.9254,13.3906)<20)
		{//LS
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,-90.5515,-1169.4578,2.4079) < 20|| getPlayerDistanceFromPoint(playerid,-1609.7958,-2718.2048,48.5391)<20)
		{//LS
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,-2029.4968,156.4366,28.9498) < 20|| getPlayerDistanceFromPoint(playerid,-2408.7590,976.0934,45.4175)<20)
		{//SF
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,-2243.9629,-2560.6477,31.8841) < 20|| getPlayerDistanceFromPoint(playerid,-1676.6323,414.0262,6.9484)<20)
		{//Between LS and SF
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,2202.2349,2474.3494,10.5258) < 20|| getPlayerDistanceFromPoint(playerid,614.9333,1689.7418,6.6968)<20)
		{//LV
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,-1328.8250,2677.2173,49.7665) < 20|| getPlayerDistanceFromPoint(playerid,70.3882,1218.6783,18.5165)<20)
		{//LV
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,2113.7390,920.1079,10.5255) < 20|| getPlayerDistanceFromPoint(playerid,-1327.7218,2678.8723,50.0625)<20)
		{//LV
		    return 1;
		}
		else if(getPlayerDistanceFromPoint(playerid,656.4265,-559.8610,16.5015) < 20|| getPlayerDistanceFromPoint(playerid,656.3797,-570.4138,16.5015)<20)
		{//Dillimore
		    return 1;
		}
	}
	return 0;
}

forward fuelCar( playerid , charge , amount , done );
public fuelCar( playerid , charge , amount , done ){
	if(IsPlayerInAnyVehicle(playerid) && (IsAtGasStation(playerid))){
	    new v = GetPlayerVehicleID(playerid);
		if(done < amount){
			fuel[v] += 1;
			givePlayerMoney(playerid,-2);
			addGlobalStats(playerid,"fuel",2);
			done++;
			fueling[playerid] = SetTimerEx("fuelCar",500,0,"iiii",playerid,charge,amount,done);
			for(new i = 0;i < sizeof(bizes);i++){
			    if(getPlayerDistanceFromPoint(playerid,bizes[i][ix],bizes[i][iy],bizes[i][iz]) < 20){
					OnPlayerUseBiz( playerid ,  i , 1 ); // gas stations
					break;
				}
			}
		}
		else{
			format(string,256,"Your vehicle has been fueled for $%d(%dl).",charge,amount);
			sendMessage(playerid,string);
			fueling[playerid] = 0;
		}
	}
	else{
		fueling[playerid]=0;
	}
}

stock addGlobalStats( playerid , stat[] , amount ){
	new strng[256];
	format(strng,256,"UPDATE globalstats SET %s = %s + %d WHERE userid = '%s'",stat,stat,amount,getName(playerid));
	mysql_query2(strng);
}

forward hoursCount(playerid);
public hoursCount(playerid){
	printf("hourcount");
	player[playerid][minutes]++;
	if(player[playerid][minutes] % 60 == 0){
		addGlobalStats(playerid,"hours",1);
		format(string,256,"SELECT referrer FROM referrers WHERE userid = '%s'",getName(playerid));
		mysql_query2(string);
		mysql_store_result();
		if(mysql_num_rows()){
			mysql_fetch_row(string);
	        addPlayerPlayingPointByName( string );
		}
		mysql_free_result();
	}
}

stock LoadStaticVehiclesFromFile(const filename[])
{
	new File:file_ptr;
	new line[256];
	new var_from_line[64];
	new vehicletype;
	new Float:SpawnX;
	new Float:SpawnY;
	new Float:SpawnZ;
	new Float:SpawnRot;
    new Color1, Color2;
	new index;
	new vehicles_loaded;

	file_ptr = fopen(filename,filemode:io_read);
	if(!file_ptr) return 0;

	vehicles_loaded = 0;

	while(fread(file_ptr,line,256) > 0)
	{
	    index = 0;

	    // Read type
  		index = token_by_delim(line,var_from_line,',',index);
  		if(index == (-1)) continue;
  		vehicletype = strval(var_from_line);
   		if(vehicletype < 400 || vehicletype > 611) continue;

  		// Read X, Y, Z, Rotation
  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnX = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnY = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnZ = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnRot = floatstr(var_from_line);

  		// Read Color1, Color2
  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		Color1 = strval(var_from_line);

  		index = token_by_delim(line,var_from_line,';',index+1);
  		Color2 = strval(var_from_line);

  		//printf("%d,%d,%f,%f,%f,%f,%d,%d",total_vehicles_from_files+vehicles_loaded+1,vehicletype,SpawnX,SpawnY,SpawnZ,SpawnRot,Color1,Color2);

		AddStaticVehicleEx(vehicletype,SpawnX,SpawnY,SpawnZ,SpawnRot,Color1,Color2,(30*60)); // respawn 30 minutes
		vehicles_loaded++;
	}

	fclose(file_ptr);
	printf("Loaded %d vehicles from: %s",vehicles_loaded,filename);
	return vehicles_loaded;
}

//------------------------------------------------

stock strrest(const strng[], &index)
{
	new length = strlen(strng);
	while ((index < length) && (strng[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[128];
	while ((index < length) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = strng[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

//----------------------------------------------------------
// Tokenise by a delimiter
// Return strng and index of the end determined by the
// provided delimiter in delim

stock token_by_delim(const strng[], return_str[], delim, start_index)
{
	new x=0;
	while(strng[start_index] != EOS && strng[start_index] != delim) {
	    return_str[x] = strng[start_index];
	    x++;
	    start_index++;
	}
	return_str[x] = EOS;
	if(strng[start_index] == EOS) start_index = (-1);
	return start_index;
}

stock freezePlayer( playerid ){
	TogglePlayerControllable(playerid,0);
}
stock unfreezePlayer( playerid ){
	TogglePlayerControllable(playerid,1);
}

forward OnPlayerUpdateEx(playerid);
public OnPlayerUpdateEx(playerid){
	if(IsPlayerConnected(playerid) && updated[playerid] == 1){
		new diff = getPlayerMoney(playerid) - GetPlayerMoney(playerid);
		if(diff > 0){
			new i = GetPlayerVirtualWorld(playerid);

			if(isPlayerInAmmu(playerid)){
 				addGlobalStats(playerid,"weapons",diff);
				savePlayerMoney(playerid,GetPlayerMoney(playerid));
				if(i != 0){
					OnPlayerUseBiz( playerid , i-1 , diff ); // ammunations
				}
			}
			else if(isPlayerInFoodShop(playerid)){
 				addGlobalStats(playerid,"food",diff);
				new Float:h;
				GetPlayerHealth(playerid,h);
				if(h >= 100.0){
				    GetPlayerArmour(playerid,h);
				    h += 10.0;
				    if(getPlayerMuscles(playerid) < h){
				        h = getPlayerMuscles(playerid);
				    }
					SetPlayerArmour(playerid,h);
				}
				savePlayerMoney(playerid,GetPlayerMoney(playerid));
				if(i != 0){
					OnPlayerUseBiz( playerid , i-1 , diff ); // food shops
				}
			}
			else if((diff == 100) || (diff == 150)){
			    if(IsPlayerInAnyVehicle(playerid) && GetPlayerInterior(playerid)==0){
			        new vehicleid = GetPlayerVehicleID(playerid);
					new Float:health;
					GetVehicleHealth(vehicleid,health);
					if(health == 1000){
						for(new j = 0;j < sizeof(bizes);j++){
						    if(getPlayerDistanceFromPoint(playerid,bizes[j][ix],bizes[j][iy],bizes[j][iz]) < 20){
								savePlayerMoney(playerid,GetPlayerMoney(playerid));
								OnPlayerUseBiz( playerid ,  j , diff ); // pay n sprays
								break;
							}
						}
					}
				}
			}
			else{
				setPlayerMoney(playerid,getPlayerMoney(playerid));
			}
		}
		else if(diff < 0){
			setPlayerMoney(playerid,getPlayerMoney(playerid));
		}

/*		new w = GetPlayerWeapon(playerid);
		if((w == 41) || (w == 33)){
		    if(isPlayerPolice(playerid)==0){
			    ResetPlayerWeapons(playerid);
			    new wname[30];
			    GetWeaponName(w,wname,30);
			    format(string,256,"%s had a weapon(%s)",getName(playerid),wname);
			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(isPlayerAdmin(i) && i!=playerid){
						sendMessage(i,string,1);
			        }
			    }
		    }
		}
		else if(w == 34){
		    if(isPlayerHitman(playerid)==0){
				ResetPlayerWeapons(playerid);
			    new wname[30];
			    GetWeaponName(w,wname,30);
			    format(string,256,"%s had a weapon(%s)",getName(playerid),wname);
			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(isPlayerAdmin(i) && i!=playerid){
						sendMessage(i,string,1);
			        }
			    }
		    }
		}
		else if(w == 24){
		    if(GetPlayerVirtualWorld(playerid) != 666){
		    	ResetPlayerWeapons(playerid);
			    new wname[30];
			    GetWeaponName(w,wname,30);
			    format(string,256,"%s had a weapon(%s)",getName(playerid),wname);

			    for(new i = 0;i < MAX_PLAYERS;i++){
			        if(isPlayerAdmin(i) && i!=playerid){
						sendMessage(i,string,1);
			        }
			    }
		    }
		}
		else if(w == 46){

		}
		else if(w != 0){
			ResetPlayerWeapons(playerid);
		    new wname[30];
		    GetWeaponName(w,wname,30);
		    format(string,256,"%s had a weapon(%s)",getName(playerid),wname);

		    for(new i = 0;i < MAX_PLAYERS;i++){
		        if(isPlayerAdmin(i) && i!=playerid){
					sendMessage(i,string,1);
		        }
		    }
		}

*/
		if(IsPlayerInAnyVehicle(playerid)){
		    new vehicleid = GetPlayerVehicleID(playerid);
			new Float:speed,Float:x,Float:y,Float:z;
			GetVehicleVelocity(vehicleid,x,y,z);
			new c = getVehicleFuelCapacity(vehicleid);
			if(c){
				if(x < 0) x = x + -x + -x;
				if(y < 0) y = y + -y + -y;
				if(z < 0) z = z + -z + -z;
				speed = ((x * 1) + (y * 1) + (z * 1))*70;
			    format(string,256,"Speed: %.2f\nFuel: %d/%d",speed,fuel[vehicleid],c);
			    Update3DTextLabelText(vHud[playerid],COLOR_WHITE,string);
			    if(speed > 150){
				    format(string,256,"%s is at very high speed(%d))",getName(playerid),speed);
				    for(new i = 0;i < MAX_PLAYERS;i++){
				        if(isPlayerAdmin(i) && i!=playerid){
							sendMessage(i,string,1);
				        }
				    }
				}
			}
		}
		updated[playerid] = 0;
	}
}
/*
forward checkBadConnection();
public checkBadConnection(){
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && !iHaveBadConnection[i]){
			if(GetPlayerPing(i) >= 200){
				activateIHaveBadConnection(i);
			}
	    }
	}
}
*/
forward hideStartScreens(playerid);
public hideStartScreens(playerid){
	TextDrawHideForPlayer(playerid,startScreen[0]);
	TextDrawHideForPlayer(playerid,startScreen[1]);
}

stock addBrief( playerid , brief[] ){
	new strng[256];
	format(strng,256,"INSERT INTO brief ( userid , msg ) VALUES ( \"%s\" , \"%s\" )",getName(playerid),brief);
	mysql_query2(strng,-1,0,TmP);
}

stock addAdminLog( playerid ,adminid, reason[] ){
	new strng[256];
	format(strng,256,"INSERT INTO adminlog ( userid , adminid , reason ) VALUES ( '%s' , '%s' , '%s' )",getName(playerid),getName(adminid),reason);
	mysql_query2(strng,-1,0,TmP);
}

forward tutorial(playerid);
public tutorial( playerid ){
	if(IsPlayerConnected(playerid)){
		if(player[playerid][Spawned] == 1){
//			sendMessage(playerid,"[      1/7]");
		    TogglePlayerControllable(playerid,0);
			TextDrawShowForPlayer(playerid,tut[0]);
			GameText(playerid,"~r~~k~~VEHICLE_ENTER_EXIT~ ~y~to view next page.",10000);
			cstaton[playerid] = 2;
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			warpPlayerToPlayer(playerid,1167.6155,2871.4438,x,y,z);
		}
		else{
			SetTimerEx("tutorial",2000,0,"i",playerid);
		}
	}
}

stock weaponPickupModel( weaponid ){
	switch(weaponid){
	    case 1: return 331;
	    case 2: return 333;
	    case 3: return 334;
	    case 4: return 335;
	    case 5: return 336;
	    case 7: return 338;
	    case 8: return 339;
	    case 9: return 341;
	    case 10: return 321;
	    case 11: return 322;
	    case 12: return 323;
	    case 13: return 324;
	    case 14: return 325;
	    case 15: return 326;
	    case 16: return 342;
	    case 17: return 343;
	    case 18: return 344;
	    case 22: return 346;
	    case 23: return 347;
	    case 24: return 348;
	    case 25: return 349;
	    case 26: return 350;
	    case 27: return 351;
	    case 28: return 352;
	    case 29: return 353;
	    case 30: return 355;
	    case 31: return 356;
	    case 32: return 372;
	    case 33: return 357;
	    case 34: return 358;
	    case 35: return 359;
	    case 36: return 360;
	    case 37: return 361;
	    case 38: return 362;
	    case 39: return 363;
	    case 40: return 364;
	    case 41: return 365;
	    case 42: return 366;
	}
	return 0;
}

stock isPlayerInAmmu( playerid ){
	if(getPlayerDistanceFromPoint(playerid,292.0274,-36.0291,1001.5156) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,308.2740,-141.2833,999.6016) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,294.3212,-108.7869,1001.5156) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,288.8592,-80.4535,1001.5156) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,316.9583,-165.4707,999.6010) <= 30){
	    return 1;
	}
	return 0;
}

stock isPlayerInFoodShop( playerid ){
	if(getPlayerDistanceFromPoint(playerid,369.9786,-4.0798,1001.8589) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,376.4466,-60.9574,1001.5078) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,378.1215,-57.4928,1001.5078) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,377.7971,-113.7668,1001.4922) <= 30){
	    return 1;
	}
	else if(getPlayerDistanceFromPoint(playerid,374.1185,-113.6361,1001.4922) <= 30){
	    return 1;
	}
	return 0;
}

stock loadVehicleMods(i){
    if(isBuyCar(i)){
        format(string,256,"SELECT mods,paintjob FROM cars WHERE parking = %d",carId[i]);
        mysql_query2(string);
        mysql_store_result();
        mysql_fetch_field("paintjob",string);
		ChangeVehiclePaintjob(i,strval(string));
        mysql_fetch_field("mods",string);
		new index =0;
		for(new j =0;j < 14;j++){
		   new comp = strval(strtok(string,index));
		   AddVehicleComponent(i,comp);
		   if(comp){
		        printf("Adding compenent %d to %d vehicle",comp,i);
		   }
		}
        mysql_free_result();
    }
}
/*
forward restart();
public restart(){

	RESTART = 1;
	SendRconCommand("gmx");
}*/

#undef SendClientMessage
#undef SendClientMessageToAll
stock sendClientMessage( playerid , color , message[] ){
	new strng[256];
	new h,m;
	gettime(h,m);
	format(strng,256,"[%02d:%02d] %s",h,m,message);
	SendClientMessage(playerid,color,strng);
	addBrief(playerid,message);
}

stock sendClientMessageToAll( color , message[] ){
	new strng[256];
	new h,m;
	gettime(h,m);
	format(strng,256,"[%02d:%02d] %s",h,m,message);
	SendClientMessageToAll(color,strng);
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i)){
		    addBrief(i,message);
	    }
	}
}

stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}


stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius) {
  new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
  GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

	new Float:vertical, Float:horizontal;

	switch (GetPlayerWeapon(playerid)) {
	  case 34,35,36: {
	  if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
	  return false;
	  }
	  case 30,31: {vertical = 4.0; horizontal = -1.6;}
	  case 33: {vertical = 2.7; horizontal = -1.0;}
	  default: {vertical = 6.0; horizontal = -2.2;}
	}

  new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
  new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
  GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

  if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
  return false;
}

stock IsHeadshot(playerid, targetplayerid) {
  new Float:x, Float:y, Float:z;
  GetPlayerPos(targetplayerid, x, y, z);
  return IsPlayerAimingAt(playerid, x, y, z+0.8, 0.2);
}

stock targetPlayer( playerid ){
	for(new i = 0;i < MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i)){
	        if(i!=playerid){
	            if(GetPlayerInterior(playerid) == GetPlayerInterior(i)){
	                if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)){
	                    new Float:x,Float:y,Float:z;
	                    GetPlayerPos(i,x,y,z);
	                    if(IsPlayerAimingAt(playerid,x,y,z,0.5){
	                        return i;
	                    }
	                }
	            }
	        }
	    }
	}
}

stock mysql_query2(const query[], resultid = -1, spareid = (0), MySQL:handle = MySQL:0)
{
    return !mysql_query(query, resultid, spareid, handle);
}
