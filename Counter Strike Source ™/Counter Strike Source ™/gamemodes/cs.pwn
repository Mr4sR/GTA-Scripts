//$ region CS-Includes
#include <a_samp>
#include <core>
#include <float>
#include "../include/midostream.inc"
//$ endregion CS-Includes
//$ region CS-Defines
#define GREY 0xAFAFAFAA
#define GREEN 0x21DD00FF
#define RED 0xE60000FF
#define ADMIN_RED 0xFB0000FF
#define YELLOW 0xFFFF00FF
#define ORANGE 0xF97804FF
#define LIGHTRED 0xFF8080FF
#define LIGHTBLUE 0x00C2ECFF
#define PURPLE 0xB360FDFF
#define PLAYER_COLOR 0xFFFFFFFF
#define BLUE 0x1229FAFF
#define LIGHTGREEN 0x38FF06FF
#define DARKPINK 0xE100E1FF
#define DARKGREEN 0x008040FF
#define ANNOUNCEMENT 0x00CACAFB
#define AFK 0x6AF7E1FF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_SPEC 0xBFC0C200
#define COLOR_ADMINCMD 0xa9c4e4ff
#define DIALOGID 1200
#define TEAM_CT 0
#define TEAM_TT 1
#define ResetMoneyBar ResetPlayerMoney
#define UpdateMoneyBar GivePlayerMoney
#pragma tabsize 0
//$ endregion CS-Defines
//$ region CS-Forwards
forward Nextmap();
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerUpdate(playerid);
forward OnPlayerRegister(playerid, password[]);
forward SetupPlayerForClassSelection(playerid);
forward OtherTimer();
forward UpdateMoney();
forward BanLog(string[]);
forward KickLog(string[]);
forward ABroadCast(color,const string[],level);
forward SaveAccounts();
forward AntiHackCheat();
forward RestoreWeapons(playerid);
forward ResetPlayerWeaponsEx(playerid);
forward ShowStats(playerid, targetid);
forward SendAdminMessage(color, string[]);
forward SendCounterMessage(color, string[]);
forward SendTerrorMessage(color, string[]);
forward SpectatorRefresh(playerid, otherplayer);
forward Spectator();
forward Specover(playerid);
forward Specstart(playerid);
forward SetPlayerSpawn(playerid);
forward DMTimer(playerid);
forward Over();
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward IsAtShop(playerid);
forward Counter(playerid);
forward HeadShot();
forward HS(playerid);
//$ endregion CS-Forwards
//$ region CS-Enums
enum pInfo {
	pKey[128],
	pAdmin,
	pDonateRank,
	pConnectTime,
	pIP[21],
	pKills,
	pDeaths,
	pReg,
	pCash,
	pM4,
	pMP5,
	pDeagle,
	pShotgun,
	pSdpistol,
	pColt,
	pSpraycan,
	pBat,
	pGrenade,
	pTear,
	pFlowers,
	pShovel,
	pRifle,
	pSniperRifle,
	pNitestick,
	pMace,
	pExtinguisher,
	pChainsaw,
	pAK47,
	pSPAS12,
	pDetonator,
	pKnife,
	pMac10,
	pRocket,
	pWarns,
	pWantedLevel,
	pBanned,
};
enum pSpec {

	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	Float:sAngle,
	sVw,
	sCam,
};
//$ endregion CS-Enums
//$ region CS-Variablen
new Map = 1;
new Text:Time;
new Text:C;
new DMTime;
new gPlayerAccount[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new Anticheat = 0; // 1 - off.
new weaponhax;
new refresher;
new Spectating[MAX_PLAYERS];
new SpecNewState[MAX_PLAYERS];
new SpecReturnPosDue[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];
new Thing[200];
new Thing2[200];
new Float:nx[200];
new Float:ny[200];
new Float:nz[200];
new Float:sx[200];
new Float:sy[200];
new Float:sz[200];
new Float:NHP[200];
new Float:SHP[200];
new Float:RHP[200];
new Float:NARM[200];
new Float:SARM[200];
new Float:RARM[200];
new bool:Checking[200];
new Checking2[200];
new Kchecker;
new Suicide[MAX_PLAYERS];
new dollah = 1000;
new IsBombPlanted = 0;
new DefuseCode = 0;
new Defused = 0;
new Count;
new hitid[MAX_PLAYERS] = 999;
new Kills[MAX_PLAYERS];
new Text:TextTR,ctscore,ttscore;
new Text:Textdraw2, Text:Textdraw3;
new Text:TextCO;
new Text:TextRO;
new cshop;
new tshop;
new cshop2;
new tshop2;
new cshop3;
new tshop3;
new cshop4;
new tshop4;
new gPlayerClass[MAX_PLAYERS];
static gTeam[MAX_PLAYERS];
new PlayerInfo[MAX_PLAYERS][pInfo];
new Unspec[MAX_PLAYERS][pSpec];
//$ endregion CS-Variablen
main(){
}
public OnGameModeInit(){
	SetGameModeText("CSS-SAMP");
	SetNameTagDrawDistance(30.0);
	SetTeamCount(2);
	ShowNameTags(1);
	ShowPlayerMarkers(0);
	SetWorldTime(15);
	AllowAdminTeleport(1);
	UsePlayerPedAnims();
	Map = 1;
	DMTime = 900;
	SetTimer("DMTimer", 999, 1);
//==============================================================================
	cshop = CreatePickup(1239, 1, 3175.3003, -1141.0750, 30.6428, -1);// CT shop
	tshop = CreatePickup(1239, 1, 3149.7278, -1252.8730, 58.2263, -1);// T shop
	cshop2 = CreatePickup(1239, 1, -1345.4269, -57.1077, 14.1484, -1);// CT shop 2
	tshop2 = CreatePickup(1239, 1, -1237.0514, -165.4621, 14.1484, -1);// T shop 2
	cshop3 = CreatePickup(1239, 1, -1936.9550, 1616.3103, 27.5018, -1);// CT shop 3
	tshop3 = CreatePickup(1239, 1, -2268.6216, 1644.3895, 48.3878, -1);// T shop 3
	cshop4 = CreatePickup(1239, 1, 2233.5200,-1724.4127,13.5524, -1);// CT shop 4
	tshop4 = CreatePickup(1239, 1, 2499.7739,-1685.5599,13.4582, -1);// T shop 4
//==============================================================================
    AddPlayerClass(21, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //T
    AddPlayerClass(30, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //T
    AddPlayerClass(28, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //T
    AddPlayerClass(112, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //T
    AddPlayerClass(285, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //CT
    AddPlayerClass(286, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //CT
    AddPlayerClass(266, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //CT
    AddPlayerClass(267, 1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0); //CT
//==============================================================================
	CreateStreamObject(10491, 3139.482910, -1136.145508, 25.931807, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(656, 3189.495117, -1187.390625, 40.026009, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3220.505371, -1140.323120, 28.999336, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3177.282471, -1094.217896, 27.725098, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3162.684570, -1065.087524, 23.018883, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3156.025635, -1091.586914, 26.506607, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3141.438477, -1138.929199, 28.094536, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3138.147217, -1165.707397, 29.049080, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3165.613525, -1179.692749, 33.739059, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3184.946533, -1174.953613, 36.593452, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3216.851074, -1112.306519, 21.160667, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3242.649658, -1131.121094, 18.954613, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(664, 3167.090576, -1204.596191, 35.899124, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(664, 3119.545654, -1130.591797, 23.638235, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(664, 3123.043701, -1106.209351, 26.695490, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(664, 3136.610352, -1116.822754, 26.070587, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(664, 3134.387207, -1132.630127, 25.206717, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(670, 3106.176270, -1162.161377, 26.620535, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3109.151611, -1178.873047, 27.011776, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3142.122803, -1181.776611, 32.261639, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3151.067139, -1206.695435, 37.757069, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3174.245605, -1234.680664, 52.294117, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3125.034668, -1228.381104, 47.424404, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(672, 3151.725098, -1226.680908, 52.340984, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(683, 3124.540039, -1178.848877, 27.769394, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(683, 3097.950684, -1181.730591, 23.684801, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(683, 3095.455566, -1116.519653, 20.622694, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(683, 3090.371826, -1163.417725, 15.326273, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(683, 3078.888428, -1175.784912, 16.008123, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(3168, 3159.501953, -1252.885132, 57.633785, 348.8273, 359.1406, 337.5000, 500);
    CreateStreamObject(3168, 3150.079102, -1257.694946, 59.315880, 0.0000, 330.7792, 270.0000, 500);
    CreateStreamObject(3168, 3140.809570, -1250.932373, 57.061264, 15.4699, 0.8594, 202.5000, 500);
    CreateStreamObject(983, 3135.148438, -1248.093506, 56.957611, 347.1084, 354.8434, 358.2811, 500);
    CreateStreamObject(983, 3135.476563, -1253.858154, 58.421631, 333.3575, 355.7028, 23.2821, 500);
    CreateStreamObject(983, 3138.729736, -1259.159546, 60.114929, 0.0000, 0.0000, 33.7500, 500);
    CreateStreamObject(983, 3143.606445, -1262.864258, 61.470688, 0.0000, 0.0000, 67.5000, 500);
    CreateStreamObject(983, 3149.630615, -1264.028198, 61.918877, 0.0000, 0.0000, 90.0000, 500);
    CreateStreamObject(983, 3155.239746, -1262.220337, 61.296852, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(983, 3159.964355, -1258.172485, 59.865364, 0.0000, 0.0000, 112.4999, 500);
    CreateStreamObject(983, 3164.618164, -1254.149902, 58.442612, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(11556, 3158.124512, -1275.174316, 14.396935, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(11556, 3161.666504, -1265.487549, 28.927856, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(11556, 3160.110107, -1270.138916, 37.904232, 0.0000, 0.0000, 33.7500, 500);
    CreateStreamObject(11556, 3148.106934, -1278.041138, 49.094845, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16112, 3124.229736, -1255.829346, 47.807453, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16113, 3173.055908, -1251.816284, 42.939133, 0.0000, 0.0000, 67.5000, 500);
    CreateStreamObject(16113, 3206.424072, -1227.362305, 41.939182, 0.0000, 0.0000, 78.7500, 500);
    CreateStreamObject(16113, 3235.961182, -1189.715820, 35.226154, 0.0000, 0.0000, 67.5000, 500);
    CreateStreamObject(16113, 3254.770752, -1160.630127, 20.467768, 0.0000, 0.0000, 78.7500, 500);
    CreateStreamObject(16113, 3250.120117, -1122.507080, 13.409906, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16113, 3222.640137, -1096.337646, 13.174839, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16113, 3194.574951, -1066.828857, 12.455215, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16113, 3170.168701, -1034.293945, 11.391201, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16113, 3149.204590, -1014.772278, 8.033104, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(971, 3252.344727, -1140.115112, 17.062750, 0.0000, 0.0000, 56.2500, 500);
    CreateStreamObject(971, 3249.411377, -1165.239014, 32.989037, 0.0000, 0.0000, 236.2501, 500);
    CreateStreamObject(971, 3235.956787, -1169.148804, 31.551754, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(16116, 3096.948486, -1236.353027, 36.867958, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(16116, 3081.297852, -1207.709473, 24.867954, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(16116, 3065.881104, -1196.621460, 21.262932, 0.0000, 0.0000, 11.2500, 500);
    CreateStreamObject(16116, 3109.501221, -1248.392700, 1.131866, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16116, 3106.934814, -1244.679932, 18.228083, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16116, 3108.688232, -1243.047729, 27.182878, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16116, 3095.856201, -1221.179565, 1.289328, 0.0000, 0.0000, 180.0000, 500);
    CreateStreamObject(16116, 3087.164063, -1218.417236, 15.987613, 0.0000, 0.0000, 11.2500, 500);
    CreateStreamObject(16116, 3052.884033, -1198.712402, 0.783089, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16116, 3071.072754, -1198.157837, 11.487455, 0.0000, 0.0000, 180.0000, 500);
    CreateStreamObject(5131, 3188.641113, -1144.136597, 37.322491, 12.0321, 0.0000, 202.5000, 500);
    CreateStreamObject(3361, 3193.360352, -1129.364258, 33.568272, 0.8594, 350.5462, 292.5000, 500);
    CreateStreamObject(3361, 3194.803955, -1132.741699, 33.021000, 0.8594, 353.1245, 292.5000, 500);
    CreateStreamObject(1681, 3156.453125, -1198.866943, 36.401871, 317.0282, 358.2811, 0.0000, 500);
    CreateStreamObject(3526, 3194.510986, -1210.249390, 40.957470, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3191.952881, -1210.094849, 41.100292, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3189.264160, -1210.551636, 40.951843, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3185.757568, -1211.273682, 40.797623, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3177.235596, -1225.015991, 47.043934, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3173.887695, -1231.015137, 50.295773, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3170.698730, -1237.098877, 52.693035, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3165.931396, -1241.573975, 54.802326, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3199.003174, -1203.936523, 40.739330, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3207.022461, -1196.179199, 41.150234, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(3526, 3211.341309, -1185.537964, 38.974270, 0.0000, 0.0000, 337.5000, 500);
    CreateStreamObject(987, 3225.021484, -1167.733765, 36.849255, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(656, 3133.281006, -1208.088867, 36.309273, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3159.708740, -1160.805664, 29.158226, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3121.411133, -1149.418091, 26.056000, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3116.032227, -1170.553711, 27.822598, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3134.332520, -1196.940063, 33.468674, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(656, 3150.359375, -1221.681885, 46.442245, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(9339, 3157.704346, -1239.029907, 55.233112, 0.0000, 0.0000, 247.5000, 500);
    CreateStreamObject(3279, 3113.662354, -1215.728394, 36.214607, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(1225, 3117.587646, -1217.637329, 52.297123, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(16337, 3196.511963, -1206.847290, 41.231342, 0.0000, 0.0000, 337.5001, 500);
    CreateStreamObject(853, 3163.959717, -1185.977539, 35.453518, 347.9679, 0.0000, 0.0000, 500);
    CreateStreamObject(16093, 3144.274170, -1067.482300, 27.507671, 0.0000, 0.0000, 326.2500, 500);
    CreateStreamObject(16093, 3101.853760, -1142.038330, 21.012653, 0.0000, 0.0000, 78.7500, 500);
    CreateStreamObject(1318, 3194.268799, -1173.939941, 44.152325, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(1636, 3143.522217, -1191.981689, 33.275848, 325.6225, 9.4538, 308.0472, 500);
    CreateStreamObject(1636, 3148.981934, -1191.453613, 33.692894, 292.9640, 9.4538, 308.0472, 500);
    CreateStreamObject(1654, 3193.480957, -1173.428711, 38.810005, 0.0000, 354.8434, 308.9840, 500);
    CreateStreamObject(2044, 3192.335449, -1172.958740, 38.334454, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2036, 3192.054932, -1172.319824, 38.192158, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2035, 3191.724854, -1172.801147, 38.250523, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2034, 3191.200928, -1172.735107, 38.201153, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2033, 3191.424316, -1172.935669, 38.213829, 0.0000, 0.0000, 315.0001, 500);
    CreateStreamObject(2064, 3146.968506, -1181.513306, 31.734112, 0.0000, 0.0000, 157.5000, 500);
    CreateStreamObject(2064, 3148.010010, -1182.076050, 31.829645, 0.0000, 0.0000, 157.5000, 500);
    CreateStreamObject(2060, 3121.063477, -1185.818970, 28.058252, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2060, 3121.145020, -1185.696655, 28.373705, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2060, 3121.123047, -1185.550537, 28.689157, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2060, 3122.232422, -1186.259155, 28.250242, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3122.235840, -1186.287231, 28.565695, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3122.267578, -1186.458740, 28.881147, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3123.321777, -1186.969482, 28.414694, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(2060, 3123.314453, -1187.077881, 28.730146, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(2060, 3123.354492, -1187.150879, 29.045599, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(2060, 3119.907959, -1186.027344, 27.837530, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(2060, 3119.810547, -1186.058105, 28.152983, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(2060, 3119.820313, -1186.142456, 28.468435, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(3361, 3150.504639, -1139.399292, 32.184853, 13.7510, 359.1406, 206.8745, 500);
    CreateStreamObject(3361, 3146.756592, -1142.260010, 28.920502, 13.7510, 0.0000, 210.3123, 500);
    CreateStreamObject(16093, 3157.061279, -1129.904175, 33.107727, 0.8594, 9.4538, 113.3594, 500);
    CreateStreamObject(2060, 3162.608398, -1169.146484, 29.592371, 0.0000, 0.0000, 123.7499, 500);
    CreateStreamObject(2060, 3162.529297, -1169.116089, 29.907824, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2060, 3162.553711, -1168.993652, 30.223276, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2060, 3162.546875, -1168.944580, 30.538729, 0.0000, 0.0000, 303.7500, 500);
    CreateStreamObject(2060, 3162.014404, -1168.258667, 29.453363, 0.0000, 0.0000, 270.0000, 500);
    CreateStreamObject(2060, 3161.949707, -1168.245361, 29.768816, 0.0000, 0.0000, 270.0000, 500);
    CreateStreamObject(2060, 3161.990967, -1168.130493, 30.084269, 0.0000, 0.0000, 270.0000, 500);
    CreateStreamObject(2060, 3161.938477, -1168.090576, 30.399721, 0.0000, 0.0000, 270.0000, 500);
    CreateStreamObject(2060, 3162.449219, -1167.319458, 29.318167, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(2060, 3162.525391, -1167.105713, 29.633619, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(2060, 3162.598877, -1166.932495, 29.949072, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(2060, 3162.673828, -1166.805420, 30.264524, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(2060, 3163.783203, -1169.525635, 29.862209, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3163.743408, -1169.463623, 30.177662, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3163.850830, -1169.358887, 30.493114, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3163.949219, -1169.195313, 30.808567, 0.0000, 0.0000, 348.7500, 500);
    CreateStreamObject(2060, 3165.017090, -1169.056274, 29.953945, 0.0000, 0.0000, 33.7500, 500);
    CreateStreamObject(2060, 3165.047607, -1168.986328, 30.269398, 0.0000, 0.0000, 33.7500, 500);
    CreateStreamObject(2060, 3165.172119, -1168.802979, 30.584850, 0.0000, 0.0000, 45.0000, 500);
    CreateStreamObject(2060, 3164.929932, -1168.798218, 30.900303, 0.0000, 0.0000, 33.7500, 500);
    CreateStreamObject(2064, 3162.325439, -1181.958252, 34.295662, 359.1406, 348.8273, 339.2189, 500);
    CreateStreamObject(3282, 3157.964111, -1219.461060, 45.362762, 3.4377, 8.5944, 357.4990, 500);
    CreateStreamObject(2634, 3199.836426, -1113.274414, 34.341003, 0.0000, 0.0000, 22.5000, 500);
    CreateStreamObject(3279, -1395.065796, -108.467651, 13.224054, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3279, -1310.191528, -27.935059, 12.949055, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3279, -1289.765137, -215.848114, 13.219583, 359.1406, 0.0000, 136.2365, 500);
    CreateStreamObject(3279, -1204.994385, -130.128906, 13.219582, 0.0000, 359.1406, 222.2850, 500);
    CreateStreamObject(5005, -1345.996460, -165.084290, 16.699955, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(5005, -1343.549927, -51.674858, 16.697708, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(5005, -1228.852783, -164.976852, 16.699955, 0.0000, 0.0000, 225.0000, 500);
    CreateStreamObject(5005, -1248.339355, -73.408493, 16.696268, 0.0000, 0.0000, 135.0000, 500);
    CreateStreamObject(3374, -1380.166382, -125.773926, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1341.227417, -120.901337, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1323.812988, -101.324463, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1339.502075, -68.714569, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1281.374390, -68.594505, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1293.167725, -107.336868, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1316.482300, -146.233719, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1266.199341, -138.099792, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1316.285645, -116.546669, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1274.477417, -79.433876, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1307.248047, -90.530777, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1351.702271, -91.611084, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1362.613159, -113.676682, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1357.678589, -131.958923, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1316.628662, -162.199707, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1286.539917, -147.391144, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1316.767212, -130.814651, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1288.815063, -171.405914, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1249.522095, -113.687065, 14.645298, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1268.653687, -91.846741, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1309.452026, -56.557983, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1336.918579, -90.142059, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1367.315674, -85.657425, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1380.114136, -102.644119, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1336.361572, -146.747864, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1295.287109, -193.586823, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1266.160156, -163.759720, 14.525192, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1241.322754, -136.106552, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1270.999268, -181.474945, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1220.747437, -138.633774, 14.642414, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(3374, -1232.693237, -108.035782, 14.637939, 0.0000, 0.0000, 315.0000, 500);
    CreateStreamObject(2780, -1346.558472, -138.328003, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1291.558960, -121.672676, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1292.883789, -75.119522, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1327.468994, -79.622223, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1305.332520, -166.700562, 13.148441, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1285.516968, -195.214081, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1231.926025, -150.608963, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1258.352539, -147.406311, 13.148438, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1249.498169, -127.276031, 13.143963, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1245.079712, -82.073883, 13.143963, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(2780, -1270.230591, -112.992195, 13.143963, 0.0000, 0.0000, 0.0000, 500);
    CreateStreamObject(12814, -2242.700195, 1656.633544, 47.327514, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2206.695068, 1645.529541, 38.979316, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2242.872070, 1607.770751, 43.178131, 9.453796, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2242.856201, 1558.277221, 39.047012, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2204.717773, 1548.363281, 39.001655, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2213.039306, 1512.518554, 38.976860, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2183.750000, 1512.445190, 38.954200, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2156.347167, 1549.877929, 39.054100, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2151.042480, 1587.469116, 39.004341, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2151.098388, 1636.241577, 38.981674, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2167.508544, 1645.563476, 38.955116, 0.000000, 0.000000, 90.000061, 500);
    CreateStreamObject(12814, -2151.117431, 1648.723632, 38.934806, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2144.414794, 1508.864868, 38.931938, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2095.749023, 1508.963867, 38.959266, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2085.696533, 1469.431396, 38.911270, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2104.526123, 1469.450683, 38.936820, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2143.455566, 1459.479980, 38.864860, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2085.608886, 1440.945800, 38.890106, 0.000000, 0.000000, 179.999984, 500);
    CreateStreamObject(12814, -2046.836181, 1431.097412, 38.867996, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2124.125732, 1430.990966, 38.841720, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2172.452880, 1430.830932, 30.369823, 340.232971, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -1999.135986, 1431.115966, 38.919357, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1980.304687, 1417.904174, 38.897285, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1966.888427, 1431.168701, 38.949699, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1964.814941, 1469.266601, 38.926803, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -1927.805664, 1431.269653, 41.727012, 11.172668, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1888.369018, 1441.281738, 46.549049, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1924.896972, 1461.206420, 46.492782, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1923.469116, 1499.667358, 46.544288, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1933.515136, 1538.519042, 46.570655, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1964.800659, 1518.282592, 32.577583, 345.389587, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2113.368408, 1616.784912, 38.959022, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2063.856689, 1616.816772, 38.936157, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1979.198608, 1538.432128, 46.598381, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2024.419311, 1606.771850, 38.912025, 0.000000, 0.000000, 179.999984, 500);
    CreateStreamObject(12814, -2024.264038, 1557.601196, 38.940002, 0.000000, 0.000000, 179.999984, 500);
    CreateStreamObject(12814, -2014.292114, 1523.144531, 38.992576, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -1964.828369, 1566.866577, 26.239080, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1964.860229, 1610.712768, 26.446371, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2270.444824, 1656.308715, 47.379943, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2112.045898, 1646.236328, 32.659049, 345.389587, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2063.476806, 1646.233154, 26.518293, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2015.004028, 1646.184936, 26.545734, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1974.639282, 1646.345703, 26.468933, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(3749, -2240.884521, 1678.857421, 53.193740, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(3749, -1992.210327, 1646.480590, 32.411960, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(3749, -2166.882324, 1510.192016, 44.798164, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2285.331542, 1656.366210, 47.382369, 0.000000, 90.240783, 0.000000, 500);
    CreateStreamObject(12814, -2277.891357, 1681.255737, 47.382369, 0.000000, 90.240783, 270.000000, 500);
    CreateStreamObject(12814, -2282.749755, 1631.108398, 47.382369, 0.000000, 90.240783, 90.000000, 500);
    CreateStreamObject(12814, -2257.981689, 1606.145141, 47.284824, 0.000000, 90.240783, 0.000122, 500);
    CreateStreamObject(12814, -2258.016845, 1557.000976, 47.199447, 0.000000, 90.240783, 0.000000, 500);
    CreateStreamObject(12814, -2252.645019, 1533.169677, 47.299453, 0.000000, 90.240783, 90.000122, 500);
    CreateStreamObject(12814, -2227.813720, 1508.230102, 47.279228, 0.000000, 90.240783, 0.000061, 500);
    CreateStreamObject(12814, -2233.269531, 1500.148925, 45.900070, 0.000000, 90.240783, 89.999938, 500);
    CreateStreamObject(12814, -2145.708496, 1499.577026, 45.142383, 0.000000, 90.240783, 270.000183, 500);
    CreateStreamObject(12814, -2192.134521, 1500.165039, 45.956623, 0.000000, 90.240783, 89.999938, 500);
    CreateStreamObject(12814, -2143.801757, 1520.581176, 48.934364, 0.000000, 90.240783, 89.999816, 500);
    CreateStreamObject(12814, -2144.629394, 1525.038940, 38.884361, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2095.714599, 1525.004272, 38.911674, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2144.477050, 1502.376220, 38.909408, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2095.411865, 1520.147460, 45.161689, 0.000000, 90.240783, 269.999877, 500);
    CreateStreamObject(12814, -2070.629150, 1508.250976, 45.286697, 0.000000, 90.240783, 179.999938, 500);
    CreateStreamObject(12814, -2070.745605, 1471.061523, 45.288688, 0.000000, 90.240783, 179.999938, 500);
    CreateStreamObject(12814, -2191.757812, 1430.859497, 21.935091, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2170.990966, 1444.495605, 23.989078, 0.000000, 90.240783, 270.000000, 500);
    CreateStreamObject(12814, -2170.990478, 1415.638549, 23.686178, 0.000000, 90.240783, 90.000122, 500);
    CreateStreamObject(12814, -2217.921875, 1444.484130, 24.012485, 0.000000, 90.240783, 270.000244, 500);
    CreateStreamObject(12814, -2220.855468, 1415.686035, 23.717212, 0.000000, 90.240783, 90.000244, 500);
    CreateStreamObject(12814, -2216.739257, 1430.305175, 23.962520, 0.000000, 90.240783, 0.000488, 500);
    CreateStreamObject(12814, -2124.207275, 1415.994262, 45.211975, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2170.493164, 1415.704711, 45.246517, 0.000000, 90.240783, 90.000244, 500);
    CreateStreamObject(12814, -2167.874755, 1459.417114, 38.892257, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2170.236328, 1499.035278, 45.255771, 0.000000, 90.240783, 269.999023, 500);
    CreateStreamObject(12814, -2192.697753, 1431.161010, 53.822540, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2136.211914, 1558.292846, 47.930076, 0.000000, 90.240783, 179.999755, 500);
    CreateStreamObject(12814, -2074.820556, 1416.007324, 45.192535, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2029.332519, 1415.975463, 45.195442, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -1978.524047, 1402.871093, 44.799674, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2004.392944, 1391.249145, 45.163623, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -1955.307983, 1391.180908, 45.114780, 0.000000, 90.240783, 179.999511, 500);
    CreateStreamObject(12814, -2045.937866, 1446.083618, 45.270431, 0.000000, 90.240783, 269.999023, 500);
    CreateStreamObject(12814, -2004.779296, 1446.113891, 45.171783, 0.000000, 90.240783, 269.999023, 500);
    CreateStreamObject(12814, -1979.806152, 1470.999877, 45.179244, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -1949.789794, 1460.924682, 21.629213, 270.618652, 90.240783, 179.999023, 500);
    CreateStreamObject(12814, -1924.846191, 1476.138427, 31.521720, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -2031.953613, 1523.430175, 41.845008, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -1930.458007, 1416.183227, 45.098190, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -1894.647094, 1416.199584, 60.601493, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -1924.880615, 1446.316894, 31.537675, 0.000000, 90.240783, 269.998046, 500);
    CreateStreamObject(12814, -1873.379150, 1441.247680, 60.626464, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1883.799926, 1466.187133, 60.626403, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -1908.794555, 1491.004272, 60.621658, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1908.660766, 1528.424682, 60.648086, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1933.301757, 1553.422119, 60.848022, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -1975.676635, 1553.394775, 60.775741, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -1930.565063, 1416.261596, 60.617401, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -1936.919677, 1469.145874, 38.895832, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1938.427246, 1501.243774, 31.623256, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1935.142822, 1517.908325, 32.715065, 345.389587, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1925.212036, 1523.709838, 31.541086, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -1950.330932, 1548.423828, 31.541505, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1935.793334, 1610.032104, 26.493947, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1965.007446, 1669.201782, 26.421360, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1950.340454, 1560.253784, 31.533720, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -1979.891235, 1498.239257, 45.384029, 0.000000, 90.240783, 359.997314, 500);
    CreateStreamObject(12814, -1979.973388, 1545.205932, 31.566501, 0.000000, 90.240783, 359.997314, 500);
    CreateStreamObject(12814, -1980.078735, 1594.087768, 31.541509, 0.000000, 90.240783, 359.997314, 500);
    CreateStreamObject(12814, -1925.934204, 1585.248413, 31.746374, 0.000000, 90.240783, 89.996826, 500);
    CreateStreamObject(12814, -1920.718627, 1610.167846, 31.421380, 0.000000, 90.240783, 179.997070, 500);
    CreateStreamObject(12814, -1924.724853, 1635.002563, 32.432048, 0.000000, 90.240783, 269.997314, 500);
    CreateStreamObject(12814, -1970.787719, 1683.859130, 35.423786, 0.000000, 90.240783, 269.996337, 500);
    CreateStreamObject(12814, -2228.308837, 1656.301513, 32.281684, 0.000000, 90.240783, 359.996582, 500);
    CreateStreamObject(12814, -2232.426757, 1608.490844, 38.956771, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2232.423583, 1586.095214, 38.909179, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -2228.365234, 1609.643798, 28.284200, 9.453796, 90.240783, 359.995605, 500);
    CreateStreamObject(12814, -2217.385986, 1611.345947, 40.159271, 0.000000, 90.240783, 179.997070, 500);
    CreateStreamObject(12814, -2202.948730, 1656.261108, 42.206741, 0.000000, 90.240783, 269.997314, 500);
    CreateStreamObject(12814, -2227.911621, 1681.170898, 42.204933, 0.000000, 90.240783, 179.998779, 500);
    CreateStreamObject(12814, -2190.752685, 1636.146118, 38.915916, 0.000000, 90.240783, 89.998535, 500);
    CreateStreamObject(12814, -2217.433105, 1587.784912, 40.167247, 0.000000, 90.240783, 179.998779, 500);
    CreateStreamObject(12814, -2192.423583, 1563.408691, 39.979095, 0.000000, 90.240783, 269.999023, 500);
    CreateStreamObject(12814, -2190.666503, 1563.454101, 39.999809, 0.000000, 90.240783, 269.999023, 500);
    CreateStreamObject(12814, -2165.788574, 1588.416259, 39.981719, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2165.803466, 1611.275878, 39.959159, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2192.436767, 1636.179077, 38.948795, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2136.231445, 1577.018554, 47.919094, 0.000000, 90.240783, 179.999755, 500);
    CreateStreamObject(12814, -2111.283203, 1601.847534, 47.886444, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2063.933105, 1601.894165, 47.938522, 0.000000, 90.240783, 89.999511, 500);
    CreateStreamObject(12814, -2039.023315, 1576.958496, 47.942413, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2039.065429, 1538.810180, 47.942428, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2004.155883, 1513.124877, 31.719995, 0.000000, 90.240783, 179.999023, 500);
    CreateStreamObject(12814, -2009.728637, 1606.787353, 46.914451, 0.000000, 90.240783, 179.999023, 500);
    CreateStreamObject(12814, -2009.386718, 1578.293457, 46.692413, 0.000000, 90.240783, 179.999023, 500);
    CreateStreamObject(12814, -1984.361572, 1553.382324, 61.494857, 0.000000, 90.240783, 269.999267, 500);
    CreateStreamObject(12814, -2004.709716, 1631.760864, 23.973161, 0.000000, 90.240783, 89.998779, 500);
    CreateStreamObject(12814, -1980.126464, 1606.745849, 31.566265, 0.000000, 90.240783, 359.998535, 500);
    CreateStreamObject(12814, -2054.533691, 1631.731933, 23.945724, 0.000000, 90.240783, 89.998779, 500);
    CreateStreamObject(12814, -2103.179931, 1631.710449, 24.012853, 0.000000, 90.240783, 89.998779, 500);
    CreateStreamObject(12814, -2129.142822, 1631.753417, 24.011060, 0.000000, 90.240783, 89.998779, 500);
    CreateStreamObject(12814, -2014.963500, 1661.407348, 35.298164, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -2063.291015, 1661.483886, 35.295692, 0.000000, 90.240783, 269.998291, 500);
    CreateStreamObject(12814, -1994.509155, 1631.883544, 21.301998, 268.899780, 90.240783, 89.997802, 500);
    CreateStreamObject(12814, -1989.930786, 1686.223876, 35.309192, 0.000000, 90.240783, 359.998535, 500);
    CreateStreamObject(12814, -2191.102539, 1656.297241, 42.247776, 0.000000, 90.240783, 269.996337, 500);
    CreateStreamObject(12814, -2166.225097, 1681.241333, 42.237236, 0.000000, 90.240783, 359.996582, 500);
    CreateStreamObject(12814, -2149.022949, 1673.359008, 42.187232, 0.000000, 90.240783, 269.996337, 500);
    CreateStreamObject(12814, -2135.839843, 1686.321655, 42.204002, 0.000000, 90.240783, 179.996093, 500);
    CreateStreamObject(12814, -2110.837890, 1661.511840, 35.287471, 0.000000, 90.240783, 269.996337, 500);
    CreateStreamObject(12814, -2144.031005, 1520.123046, 45.159332, 0.000000, 90.240783, 269.997314, 500);
    CreateStreamObject(12814, -2145.733154, 1500.149047, 46.014266, 0.000000, 90.240783, 89.996826, 500);
    CreateStreamObject(3749, -2122.908447, 1509.945922, 44.798164, 0.000000, 0.000000, 90.000061, 500);
    CreateStreamObject(12814, -1992.141235, 1613.035888, 23.268491, 0.000000, 90.240783, 179.998779, 500);
    CreateStreamObject(12814, -1992.335083, 1613.009643, 23.420305, 0.000000, 90.240783, 359.998535, 500);
    CreateStreamObject(12814, -1992.276611, 1679.763671, 23.522176, 0.000000, 90.240783, 359.998535, 500);
    CreateStreamObject(12814, -1992.297363, 1679.657226, 23.434078, 0.000000, 90.240783, 179.998046, 500);
    CreateStreamObject(12814, -2240.568359, 1680.859863, 37.254981, 87.662475, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1935.869750, 1610.394775, 46.121353, 180.377395, 0.000000, 0.000000, 500);
    CreateStreamObject(12814, -1957.509765, 1599.582519, 46.521560, 180.377395, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1960.865600, 1620.140258, 46.562892, 180.377395, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1964.428222, 1578.413574, 45.894886, 180.377395, 0.000000, 180.000030, 500);
    CreateStreamObject(12814, -2004.815795, 1523.411865, 41.859878, 0.000000, 90.240783, 89.998779, 500);
    CreateStreamObject(8657, -2228.844970, 1646.712036, 47.972854, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(8657, -2228.876464, 1616.102783, 45.423542, 9.453796, 0.000000, 0.000000, 500);
    CreateStreamObject(8657, -2228.874511, 1598.137573, 42.419322, 9.453796, 0.000000, 0.000000, 500);
    CreateStreamObject(8657, -1949.232421, 1461.809936, 47.588088, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(8657, -1937.886108, 1491.769897, 47.564590, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(8657, -1966.367065, 1524.085449, 47.633125, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(8657, -1952.762207, 1524.094604, 47.594245, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(8657, -1937.910766, 1509.100463, 47.564590, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(8657, -2177.331054, 1445.070556, 40.087570, 0.000000, 0.000000, 270.000030, 500);
    CreateStreamObject(8657, -2164.681396, 1445.078979, 40.097831, 0.000000, 0.000000, 270.000030, 500);
    CreateStreamObject(2988, -2168.773193, 1515.989868, 38.954204, 0.000000, 0.000000, 22.500000, 500);
    CreateStreamObject(2988, -2168.761962, 1516.013183, 42.461444, 0.000000, 0.000000, 22.500000, 500);
    CreateStreamObject(2988, -2171.635009, 1507.324584, 38.954204, 0.000000, 0.000000, 45.000000, 500);
    CreateStreamObject(2988, -2171.643066, 1507.318481, 40.658222, 0.000000, 0.000000, 45.000000, 500);
    CreateStreamObject(2988, -1992.414062, 1640.647827, 26.592433, 0.000000, 0.000000, 157.500000, 500);
    CreateStreamObject(2988, -1992.395874, 1640.643920, 30.331996, 0.000000, 0.000000, 157.500000, 500);
    CreateStreamObject(2988, -1991.604858, 1652.419433, 26.545738, 0.000000, 0.000000, 326.249969, 500);
    CreateStreamObject(2988, -1991.594848, 1652.426269, 30.187967, 0.000000, 0.000000, 326.249969, 500);
    CreateStreamObject(1660, -2010.373535, 1550.493530, 42.276115, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(1660, -2016.100952, 1550.489990, 38.567703, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(1660, -2010.323730, 1545.263916, 42.292724, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(1660, -2016.061645, 1545.261962, 38.567703, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(1660, -2010.418090, 1540.224853, 42.301116, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(1660, -2016.107666, 1540.193969, 38.617721, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8657, -2025.457031, 1631.304931, 40.107337, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8657, -2056.307617, 1631.288085, 40.106468, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8657, -2087.029785, 1631.281250, 40.131469, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8657, -2117.515380, 1631.298828, 40.154335, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1994.407348, 1553.433471, 46.850807, 90.240783, 0.000000, 0.000000, 500);
    CreateStreamObject(3749, -2168.185058, 1646.122436, 44.821342, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(3749, -2214.842041, 1646.093872, 44.845542, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2191.742187, 1648.100097, 50.056938, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2191.819580, 1648.204956, 50.309364, 179.517944, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1958.387939, 1538.231567, 46.400764, 179.517944, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -1949.616333, 1659.934570, 35.423816, 0.000000, 90.240783, 179.999877, 500);
    CreateStreamObject(12814, -2207.706787, 1427.192871, 38.912528, 179.517944, 0.000000, 180.000030, 500);
    CreateStreamObject(3268, -1930.415771, 1605.111572, 26.451761, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(3268, -2275.461914, 1655.644531, 47.387756, 0.000000, 0.000000, 180.000030, 500);
    CreateStreamObject(8885, -1943.790283, 1472.916625, 49.928375, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(8077, -1999.482910, 1406.034179, 42.903236, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2932, -1943.031250, 1445.058105, 40.409431, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2932, -1926.534912, 1448.680541, 47.952514, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2932, -1926.526733, 1451.722412, 47.927513, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -1877.604370, 1462.788452, 47.933776, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -1874.684204, 1462.781372, 48.008781, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -1981.378295, 1524.776977, 50.076194, 91.100219, 0.859436, 0.000000, 500);
    CreateStreamObject(8886, -2206.514160, 1417.787963, 25.370683, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -2215.176269, 1440.893310, 23.394823, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -2134.847412, 1501.757568, 40.391670, 0.000000, 0.000000, 90.000030, 500);
    CreateStreamObject(2935, -2074.292968, 1491.428710, 43.201332, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -2074.264648, 1491.387573, 40.371002, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -2074.301757, 1494.340209, 43.201332, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -2074.268066, 1494.337158, 40.371002, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -2226.303710, 1531.517333, 49.041076, 271.478088, 0.000000, 90.000030, 500);
    CreateStreamObject(2935, -2226.432617, 1531.550537, 42.461387, 271.478088, 0.000000, 90.000030, 500);
    CreateStreamObject(8886, -2019.835205, 1633.919555, 29.981327, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(2932, -2137.290039, 1660.163085, 42.369537, 268.899780, 359.140563, 357.421691, 500);
    CreateStreamObject(2932, -2162.331542, 1633.290649, 40.441406, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(2935, -2164.795410, 1658.207031, 42.416419, 271.478088, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -2184.836669, 1654.727661, 42.489051, 271.478088, 0.000000, 0.000000, 500);
    CreateStreamObject(2935, -2189.840087, 1654.914550, 40.439048, 0.000000, 0.000000, 90.000000, 500);
    CreateStreamObject(12814, -2192.775878, 1473.981567, 53.871288, 0.000000, 90.240783, 359.998535, 500);
    CreateStreamObject(12814, -2144.259033, 1488.363891, 38.936851, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2193.760498, 1474.120239, 38.869686, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2192.761718, 1472.214477, 53.979610, 0.000000, 90.240783, 359.999267, 500);
    CreateStreamObject(12814, -2136.197998, 1545.644287, 47.917018, 0.000000, 90.240783, 179.999755, 500);
    CreateStreamObject(12814, -2144.633789, 1509.444824, 50.458358, 179.517944, 0.000000, 90.000000, 500);
    CreateStreamObject(2935, -2035.659790, 1524.956665, 40.452308, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(2935, -2035.676391, 1528.055419, 40.452308, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(2935, -2011.090209, 1594.760009, 42.371757, 271.478088, 0.000000, 270.000000, 500);
    CreateStreamObject(2935, -2011.235717, 1594.751831, 49.136413, 271.478088, 0.000000, 270.000000, 500);
    CreateStreamObject(17019, -2187.604736, 1472.035034, 44.522956, 0.000000, 0.000000, 90.000061, 500);
    CreateStreamObject(13645, -2023.485961, 1524.220214, 52.743247, 2.578308, 270.618652, 270.859436, 500);
    CreateStreamObject(7516, -1932.808105, 1513.808227, 34.752140, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8292, -1980.053833, 1403.259277, 54.000164, 0.000000, 358.281127, 56.250000, 500);
    CreateStreamObject(3108, -1939.468750, 1457.605590, 46.500595, 0.000000, 0.000000, 0.000000, 500);
    CreateStreamObject(7306, -1872.951660, 1440.193115, 67.483024, 0.000000, 0.000000, 315.000000, 500);
    CreateStreamObject(7304, -2087.148437, 1415.519165, 53.447090, 0.000000, 0.000000, 270.000061, 500);
    CreateStreamObject(7305, -1980.549682, 1599.829345, 38.867889, 0.000000, 0.000000, 134.999969, 500);
    CreateStreamObject(8331, -1908.815795, 1505.155029, 62.753334, 0.000000, 0.000000, 201.640594, 500);
    CreateStreamObject(12814, -2160.235839, 1673.551391, 46.567378, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(12814, -2160.151123, 1673.332031, 46.624828, 179.622619, 0.000000, 270.000000, 500);
    CreateStreamObject(10773, -1929.965942, 1631.673339, 29.234012, 0.000000, 0.000000, 180.000000, 500);
    CreateStreamObject(8656, -1934.508300, 1446.743896, 47.629611, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(8330, -1949.454589, 1654.267700, 40.385673, 0.000000, 0.000000, 270.000000, 500);
    CreateStreamObject(9190, -2243.324462, 1532.921630, 54.606849, 0.000000, 0.000000, 180.000000, 500);
    CreateStreamObject(9189, -2130.582031, 1558.229492, 55.472675, 0.000000, 0.000000, 112.499908, 500);
    CreateStreamObject(7307, -2088.954589, 1601.417480, 53.708248, 0.000000, 0.000000, 134.999969, 500);
    CreateStreamObject(2932, -1978.571411, 1619.001586, 29.906103, 90.240783, 0.000000, 0.000000, 500);
    CreateStreamObject(1642, -1954.502685, 1681.233032, 27.429172, 90.240783, 0.000000, 0.000000, 500);
    CreateStreamObject(972, 2528.919922, -1614.686890, 16.482271, 0.0000, 0.0000, 91.9597, 500);
    CreateStreamObject(972, 2538.115234, -1623.458984, 16.492874, 0.0000, 0.0000, 10.3132, 500);
    CreateStreamObject(972, 2504.078369, -1615.530151, 15.516857, 0.0000, 0.0000, 91.9597, 500);
    CreateStreamObject(972, 2479.275391, -1616.138428, 14.399992, 0.0000, 0.0000, 91.1003, 500);
    CreateStreamObject(972, 2454.634521, -1616.626709, 13.504677, 357.4217, 358.2811, 91.1003, 500);
    CreateStreamObject(972, 2430.022217, -1617.115601, 12.084237, 355.7028, 358.2811, 91.1003, 500);
    CreateStreamObject(972, 2405.389404, -1617.629028, 9.810694, 355.7028, 358.2811, 91.1003, 500);
    CreateStreamObject(972, 2380.871826, -1618.058472, 7.844384, 355.7028, 358.2811, 91.1003, 500);
    CreateStreamObject(972, 2355.719727, -1617.237915, 6.155407, 355.7028, 358.2811, 83.3654, 500);
    CreateStreamObject(972, 2331.260254, -1613.944946, 4.346910, 355.7028, 358.2811, 80.7870, 500);
    CreateStreamObject(972, 2306.731201, -1609.129150, 3.040226, 356.5623, 358.2811, 75.6304, 500);
    CreateStreamObject(972, 2282.718750, -1601.823853, 1.950967, 358.2811, 358.2811, 68.7549, 500);
    CreateStreamObject(972, 2259.565186, -1592.982422, 1.574909, 358.2811, 358.2811, 68.7549, 500);
    CreateStreamObject(972, 2236.521240, -1583.426392, 0.873446, 358.2811, 358.2811, 65.3172, 500);
    CreateStreamObject(972, 2222.518311, -1584.666626, 0.232925, 358.2811, 359.1406, 150.4016, 500);
    CreateStreamObject(972, 2244.676270, -1615.128174, 14.817868, 358.2811, 357.4217, 70.4738, 500);
    CreateStreamObject(972, 2233.751709, -1618.473999, 15.080605, 358.2811, 357.4217, 156.4177, 500);
    CreateStreamObject(972, 2224.730713, -1641.342041, 14.401399, 358.2811, 357.4217, 161.5743, 500);
    CreateStreamObject(972, 2217.938477, -1664.801392, 13.707783, 358.2811, 357.4217, 167.5904, 500);
    CreateStreamObject(972, 2213.093750, -1688.920898, 12.756470, 358.2811, 357.4217, 171.0282, 500);
    CreateStreamObject(972, 2210.360596, -1713.255737, 12.038281, 358.2811, 357.4217, 177.0443, 500);
    CreateStreamObject(972, 2210.046143, -1723.897583, 11.793282, 358.2811, 357.4217, 177.0443, 500);
    CreateStreamObject(972, 2216.685303, -1734.247681, 11.901030, 358.2811, 357.4217, 270.7228, 500);
    CreateStreamObject(972, 2241.464355, -1733.916382, 11.204712, 358.2811, 357.4217, 270.7228, 500);
    CreateStreamObject(972, 2266.387207, -1733.520020, 10.968781, 0.0000, 357.4217, 270.7228, 500);
    CreateStreamObject(972, 2291.267090, -1733.083496, 11.168777, 0.0000, 357.4217, 270.7228, 500);
    CreateStreamObject(972, 2316.053223, -1732.775635, 11.212501, 0.0000, 357.4217, 270.7228, 500);
    CreateStreamObject(972, 2341.114502, -1733.068481, 11.468773, 0.8594, 357.4217, 267.2850, 500);
    CreateStreamObject(972, 2365.783691, -1733.817627, 11.818768, 0.8594, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2390.580078, -1733.864990, 12.204697, 0.8594, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2415.050537, -1733.990723, 12.079699, 359.1406, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2439.851563, -1733.998535, 11.735284, 359.1406, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2464.631592, -1733.733032, 11.504707, 359.1406, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2489.551514, -1733.730957, 11.079714, 359.1406, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2514.592529, -1733.442383, 10.829718, 359.1406, 357.4217, 269.8634, 500);
    CreateStreamObject(972, 2534.673828, -1727.406982, 10.479712, 359.1406, 357.4217, 311.9753, 500);
    CreateStreamObject(972, 2540.214600, -1712.146729, 12.030352, 359.1406, 357.4217, 8.6978, 500);
    CreateStreamObject(972, 2538.381836, -1686.950073, 11.638620, 359.1406, 357.4217, 357.5252, 500);
    CreateStreamObject(972, 2538.891602, -1662.319824, 11.303486, 359.1406, 357.4217, 0.1035, 500);
    CreateStreamObject(972, 2538.181641, -1677.482666, 16.813772, 359.1406, 357.4217, 357.5252, 500);
    CreateStreamObject(972, 2538.359619, -1662.199707, 18.324446, 0.0000, 0.0000, 359.1406, 500);
    CreateStreamObject(972, 2537.792969, -1638.161865, 14.876011, 0.0000, 0.0000, 0.0000, 500);
//==============================================================================
    TextRO = TextDrawCreate(465.000000,416.000000,"GREECE");
    TextTR = TextDrawCreate(465.000000,416.000000,"0"); // terrorist
    TextCO = TextDrawCreate(560.000000,415.000000,"0"); // counter
    Textdraw2 = TextDrawCreate(549.000000,401.000000,"Counter");
    Textdraw3 = TextDrawCreate(459.000000,401.000000,"Terrorists");
    TextDrawAlignment(TextCO,0);
    TextDrawAlignment(TextRO,0);
    TextDrawAlignment(TextTR,0);
    TextDrawAlignment(Textdraw2,0);
    TextDrawAlignment(Textdraw3,0);
    TextDrawBackgroundColor(TextCO,0x000000ff);
    TextDrawBackgroundColor(TextRO,0x000000ff);
    TextDrawBackgroundColor(TextTR,0x000000ff);
    TextDrawBackgroundColor(Textdraw2,0x000000ff);
    TextDrawBackgroundColor(Textdraw3,0x000000ff);
    TextDrawFont(TextCO,1);
    TextDrawLetterSize(TextCO,0.899999,2.699999);
    TextDrawFont(TextRO,1);
    TextDrawLetterSize(TextRO,0.899999,2.699999);
    TextDrawFont(TextTR,1);
    TextDrawLetterSize(TextTR,0.899999,2.499999);
    TextDrawFont(Textdraw2,3);
    TextDrawLetterSize(Textdraw2,0.499999,1.100000);
    TextDrawFont(Textdraw3,3);
    TextDrawLetterSize(Textdraw3,0.399999,1.100000);
    TextDrawColor(TextCO,0x0000ff99);
    TextDrawColor(TextTR,COLOR_LIGHTRED);
    TextDrawColor(Textdraw2,0x0000ff99);
    TextDrawColor(Textdraw3,COLOR_LIGHTRED);
    TextDrawSetOutline(TextCO,1);
    TextDrawSetOutline(TextTR,1);
    TextDrawSetOutline(Textdraw2,1);
    TextDrawSetOutline(Textdraw3,1);
    TextDrawSetProportional(TextCO,1);
    TextDrawSetProportional(TextTR,1);
    TextDrawSetProportional(Textdraw2,1);
    TextDrawSetProportional(Textdraw3,1);
    TextDrawSetShadow(TextCO,1);
    TextDrawSetShadow(TextTR,1);
    TextDrawSetShadow(Textdraw2,1);
    TextDrawSetShadow(Textdraw3,1);
    ctscore=0;
    ttscore=0;
//==============================================================================
    SetTimer("SyncUp", 60000, 1);
    SetTimer("OtherTimer", 1000, 1);
    SetTimer("UpdateMoney", 1000, 1);//AntiMoney hack timer
    SetTimer("SaveAccounts", 1800000, 1); //30 mins every account saved
    SetTimer("Spectator", 2000, 1);
    SetTimer("HeadShot", 100, 1);
    if(Anticheat == 0){
		weaponhax = SetTimer("AntiHackCheat", 1000, 1);
	}
	return 1;
}
public OnPlayerRequestClass(playerid, classid){
	SetPlayerClass(playerid, classid);
	SetupPlayerForClassSelection(playerid);
	gPlayerClass[playerid] = classid;
	switch (classid) {

	    case 0:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~r~TERRORIST", 500, 3);
		}
		case 1:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~r~TERRORIST", 500, 3);
	    }
		case 2:
	    {
		    GameTextForPlayer(playerid, "~n~~n~~n~~r~TERRORIST", 500, 3);
		}
		case 3:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~r~TERRORIST", 500, 3);
	    }
	    case 4:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~b~COUNTER-TERRORIST", 500, 3);
	    }
	    case 5:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~b~COUNTER-TERRORIST", 500, 3);
	    }
	    case 6:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~b~COUNTER-TERRORIST", 500, 3);
	    }
	    case 7:
	    {
			GameTextForPlayer(playerid, "~n~~n~~n~~b~COUNTER-TERRORIST", 500, 3);
	    }

}

	return 1;
}
SetPlayerClass(playerid, classid){
if(classid == 0 || classid == 1  || classid == 2  || classid == 3){
gTeam[playerid] = TEAM_TT;
}
else if(classid == 4 || classid == 5  || classid == 6  || classid == 7){
gTeam[playerid] = TEAM_CT;
}
}
public OnPlayerConnect(playerid){
	new plname[MAX_PLAYER_NAME];
	new string[MAX_PLAYER_NAME];
	gPlayerAccount[playerid] = 0;
	SafeTime[playerid] = 60;
	gPlayerLogged[playerid] = 0;
	Unspec[playerid][sLocal] = 255;
	Spectate[playerid] = 255;
	Spectating[playerid] = 0;
   	SpecNewState[playerid] = 0;
   	Suicide[playerid] = 0;
   	PlayerInfo[playerid][pCash] = dollah;
   	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pIP] = 0;
	PlayerInfo[playerid][pKills] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pKnife] = 0;
	PlayerInfo[playerid][pDeagle] = 0;
	PlayerInfo[playerid][pSdpistol] = 0;
	PlayerInfo[playerid][pColt] = 0;
	PlayerInfo[playerid][pMac10] = 0;
	PlayerInfo[playerid][pMP5] = 0;
	PlayerInfo[playerid][pShotgun] = 0;
	PlayerInfo[playerid][pSPAS12] = 0;
	PlayerInfo[playerid][pAK47] = 0;
	PlayerInfo[playerid][pM4] = 0;
	PlayerInfo[playerid][pRifle] = 0;
	PlayerInfo[playerid][pSniperRifle] = 0;
	PlayerInfo[playerid][pRocket] = 0;
	PlayerInfo[playerid][pFlowers] = 0;
	PlayerInfo[playerid][pExtinguisher] = 0;
	PlayerInfo[playerid][pGrenade] = 0;
	PlayerInfo[playerid][pTear] = 0;
	PlayerInfo[playerid][pNitestick] = 0;
	SetPlayerColor(playerid, GREY);
	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "%s.ini", plname);
	if(fexist(string)){
		gPlayerAccount[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, "SERVER: That nick is registered, please login");
		SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now login by typing /login <password>");
		return 1;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		SendClientMessage(playerid,COLOR_YELLOW,"You dont have an account. Please register by using /register [password]");
		return 1;
	}
}
public OnPlayerDisconnect(playerid, reason){
    OnPlayerUpdate(playerid);
    MidoStreamDisconnect(playerid);
	return 1;
}
public OnPlayerRegister(playerid, password[]){
	if(IsPlayerConnected(playerid)){
			new string3[32];
			new ip[20];
			GetPlayerIp(playerid,ip,sizeof(ip));
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile){
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[32];
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "Banned=%d\n",PlayerInfo[playerid][pBanned]);fwrite(hFile, var);
				format(var, 32, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "IP=%s\n",PlayerInfo[playerid][pIP]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				fclose(hFile);
				SendClientMessage(playerid, COLOR_YELLOW, "Account registered, you can login now (/login [password]).");
			}
	}
	return 1;
}
public OnPlayerUpdate(playerid){
	if(IsPlayerConnected(playerid)){
		if(gPlayerLogged[playerid])
		{
			new string3[32];
			new playername3[MAX_PLAYER_NAME];
			new ip[20];
			GetPlayerIp(playerid,ip,sizeof(ip));
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile){
				new var[32];
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "Banned=%d\n",PlayerInfo[playerid][pBanned]);fwrite(hFile, var);
				format(var, 32, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "IP=%s\n",PlayerInfo[playerid][pIP]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 1;
}
public OnPlayerLogin(playerid,password[]){
	new tmp2[256];
    new string2[64];
	new playername2[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), "%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);
	if ( UserFile ){
	    new PassData[256];
	    new keytmp[256], valtmp[256];
	    fread( UserFile , PassData , sizeof( PassData ) );
	    keytmp = ini_GetKey( PassData );
	    if( strcmp( keytmp , "Key" , true ) == 0 )
		{
			valtmp = ini_GetValue( PassData );
			strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
		}
		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			    	if( strcmp( key , "Banned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBanned] = strval( val ); }
			        if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
                }//end while
                fclose(UserFile);//close the file after everything has been read in the while
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "SERVER: Password does not match your name.");
	        fclose(UserFile);
	        return 1;
		}
		SetPlayerCash(playerid,PlayerInfo[playerid][pCash]);
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 21);
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pReg] = 1;
			GivePlayerCash(playerid, 1000);
		}
		if(PlayerInfo[playerid][pBanned] == 1)
		{
			Ban(playerid);
		}
		format(string2, sizeof(string2), "SERVER: Welcome %s",playername2);
		SendClientMessage(playerid, COLOR_WHITE,string2);
		printf("%s has logged in.",playername2);
		if (PlayerInfo[playerid][pDonateRank] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE,"SERVER: You are a Premium Account user.");
		}
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string2, sizeof(string2), "SERVER: You are logged in as a Level %d Admin.",PlayerInfo[playerid][pAdmin]);
			SendClientMessage(playerid, COLOR_WHITE,string2);
		}
		gPlayerLogged[playerid] = 1;
		format(tmp2, sizeof(tmp2), "~w~Welcome ~n~~y~   %s", playername2);
		GameTextForPlayer(playerid, tmp2, 5000, 1);
	}
	return 1;
}
stock ini_GetKey( line[] ){
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}
stock ini_GetValue( line[] ){
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
public OnPlayerSpawn(playerid){
    TextDrawShowForAll(TextCO); TextDrawShowForAll(TextTR); TextDrawShowForAll(Textdraw2); TextDrawShowForAll(Textdraw3);
    Checking[playerid] = true;
	Checking2[playerid] = SetTimerEx("HS", 500, 0, "d", playerid);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,200);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_SAWNOFF_SHOTGUN,200);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_MICRO_UZI,200);
    if(gPlayerLogged[playerid] == 0 && gPlayerAccount[playerid] == 1){
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** This server requires a Login BEFORE spawn (Kicked) **");
        Kick(playerid);
 	}
	SetPlayerSpawn(playerid);
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason){
        new string[256];
        new st[256];
        new name[MAX_PLAYER_NAME];
        new Killername[MAX_PLAYER_NAME];
        new wlevel = PlayerInfo[killerid][pWantedLevel];
        new money = PlayerInfo[killerid][pWantedLevel] * 2000;
        GetPlayerName(playerid,name,sizeof(name));
	    GetPlayerName(killerid,Killername,sizeof(Killername));
//===========================[Victim]===========================================
        if(Suicide[playerid] != 1){
          hitid[playerid] = killerid;
          SetTimerEx("Specstart",3500, false, "i", playerid);
        }
        GivePlayerCash(playerid, -500);
        SetPlayerWantedLevel(playerid,0);
        PlayerInfo[playerid][pWantedLevel] = 0;
        PlayerInfo[playerid][pDeaths] += 1;
	    Suicide[playerid] = 0;
	    Kills[playerid] = 0;
//===========================[Killer]===========================================
	    SendDeathMessage(killerid,playerid,reason);
	    PlayerInfo[killerid][pKills] += 1;
	    SetPlayerScore(killerid, PlayerInfo[killerid][pKills]);
	    PlayerInfo[killerid][pWantedLevel] = wlevel + 1;
	    SetPlayerWantedLevel(killerid, PlayerInfo[killerid][pWantedLevel]);
	    GivePlayerCash(killerid, money);
	    Kills[killerid]++;
//===========================[Team Score]=======================================
	    new string1[256], string2[256];
	    valstr(string1, ctscore);
	    TextDrawSetString(TextCO, string1);
	    valstr(string2, ttscore);
	    TextDrawSetString(TextTR, string2);
	    if(gTeam[killerid] == TEAM_CT)
		{
			ctscore++;
		}
		if(gTeam[killerid] == TEAM_TT )
		{
			ttscore++;
		}
		if(ctscore==30)
		{
		   for(new i=0; i < MAX_PLAYERS; i++)
		   {
              GameTextForAll("~w~ The round is over, ~b~Counter Terrorists ~w~win!", 1000, 5);
              SetTimer("Nextmap", 2000, 0);
		   }
		}
		if(ttscore==30)
		{
		   for(new i=0; i < MAX_PLAYERS; i++)
		   {
              GameTextForAll("~w~ The round is over, ~r~Terrorists ~w~win!", 1000, 5);
              SetTimer("Nextmap", 2000, 0);
		   }
		}
//==============================================================================
        if(Kills[killerid] == 3){
	      format(st,sizeof(st),"~W~%s IS DOMINATING!",Killername);
	      GameTextForAll(st,5000,4);
        }
        if(Kills[killerid] == 5){
	      format(st,sizeof(st),"~W~%s IS ON A KILLING SPREE!",Killername);
	      GameTextForAll(st,5000,4);
        }
        if(Kills[killerid] == 8){
	      format(st,sizeof(st),"~W~%s HAS A MONSTER KILL!!!",Killername);
	      GameTextForAll(st,5000,4);
        }
        if(Kills[killerid] == 11){
	      format(st,sizeof(st),"~W~%s IS ~r~GODLIKE!",Killername);
	      GameTextForAll(st,5000,4);
        }
        if(Kills[killerid] == 15){
	      format(st,sizeof(st),"~W~%s IS ~R~WICKED SICK!",Killername);
	      GameTextForAll(st,5000,4);
        }
        if(Kills[killerid] >= 18){
	      format(st,sizeof(st),"~R~%s HOLY SHIT WITH %d KILLS!",Killername, Kills[killerid]);
	      GameTextForAll(st,5000,4);
        }
//==============================================================================
        if(PlayerInfo[killerid][pAdmin] < 1){
	    new killer[MAX_PLAYER_NAME];
	    GetPlayerName(killerid, killer, sizeof(killer));
	    if(Anticheat == 1){
	        return 1;
	    }
		else if(GetPlayerWeapon(killerid) == 4 && PlayerInfo[killerid][pKnife] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 28 && PlayerInfo[killerid][pMac10] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 35 && PlayerInfo[killerid][pRocket] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 3 && PlayerInfo[killerid][pNitestick] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 30 && PlayerInfo[killerid][pAK47] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
    	}
		else if(GetPlayerWeapon(killerid) == 27 && PlayerInfo[killerid][pSPAS12] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 40 && PlayerInfo[killerid][pDetonator] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 9 && PlayerInfo[killerid][pChainsaw] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 25 && PlayerInfo[killerid][pShotgun] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 23 && PlayerInfo[killerid][pSdpistol] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
            BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 22 && PlayerInfo[killerid][pColt] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 41 && PlayerInfo[killerid][pSpraycan] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 5 && PlayerInfo[killerid][pBat] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 16 && PlayerInfo[killerid][pGrenade] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 17 && PlayerInfo[killerid][pTear] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 41 && PlayerInfo[killerid][pMace] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 42 && PlayerInfo[killerid][pExtinguisher] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 31 && PlayerInfo[killerid][pM4] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 24 && PlayerInfo[killerid][pDeagle] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 33 && PlayerInfo[killerid][pRifle] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 34 && PlayerInfo[killerid][pSniperRifle] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 29 && PlayerInfo[killerid][pMP5] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 14 && PlayerInfo[killerid][pFlowers] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
		else if(GetPlayerWeapon(killerid) == 6 && PlayerInfo[killerid][pShovel] < 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
			printf(string);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			PlayerInfo[killerid][pBanned] = 1;
			Ban(killerid);
			BanLog(string);
		}
	}
    return 1;
}
strtok(const string[], &index){
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' ')){
		index++;
	}
	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1))){
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
public OnPlayerCommandText(playerid, cmdtext[]){
    new cmd[256];
	new tmp[256];
	new string[256];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new giveplayerid, idx;
	new specplayerid;
	cmd = strtok(cmdtext, idx);
//==============================================================================
	if (strcmp("/kill", cmdtext, true, 10) == 0){
	    SetPlayerHealth(playerid,0.0);
	    Suicide[playerid] = 1;
	    return 1;
	}
//==============================================================================
	if (strcmp("/plantbomb", cmdtext, true, 6) == 0 && gTeam[playerid] == TEAM_TT){
        if(IsPlayerInCheckpoint(playerid)){
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have successfully planted the bomb!");
            GameTextForAll("~r~ The bomb has been planted!", 3000, 5);
            DisablePlayerCheckpoint(playerid);
            IsBombPlanted = 1;
			SetTimer("Counter", 1000, 1);
            Count = 60;
            return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "You can only plant the bomb in the checkpoint!");
            return 1;
        }
 	}
//==============================================================================
	if (strcmp("/defuse", cmdtext, true, 7) == 0 && gTeam[playerid] == TEAM_CT){
        if(IsPlayerInCheckpoint(playerid) && IsBombPlanted){
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You must type '/27379384' to defuse the bomb quickly!");
			DefuseCode = 1;
            return 1;
        }
        else if(IsPlayerInCheckpoint(playerid)){
            SendClientMessage(playerid, COLOR_GREY, "The bomb hasn't been planted yet!");
            return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "You can only defuse the bomb in the checkpoint!");
            return 1;
		}
	}
//==============================================================================
	if (strcmp("/27379384", cmdtext, true, 9) == 0 && gTeam[playerid] == TEAM_CT){
        if(IsPlayerInCheckpoint(playerid) && IsBombPlanted && DefuseCode){
            Defused = 1;
            TogglePlayerControllable(playerid, 0);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You succesfully defused the bomb!");
            DisablePlayerCheckpoint(playerid);
            GameTextForAll("The bomb has been defused!", 3000, 5);
            GameTextForAll("~w~ The round is over, ~b~Counter Terrorists ~w~win!", 1000, 5);
            SetTimer("Nextmap", 2000, 0);
            return 1;
        }
        else if(IsPlayerInCheckpoint(playerid)){
            SendClientMessage(playerid, COLOR_GREY, "The bomb has not been planted!");
            return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "You can only defuse the bomb in the checkpoint!");
            return 1;
		}
    }
//==============================================================================
	if (strcmp(cmd, "/stats", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (gPlayerLogged[playerid] != 0){
				ShowStats(playerid,playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Logged in !");
			}
		}
		return 1;
	}
//==============================================================================
	if (strcmp(cmd, "/shop", true) == 0){
	    if(IsPlayerConnected(playerid)){
	        if (!IsAtShop(playerid)){
			   SendClientMessage(playerid, COLOR_GRAD2, "   You are not near the shop !");
			   return 1;
		    }
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Weapon Lists", "Kevlar Vest ($5,000)\nKnife ($1,000)\nColt45 ($2,500)\nDesert Eagle ($3,500)\nSilenced Pistol ($1,000)\nMac10 ($4,500)\nMP5 ($5,000)\nAK-47 ($5,000)\nM4 ($5,000)\nShotgun ($2,500)\nSpas12 ($50,000)\nRifle ($10,000)\nSniper Rifle ($15,000)\nGrenades ($10,000)\nTeargas ($5,000)\nRocket Lancher ($1,000,000)", "Select", "Cancel");
		}
		return 1;
	}
//==============================================================================
	if (strcmp(cmd, "/login", true) ==0 ){
	    if(IsPlayerConnected(playerid)){
	        new tmppass[64];
			if(gPlayerLogged[playerid] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "SERVER: You are already logged in.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /login [password]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			OnPlayerLogin(playerid,tmppass);
		}
		return 1;
	}
	if (strcmp(cmd, "/register", true) ==0 ){
	    if(IsPlayerConnected(playerid)){
	        if(gPlayerLogged[playerid] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "SERVER: You are already logged in.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile){
				SendClientMessage(playerid, COLOR_YELLOW, "That Username is already taken, please choose a different one.");
				fclose(hFile);
				return 1;
			}
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /register [password]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			OnPlayerRegister(playerid,tmppass);
		}
		return 1;
	}
//=============================[AdmCmd]=========================================
    if(strcmp(cmd, "/ahelp", true) == 0 || strcmp(cmd, "/ah", true) == 0){
	    if(IsPlayerConnected(playerid)){
	      if(PlayerInfo[playerid][pAdmin] > 0){
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pAdmin] >= 1){
				SendClientMessage(playerid, COLOR_GRAD1, "*1* ADMIN: /listguns /spec /check /setint /kick /setname /ipcheck");
				SendClientMessage(playerid, COLOR_GRAD1, "*1* ADMIN: /warn /ban /sban /gotoid /a(dmin) chat /fine");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2){
				SendClientMessage(playerid, COLOR_GRAD2,"*2* ADMIN: /freeze /unfreeze /nextmap");
			}
			if (PlayerInfo[playerid][pAdmin] >= 3){
				SendClientMessage(playerid, COLOR_GRAD3,"*3* ADMIN: /sethpall /setarmorall /jetpack");
				SendClientMessage(playerid, COLOR_GRAD4,"*3* ADMIN: /gmx /mark /gotomark /gethere");
			}
			if (PlayerInfo[playerid][pAdmin] >= 4){
			    SendClientMessage(playerid, COLOR_GRAD4,"*4* ADMIN: /sethp /setarmor /givegun /givemoney /setmoney");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1337){
				SendClientMessage(playerid, COLOR_GRAD5,"*1337 ADMIN: /savechars  /weather /weatherall /makeadmin /tod /anticheat");
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	      }
		}
		return 1;
	}
//=========================[Admin Chat]=========================================
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0){
	    if(IsPlayerConnected(playerid)){
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' ')){
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/a)dmin [admin chat]");
				return 1;
			}
			format(string, sizeof(string), "*%d Admin %s: %s", PlayerInfo[playerid][pAdmin], sendername, result);
			if (PlayerInfo[playerid][pAdmin] >= 1){
				SendAdminMessage(COLOR_YELLOW, string);
			}
			printf("Admin %s: %s", sendername, result);
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/setname", true) == 0){
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		new tmpp[256];
		tmpp = strtok(cmdtext, idx);
		if(!strlen(tmpp)){
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setname [Playerid/PartOfName] [Name]");
			return 1;
		}
		giveplayerid = strval(tmpp);
		tmp = strtok(cmdtext, idx);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid)){
		    if(PlayerInfo[playerid][pAdmin] >= 1){
		        if(IsPlayerConnected(giveplayerid)){
					SetPlayerName(giveplayerid, tmp);
					format(string, sizeof(string), "You have set %s's name to %s", giveplayer, tmp);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "Your name has been changed from %s to %s", giveplayer, tmp);
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
				}
				else{
				    format(string, sizeof(string), "%d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
			else{
			    SendClientMessage(playerid, COLOR_RED, "You are not an Admin !");
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_RED, "You Must be logged in to use this command!");
		}
	  	return 1;
	}
//=========================[Team Chat]==========================================
	if(strcmp(cmd, "/team", true) == 0 || strcmp(cmd, "/t", true) == 0){
	    if(IsPlayerConnected(playerid)){
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' ')){
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/t)eam [team chat]");
				return 1;
			}
			format(string, sizeof(string), "[TEAM] %s: %s", sendername, result);
			if(gTeam[playerid] == TEAM_CT){
				SendCounterMessage(ORANGE, string);
			}
			else if(gTeam[playerid] == TEAM_TT){
				SendTerrorMessage(ORANGE, string);
			}
			printf("[TEAM] %s: %s", sendername, result);
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/pm", true) == 0){
	    if(IsPlayerConnected(playerid)){
	        if(gPlayerLogged[playerid] == 0){
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pm [playerid/PartOfName] [text]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (IsPlayerConnected(giveplayerid)){
			    if(giveplayerid != INVALID_PLAYER_ID){
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' ')){
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result)){
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pm [playerid/PartOfName] [text]");
							return 1;
						}
						format(string, sizeof(string), "* PM from %s(ID: %d): %s", sendername, playerid, (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "* PM to %s(ID: %d): %s", giveplayer, giveplayerid, (result));
						SendClientMessage(playerid,  COLOR_YELLOW, string);
						printf("%s: /w %s", sendername, result);
						return 1;
				}
			}
			else{
					format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/jetpack",true)==0){
		if(IsPlayerConnected(playerid)){
		    if (PlayerInfo[playerid][pAdmin] >= 4){
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
				return 1;
			}
		}
	}
//==============================================================================
	if(strcmp(cmd, "/help",true)==0){
		if(IsPlayerConnected(playerid)){
			    SendClientMessage(playerid, COLOR_GRAD2,"GENERAL: /changepass /rules /report /shop /kill /pm /t(eam)");
			    if(PlayerInfo[playerid][pAdmin] >= 1){
			      SendClientMessage(playerid, COLOR_GRAD2,"ADMINS: /ah(admin help) /(a)dmin chat");
			    }
			    if(gTeam[playerid] == TEAM_CT){
			      SendClientMessage(playerid, COLOR_GRAD2,"OBJECTIVE: Find The bomb quickly, Type /defuse to turn it off");
			    }
			    else if(gTeam[playerid] == TEAM_TT){
			      	SendClientMessage(playerid, COLOR_GRAD2,"OBJECTIVE: Plant The bomb by typing /plantbomb , Try to defend it until it blowup");
			    }
				return 1;
		}
	}
//==============================================================================
	if(strcmp(cmd, "/rules",true)==0){
		if(IsPlayerConnected(playerid)){
		    if (PlayerInfo[playerid][pAdmin] >= 4){
			    SendClientMessage(playerid, COLOR_YELLOW2,"- Don't use hacks, Example: Health hack, Weapon Hack, etc.");
			    SendClientMessage(playerid, COLOR_YELLOW2,"- Don't abuse the Server Bugs like C-Bug");
			    SendClientMessage(playerid, COLOR_YELLOW2,"- Don't Spam the chat.");
			    SendClientMessage(playerid, COLOR_YELLOW2,"- If you see a hacker /report him and don't tell his name in chat");
			    SendClientMessage(playerid, COLOR_YELLOW2,"- Respect the Admins and all the players, No Racism");
				return 1;
			}
		}
	}
//==============================================================================
	if (strcmp(cmd, "/changepass", true) ==0 ){
	    if(IsPlayerConnected(playerid)){
	        if(gPlayerLogged[playerid] == 0){
	            SendClientMessage(playerid, COLOR_GREY, "   You haven't logged in yet!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s.ini", sendername);
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /changepass [newpassword]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			OnPlayerRegister(playerid,tmppass);
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/report", true) == 0){
	    if(IsPlayerConnected(playerid)){
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' ')){
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /report [text]");
				return 1;
			}
			format(string, sizeof(string), "Report from:[%d] %s: %s", playerid, sendername, (result));
			ABroadCast(COLOR_YELLOW2,string,1);
			SendClientMessage(playerid, COLOR_YELLOW, "Your Report Message was sent to the Admins.");
			printf("/report %s", string);
	    }
	    return 1;
	}
//=========================[Set Interior]=======================================
	if(strcmp(cmd, "/setint", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setint [playerid/PartOfName] [interiorid]");
				return 1;
			}
			new playa;
			playa = strval(tmp);
			new intid;
			tmp = strtok(cmdtext, idx);
			intid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(playa)){
			        if(playa != INVALID_PLAYER_ID){
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						format(string, sizeof(string), "   You have set %s's interior to %d.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
 	if(strcmp(cmd, "/setvw", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setvw [playerid/PartOfName] [virworldid]");
				return 1;
			}
			new playa;
			playa = strval(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(playa)){
			        if(playa != INVALID_PLAYER_ID){
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), "   You have set %s virtual world to %d.", giveplayer, virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
    if(strcmp(cmd, "/givegun", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givegun [playerid/PartOfName] [weaponid]");
				return 1;
			}
			new giveplayerid2;
			new gun;
			giveplayerid2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givegun [playerid/PartOfName] [weaponid] [ammo]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "21(jetpack) 24(Deagle) 25(shotgun)27(spas12) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 4){
				if (gun > 1||gun < 47){
			    	if(IsPlayerConnected(giveplayerid2)){
			        	if(giveplayerid2 != INVALID_PLAYER_ID){
			        	  GivePlayerWeapon(giveplayerid2, gun, 99999);
						}
					}
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAD2, "You have selected an invalid Gun ID.");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/weather", true) == 0){
	    if(IsPlayerConnected(playerid)){
	        if(PlayerInfo[playerid][pAdmin] < 1337){
			    SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /weather [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45 !"); return 1; }
			SetPlayerWeather(playerid, weather);
			SendClientMessage(playerid, COLOR_GREY, "   Weather Set !");
		}
		return 1;
	}
	if(strcmp(cmd, "/weatherall", true) == 0){
	    if(IsPlayerConnected(playerid)){
	        if(PlayerInfo[playerid][pAdmin] < 1337){
			    SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /weatherall [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45 !"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "   Weather Set to everyone !");
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/setmoney", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /money [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = strval(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4){
			    if(IsPlayerConnected(playa)){
			        if(playa != INVALID_PLAYER_ID){
						SetPlayerCash(playa, money);
					}
				}
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/givemoney", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givemoney [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = strval(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						GivePlayerCash(playa, money);
					}
				}
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/mark", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (PlayerInfo[playerid][pAdmin] >= 3){
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   Teleporter destination set");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/gotomark", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (PlayerInfo[playerid][pAdmin] >= 3){
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
				SetPlayerInterior(playerid,0);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/gotoid", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotoid [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (IsPlayerConnected(plo)){
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						GetPlayerInterior(plo);
						SetPlayerInterior(playerid, GetPlayerInterior(plo));
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
							SetPlayerInterior(playerid, GetPlayerInterior(plo));
						}
						SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/gethere", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gethere [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (IsPlayerConnected(plo)){
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[plo][pAdmin] > 1337)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Ask the admin to goto you.");
						return 1;
					}
					if (PlayerInfo[playerid][pAdmin] >= 3)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
                        GetPlayerInterior(playerid);
						SetPlayerInterior(plo, GetPlayerInterior(playerid));
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
							SetPlayerInterior(plo, GetPlayerInterior(playerid));
						}
						SendClientMessage(plo, COLOR_GRAD1, "   You have been teleported");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/slap", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /slap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[playa][pAdmin] > PlayerInfo[playerid][pAdmin])
				        {
							SendClientMessage(playerid, COLOR_LIGHTRED, "Dont try it again noob !");
							SetPlayerHealth(playerid, 0);
							return 1;
				        }
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("AdmCmd: %s slapped %s",sendername,  giveplayer);
						format(string, sizeof(string), "AdmCmd: %s was slapped by %s",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
		}
		return 1;
	}
//==============================================================================
    if(strcmp(cmd, "/kick", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				        {
				        	new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s was kicked, reason: Attempting to kick a higher level admin (%d-%d-%d)", sendername, month,day,year);
							KickLog(string);
							format(string, sizeof(string), "AdmCmd: %s was kicked, reason: Attempting to kick a higher level admin", sendername);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							Kick(playerid);
							return 1;
				        }
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid/PartOfName] [reason]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/skick", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /skick [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
				if(IsPlayerConnected(giveplayerid))
				{
				    if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				    {
				        new year, month,day;
				        getdate(year, month, day);
				        format(string, sizeof(string), "AdmCmd: %s was kicked, reason: Attempting to kick a higher level admin (%d-%d-%d)", sendername, month,day,year);
				        KickLog(string);
				        format(string, sizeof(string), "AdmCmd: %s was kicked, reason: Attempting to kick a higher level admin", sendername);
				        SendClientMessageToAll(COLOR_LIGHTRED, string);
				        Kick(playerid);
				        return 1;
				    }
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/warn", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /warn [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /warn [playerid/PartOfName] [reason]");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
						    new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							PlayerInfo[giveplayerid][pBanned] = 1;
							Ban(giveplayerid);
							return 1;
						}
						format(string, sizeof(string), "You warned %s, reason: %s", giveplayer, (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "You were warned by %s, reason: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/fine", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fine [playerid/PartOfName] [amount] [reason]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] > 0){
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new fine;
						tmp = strtok(cmdtext, idx);
						if (!strlen(tmp))
						{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fine [playerid/PartOfName] [amount] [reason]");
						return 1;
						}
						fine = strval(tmp);
						if (fine < 0)
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Amount must be greater than 0");
							return 1;
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fine [playerid/PartOfName] [amount] [reason]");
							return 1;
						}
						format(string, sizeof(string), "AdmCmd: %s was fined $%d by an Admin, reason %s", giveplayer, fine, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						GivePlayerCash(giveplayerid, -fine);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/sban", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sban [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				        {
							new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher level admin (%d-%d-%d)", sendername, month,day,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher level admin", sendername);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							Ban(playerid);
							return 1;
				        }
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sban [playerid/PartOfName] [reason]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/ban", true) == 0){
	    if(IsPlayerConnected(playerid)){
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				        {
							new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher level admin (%d-%d-%d)", sendername, month,day,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher level admin", sendername);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							Ban(playerid);
							return 1;
				        }
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid/PartOfName] [reason]");
							return 1;
						}
                        new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/listguns", true) == 0){
		if (PlayerInfo[playerid][pAdmin] < 1){
		    SendClientMessage(playerid, COLOR_GREY, "You are not authorized");
		    return 1;
	    }
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /listguns [playerid/partOfName]");
		    return 1;
	    }
		giveplayerid = strval(tmp);
		if (giveplayerid == INVALID_PLAYER_ID){
		    SendClientMessage(playerid, COLOR_GREY, "That player is offline");
		    return 1;
	    }
	    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	    format(string, sizeof(string), "%s has the following weapons", giveplayer);
	    SendClientMessage(playerid, COLOR_GREY, string);
	    if(PlayerInfo[giveplayerid][pBat] == 1) {SendClientMessage(playerid, COLOR_WHITE, "Baseball Bat");}
	    if(PlayerInfo[giveplayerid][pSpraycan] == 1){SendClientMessage(playerid, COLOR_WHITE, "Spraycan");}
	    if(PlayerInfo[giveplayerid][pKnife] == 1){SendClientMessage(playerid, COLOR_WHITE, "Knife");}
	    if(PlayerInfo[giveplayerid][pNitestick] == 1){SendClientMessage(playerid, COLOR_WHITE, "Nitestick");}
	    if(PlayerInfo[giveplayerid][pFlowers] == 1){SendClientMessage(playerid, COLOR_WHITE, "Flowers");}
	    if(PlayerInfo[giveplayerid][pSdpistol] == 1){SendClientMessage(playerid, COLOR_WHITE, "Silenced Pistol");}
	    if(PlayerInfo[giveplayerid][pColt] == 1){SendClientMessage(playerid, COLOR_WHITE, "Colt45");}
	    if(PlayerInfo[giveplayerid][pDeagle] == 1){SendClientMessage(playerid, COLOR_WHITE, "Desert Eagle");}
	    if(PlayerInfo[giveplayerid][pShotgun] == 1){SendClientMessage(playerid, COLOR_WHITE, "Shotgun");}
	    if(PlayerInfo[giveplayerid][pSPAS12] == 1){SendClientMessage(playerid, COLOR_WHITE, "Combat Shotgun");}
	    if(PlayerInfo[giveplayerid][pMP5] == 1){SendClientMessage(playerid, COLOR_WHITE, "MP5");}
	    if(PlayerInfo[giveplayerid][pMac10] == 1){SendClientMessage(playerid, COLOR_WHITE, "Mac-10");}
	    if(PlayerInfo[giveplayerid][pAK47] == 1){SendClientMessage(playerid, COLOR_WHITE, "AK-47");}
	    if(PlayerInfo[giveplayerid][pM4] == 1){SendClientMessage(playerid, COLOR_WHITE, "M4");}
	    if(PlayerInfo[giveplayerid][pRifle] == 1){SendClientMessage(playerid, COLOR_WHITE, "Country Rifle");}
	    if(PlayerInfo[giveplayerid][pSniperRifle] == 1){SendClientMessage(playerid, COLOR_WHITE, "Sniper Rifle");}
	    if(PlayerInfo[giveplayerid][pTear] == 1){SendClientMessage(playerid, COLOR_WHITE, "Tear Gas");}
	    if(PlayerInfo[giveplayerid][pGrenade] == 1){SendClientMessage(playerid, COLOR_WHITE, "Grenades");}
	    if(PlayerInfo[giveplayerid][pRocket] == 1){SendClientMessage(playerid, COLOR_WHITE, "Rocket Launcher");}
		return 1;
	}
//==============================================================================
	if (strcmp(cmd, "/check", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (PlayerInfo[playerid][pAdmin] >= 1){
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /check [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	            giveplayerid = strval(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/anticheat", true) == 0){
	        if(PlayerInfo[playerid][pAdmin] >= 1337){
    		if(Anticheat == 0)
    		{
	   			SendClientMessage(playerid, COLOR_WHITE, "You have disabled the anticheat.");
    			Anticheat = 1;
    			KillTimer(weaponhax);
    		}
    		else if(Anticheat == 1)
    		{
    			SendClientMessage(playerid, COLOR_WHITE, "You have enabled the anticheat.");
    			Anticheat = 0;
    			weaponhax = SetTimer("AntiHackCheat", 1000, 1);
    		}
    		}
	}
//==============================================================================
	if(strcmp(cmd, "/sethp", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sethp [playerid/PartOfName] [health]");
				return 1;
			}
			new playa;
			new health;
			playa = strval(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/makeadmin", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /makeadmin [playerid/PartOfName] [level(1-1337)]");
				return 1;
			}
			new para1;
			new level;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337){
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pAdmin] = level;
						printf("AdmCmd: %s has promoted %s to a level %d admin.", sendername, giveplayer, level);
						format(string, sizeof(string), "   You have been promoted to a level %d admin by %s", level, sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   You have promoted %s to a level %d admin.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/spec", true) == 0){
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /spec [playerid]");
			return 1;
		}
		specplayerid = strval(tmp);
		if(!IsPlayerConnected(specplayerid)) {
		    SendClientMessage(playerid, COLOR_RED, "specplayer: that player isn't active.");
			return 1;
		}
		new specid[MAX_PLAYER_NAME];
	    GetPlayerName(specplayerid, specid, sizeof(specid));
	    Unspec[playerid][sPint] = GetPlayerInterior(playerid);
	    Unspec[playerid][sVw] = GetPlayerVirtualWorld(playerid);
	    GetPlayerFacingAngle(playerid, Unspec[playerid][sAngle]);
	    GetPlayerPos( playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz] );
	    Spectating[playerid] = 1;
	    TogglePlayerSpectating(playerid, 1);
	    format(string, sizeof(string), "You are now spectating player %s (ID: %d).", specid, specplayerid);
	    SendClientMessage(playerid, COLOR_ADMINCMD, string);
	    SpectatorRefresh(playerid, specplayerid);
	    refresher = SetTimerEx("SpectatorRefresh", 3000, true, "dd", playerid, specid);
        SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /specoff to stop spectating ");
        }
        else
        {
          SendClientMessage(playerid, COLOR_WHITE, "You are not an Admin !");
          return 1;
        }

 		return 1;
	}
//==============================================================================
 	if(strcmp(cmd, "/specoff", true) == 0){
	    if(PlayerInfo[playerid][pAdmin] >= 1)
		{
    	TogglePlayerSpectating(playerid, 0);
    	Spectating[playerid] = 0;
    	SpecReturnPosDue[playerid] = 1;
    	SpecNewState[playerid] = 0;
    	KillTimer(refresher);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerInterior(playerid, Unspec[playerid][sPint]);
    	SetPlayerVirtualWorld(playerid, Unspec[playerid][sVw]);
    	SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
    	SetPlayerFacingAngle(playerid, Unspec[playerid][sAngle]);
        RestoreWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREY, "You are no longer spectating.");
		return 1;
		}
	}
//==============================================================================
	if(strcmp(cmd, "/setarmor", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setarmor [playerid/PartOfName] [armor]");
				return 1;
			}
			new playa;
			new health;
			playa = strval(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/sethpall", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sethpall [health]");
				return 1;
			}
			new health;
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3){
			    for(new i = 0; i < MAX_PLAYERS; i++)
	            {
					SetPlayerHealth(i, health);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
    if(strcmp(cmd, "/setarmorall", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setarmorall [armor]");
				return 1;
			}
			new health;
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3){
			    for(new i = 0; i < MAX_PLAYERS; i++)
	            {
					SetPlayerArmour(i, health);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//=============================[IP Check]=======================================
	if(strcmp(cmd, "/ipcheck", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ipcheck [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						new ip[20];
			            GetPlayerIp(playa,ip,sizeof(ip));
			            format(string, sizeof(string), "%s's IP: %s\n", giveplayer, ip);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/freeze", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /freeze [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = strval(tmp);
			if(PlayerInfo[playa][pAdmin] > PlayerInfo[playerid][pAdmin]){
				SendClientMessage(playerid, COLOR_GREY, "You can't froze higher level Admins !");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 2){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						format(string, sizeof(string), "AdmCmd: %s Freezes %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s was Frozen by %s",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/unfreeze", true) == 0){
	    if(IsPlayerConnected(playerid)){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /unfreeze [playerid]");
				return 1;
			}
			new playa;
			playa = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1){
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						format(string, sizeof(string), "AdmCmd: %s UnFroze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s was UnFrozen by %s",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Admin!");
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/gmx", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (PlayerInfo[playerid][pAdmin] >= 1337){
				GameModeExit();
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/nextmap", true) == 0){
	    if(IsPlayerConnected(playerid)){
			if (PlayerInfo[playerid][pAdmin] >= 2){
			    SetTimer("Nextmap", 2000, 0);
			    for(new i = 0; i < MAX_PLAYERS; i++)
	            {
				   TogglePlayerControllable(i, 0);
				}
			}
		}
		return 1;
	}
//==============================================================================
	if(strcmp(cmd, "/savechars", true) == 0){
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
			SaveAccounts();
			SendClientMessage(playerid, COLOR_YELLOW, "All player accounts updated successfully.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command !");
		}
		return 1;
	}
	return 0;
}
public SetupPlayerForClassSelection(playerid){
	    SetPlayerInterior(playerid,14);
	    SetPlayerPos(playerid,258.4893,-41.4008,1002.0234);
    	SetPlayerFacingAngle(playerid, 90.0);
    	SetPlayerCameraPos(playerid,256.0815,-43.0475,1003.0234);
    	SetPlayerCameraLookAt(playerid,258.4893,-41.4008,1002.0234);

}
public OtherTimer(){
    for(new i = 0; i < MAX_PLAYERS; i++){
	    if(IsPlayerConnected(i)){
            if(SafeTime[i] > 0){
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1){
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "HINT: You can now login by typing /login <password>");
				}
			}
		}
	}
	return 1;
}
//=============================[Anti-Money Hack Functions]======================
stock GivePlayerCash(playerid, money){
	PlayerInfo[playerid][pCash] += money;
	ResetMoneyBar(playerid);
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
	return PlayerInfo[playerid][pCash];
}
stock SetPlayerCash(playerid, money){
	PlayerInfo[playerid][pCash] = money;
	ResetMoneyBar(playerid);
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
	return PlayerInfo[playerid][pCash];
}
stock ResetPlayerCash(playerid){
	PlayerInfo[playerid][pCash] = 0;
	ResetMoneyBar(playerid);
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
	return PlayerInfo[playerid][pCash];
}
stock GetPlayerCash(playerid){
	return PlayerInfo[playerid][pCash];
}

public UpdateMoney(){
	for(new i=0; i<MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
			if(GetPlayerCash(i) != GetPlayerMoney(i)){
 	 			new hack = GetPlayerMoney(i) - GetPlayerCash(i);
			  	if(hack >= 500)
		  		{
		  		}
 		        ResetMoneyBar(i);
			    UpdateMoneyBar(i,PlayerInfo[i][pCash]);
			}
		}
	}
	return 1;
}
public KickLog(string[]){
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public BanLog(string[]){
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public ABroadCast(color,const string[],level){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level){
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}
public SaveAccounts(){
    for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
			OnPlayerUpdate(i);
		}
	}
}
public AntiHackCheat(){
	new string[128];
	for (new i = 0; i < MAX_PLAYERS; i++){
	    if(IsPlayerConnected(i) && gPlayerLogged[i] == 1){
	        if(PlayerInfo[i][pAdmin] < 1)
	        {
    			switch(GetPlayerWeapon(i))
    			{
        			case 9, 26, 32, 36, 37, 38, 47:
        			{
        			    new killer[MAX_PLAYER_NAME];
        			    GetPlayerName(i, killer, sizeof(killer));
       			        if(GetPlayerWeapon(i) == 18)
       			        {
       			    		format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
       			    	}
        			    else
        			    {
        			        format(string, sizeof(string), "AdmCmd: %s was banned, reason: Weapon Hacking.", killer);
        			    }
        			    SendClientMessageToAll(COLOR_LIGHTRED, string);
        			    printf("[ANTICHEAT] %s has just been banned, defined reason: Weapon Hacking.", killer);
        			    Ban(i);
        			    BanLog(string);
        			}
    			}
			}
	    }
	}
	return 1;
}
public RestoreWeapons(playerid){
	if(PlayerInfo[playerid][pM4] > 0){
	    GivePlayerWeapon(playerid, 31, 99999);
	}
	if(PlayerInfo[playerid][pAK47] > 0){
	    GivePlayerWeapon(playerid, 30, 99999);
	}
	if(PlayerInfo[playerid][pSPAS12] > 0){
	    GivePlayerWeapon(playerid, 27, 500);
	}
	if(PlayerInfo[playerid][pDetonator] > 0){
	    GivePlayerWeapon(playerid, 40, 1);
	}
	if(PlayerInfo[playerid][pMP5] > 0){
	    GivePlayerWeapon(playerid, 29, 99999);
	}
	if(PlayerInfo[playerid][pDeagle] > 0){
	    GivePlayerWeapon(playerid, 24, 200);
	}
	if(PlayerInfo[playerid][pShotgun] > 0){
	    GivePlayerWeapon(playerid, 25, 99999);
	}
	if(PlayerInfo[playerid][pColt] > 0){
	    GivePlayerWeapon(playerid, 22, 200);
	}
	if(PlayerInfo[playerid][pSpraycan] > 0){
	    GivePlayerWeapon(playerid, 41, 99999);
	}
	if(PlayerInfo[playerid][pBat] > 0){
	    GivePlayerWeapon(playerid, 5, 99999);
	}
	if(PlayerInfo[playerid][pGrenade] > 0){
	    GivePlayerWeapon(playerid, 16, 5);
	}
	if(PlayerInfo[playerid][pTear] > 0){
	    GivePlayerWeapon(playerid, 17, 10);
	}
	if(PlayerInfo[playerid][pSdpistol] > 0){
	    GivePlayerWeapon(playerid, 23, 99999);
	}
	if(PlayerInfo[playerid][pFlowers] > 0){
	    GivePlayerWeapon(playerid, 14, 1);
	}
	if(PlayerInfo[playerid][pShovel] > 0){
	    GivePlayerWeapon(playerid, 6, 1);
	}
	if(PlayerInfo[playerid][pRifle] > 0){
	    GivePlayerWeapon(playerid, 33, 20);
	}
	if(PlayerInfo[playerid][pSniperRifle] > 0){
	    GivePlayerWeapon(playerid, 34, 10);
	}
	if(PlayerInfo[playerid][pMace] > 0){
	    GivePlayerWeapon(playerid, 41, 99999);
	}
	if(PlayerInfo[playerid][pExtinguisher] > 0){
	    GivePlayerWeapon(playerid, 42, 99999);
	}
	if(PlayerInfo[playerid][pChainsaw] > 0){
	    GivePlayerWeapon(playerid, 9, 1);
	}
	if(PlayerInfo[playerid][pNitestick] > 0){
	    GivePlayerWeapon(playerid, 3, 1);
	}
	if(PlayerInfo[playerid][pKnife] > 0){
	    GivePlayerWeapon(playerid, 4, 1);
	}
	if(PlayerInfo[playerid][pRocket] > 0){
	    GivePlayerWeapon(playerid, 35, 5);
	}
	if(PlayerInfo[playerid][pMac10] > 0){
	    GivePlayerWeapon(playerid, 28, 200);
	}
	return 1;
}
public ResetPlayerWeaponsEx(playerid){
    PlayerInfo[playerid][pM4] = 0;
    PlayerInfo[playerid][pMP5] = 0;
    PlayerInfo[playerid][pNitestick] = 0;
    PlayerInfo[playerid][pDeagle] = 0;
    PlayerInfo[playerid][pSniperRifle] = 0;
    PlayerInfo[playerid][pRifle] = 0;
    PlayerInfo[playerid][pFlowers] = 0;
    PlayerInfo[playerid][pShovel] = 0;
    PlayerInfo[playerid][pShotgun] = 0;
    PlayerInfo[playerid][pSdpistol] = 0;
    PlayerInfo[playerid][pColt] = 0;
    PlayerInfo[playerid][pSpraycan] = 0;
    PlayerInfo[playerid][pBat] = 0;
    PlayerInfo[playerid][pGrenade] = 0;
    PlayerInfo[playerid][pTear] = 0;
    PlayerInfo[playerid][pChainsaw] = 0;
    PlayerInfo[playerid][pKnife] = 0;
    PlayerInfo[playerid][pExtinguisher] = 0;
    PlayerInfo[playerid][pMace] = 0;
    PlayerInfo[playerid][pSPAS12] = 0;
    PlayerInfo[playerid][pDetonator] = 0;
    PlayerInfo[playerid][pAK47] = 0;
    PlayerInfo[playerid][pMac10] = 0;
    PlayerInfo[playerid][pRocket] = 0;
	ResetPlayerWeapons(playerid);
	return 1;
}
public ShowStats(playerid,targetid){
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)){
		new coordsstring[256];
		new kills = PlayerInfo[targetid][pKills];
		new deaths = PlayerInfo[targetid][pDeaths];
		new ctime = PlayerInfo[targetid][pConnectTime];
		new cash = PlayerInfo[targetid][pCash];
		new warns = PlayerInfo[targetid][pWarns];
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"%s ***",name);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Kills:[%d] Deaths:[%d] Connected Time:[%d] Cash:[$%d] Warnings:[%d]", kills,deaths,ctime,cash,warns);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}
public SendAdminMessage(color, string[]){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
public SendCounterMessage(color, string[]){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == TEAM_CT)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
public SendTerrorMessage(color, string[]){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == TEAM_TT)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
stock right(source[], len){
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}
stock strvalEx( const string[] ){
	if( strlen( string ) >= 50 ) return 0;
	return strval(string);
}
public SetPlayerSpawn(playerid){
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid)){
	    if(SpecReturnPosDue[playerid] == 1)
    	{
    		SetPlayerInterior(playerid, Unspec[playerid][sPint]);
    		SetPlayerVirtualWorld(playerid, Unspec[playerid][sVw]);
    		SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
    		SetPlayerFacingAngle(playerid, Unspec[playerid][sAngle]);
    		SpecReturnPosDue[playerid] = 0;
    		RestoreWeapons(playerid);
    		TogglePlayerControllable(playerid, 1);
    		return 1;
    	}
    	if(Map == 1)
    	{
    	   if(gTeam[playerid] == TEAM_CT)
    	   {
    	      SetPlayerPos(playerid, 3163.6218, -1168.4437, 30.3423);
    	      SetPlayerFacingAngle(playerid, 270.0665);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,3200.0686,-1114.0719,34.3727,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
              PlayerInfo[playerid][pShotgun] = 1;
              PlayerInfo[playerid][pM4] = 1;
              PlayerInfo[playerid][pAK47] = 0;
              PlayerInfo[playerid][pTear] = 1;
              RestoreWeapons(playerid);
	          SetPlayerColor(playerid,BLUE);
              SetPlayerTeam(playerid, TEAM_CT);
              TogglePlayerControllable(playerid, 1);
    	   }
    	   else if(gTeam[playerid] == TEAM_TT)
    	   {
    	      SetPlayerPos(playerid, 3147.8560, -1248.1599, 57.9542);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,3200.0686,-1114.0719,34.3727,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
    		  PlayerInfo[playerid][pShotgun] = 1;
    		  PlayerInfo[playerid][pAK47] = 1;
    		  PlayerInfo[playerid][pM4] = 0;
    		  PlayerInfo[playerid][pTear] = 1;
    		  RestoreWeapons(playerid);
    		  SetPlayerColor(playerid,RED);
    		  SetPlayerTeam(playerid, TEAM_TT);
    		  TogglePlayerControllable(playerid, 1);
    	   }
    	   return 1;
    	}
    	if(Map == 2)
    	{
    	   if(gTeam[playerid] == TEAM_CT)
    	   {
    	      SetPlayerPos(playerid, -1360.97290, -81.179328, 14.146192);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,-1395.678833,-107.936225,30.302179,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
              PlayerInfo[playerid][pShotgun] = 1;
              PlayerInfo[playerid][pM4] = 1;
              PlayerInfo[playerid][pAK47] = 0;
              PlayerInfo[playerid][pTear] = 1;
              RestoreWeapons(playerid);
	          SetPlayerColor(playerid,BLUE);
              SetPlayerTeam(playerid, TEAM_CT);
              TogglePlayerControllable(playerid, 1);
    	   }
    	   else if(gTeam[playerid] == TEAM_TT)
    	   {
    	      SetPlayerPos(playerid, -1267.509277, -196.905258, 14.148437);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,-1395.678833,-107.936225,30.302179,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
    		  PlayerInfo[playerid][pShotgun] = 1;
    		  PlayerInfo[playerid][pAK47] = 1;
    		  PlayerInfo[playerid][pM4] = 0;
    		  PlayerInfo[playerid][pTear] = 1;
    		  RestoreWeapons(playerid);
    		  SetPlayerColor(playerid,RED);
    		  SetPlayerTeam(playerid, TEAM_TT);
    		  TogglePlayerControllable(playerid, 1);
    	   }
    	   return 1;
    	}
    	if(Map == 3)
    	{
    	   if(gTeam[playerid] == TEAM_CT)
    	   {
    	      SetPlayerPos(playerid, -1932.6234, 1605.1670, 27.5018);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,-1954.502685,1681.233032,27.429172,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
              PlayerInfo[playerid][pShotgun] = 1;
              PlayerInfo[playerid][pM4] = 1;
              PlayerInfo[playerid][pAK47] = 0;
              PlayerInfo[playerid][pTear] = 1;
              RestoreWeapons(playerid);
	          SetPlayerColor(playerid,BLUE);
              SetPlayerTeam(playerid, TEAM_CT);
              TogglePlayerControllable(playerid, 1);
    	   }
    	   else if(gTeam[playerid] == TEAM_TT)
    	   {
    	      SetPlayerPos(playerid, -2273.5742, 1655.1820, 48.3878);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,-1954.502685,1681.233032,27.429172,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
    		  PlayerInfo[playerid][pShotgun] = 1;
    		  PlayerInfo[playerid][pAK47] = 1;
    		  PlayerInfo[playerid][pM4] = 0;
    		  PlayerInfo[playerid][pTear] = 1;
    		  RestoreWeapons(playerid);
    		  SetPlayerColor(playerid,RED);
    		  SetPlayerTeam(playerid, TEAM_TT);
    		  TogglePlayerControllable(playerid, 1);
    	   }
    	   return 1;
    	}
    	if(Map == 4)
    	{
    	   if(gTeam[playerid] == TEAM_CT)
    	   {
    	      SetPlayerPos(playerid, 2228.8044, -1728.7825, 13.3828);
    	      SetPlayerFacingAngle(playerid, 270.0665);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,2266.4419,-1699.7832,13.6901,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
              PlayerInfo[playerid][pShotgun] = 1;
              PlayerInfo[playerid][pM4] = 1;
              PlayerInfo[playerid][pAK47] = 0;
              PlayerInfo[playerid][pTear] = 1;
              RestoreWeapons(playerid);
	          SetPlayerColor(playerid,BLUE);
              SetPlayerTeam(playerid, TEAM_CT);
              TogglePlayerControllable(playerid, 1);
    	   }
    	   else if(gTeam[playerid] == TEAM_TT)
    	   {
    	      SetPlayerPos(playerid, 2507.7942, -1686.9944, 13.5540);
    	      SetPlayerFacingAngle(playerid, 360.0);
    		  SetPlayerInterior(playerid, 0);
    		  SetPlayerCheckpoint(playerid,2266.4419,-1699.7832,13.6901,5.0);
    		  PlayerInfo[playerid][pSdpistol] = 1;
    		  PlayerInfo[playerid][pShotgun] = 1;
    		  PlayerInfo[playerid][pAK47] = 1;
    		  PlayerInfo[playerid][pM4] = 0;
    		  PlayerInfo[playerid][pTear] = 1;
    		  RestoreWeapons(playerid);
    		  SetPlayerColor(playerid,RED);
    		  SetPlayerTeam(playerid, TEAM_TT);
    		  TogglePlayerControllable(playerid, 1);
    	   }
    	   return 1;
    	}
	}
	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source){
    new clicked[MAX_PLAYER_NAME];
    GetPlayerName(clickedplayerid, clicked, sizeof(clicked));
	if(PlayerInfo[playerid][pAdmin] > 0){
	    if(clickedplayerid == playerid) return 1;
	    if(gPlayerLogged[clickedplayerid] == 0){
	        SendClientMessage(playerid, COLOR_WHITE, "That player isn't logged in.");
	        return 1;
	    }
		Unspec[playerid][sPint] = GetPlayerInterior(playerid);
    	Unspec[playerid][sVw] = GetPlayerVirtualWorld(playerid);
    	GetPlayerFacingAngle(playerid, Unspec[playerid][sAngle]);
    	GetPlayerPos( playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz] );
    	Spectating[playerid] = 1;
		TogglePlayerSpectating(playerid, 1);
  		SpectatorRefresh(playerid, clickedplayerid);
		refresher = SetTimerEx("SpectatorRefresh", 3000, true, "dd", playerid, clickedplayerid);
		SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /specoff to stop spectating ");
	}
	return 1;
}
public SpectatorRefresh(playerid, otherplayer){
	if(otherplayer == INVALID_PLAYER_ID){
    	TogglePlayerSpectating(playerid, false);
    	Spectating[playerid] = 0;
    	SpecReturnPosDue[playerid] = 1;
    	SpecNewState[playerid] = 0;
    	SendClientMessage(playerid, COLOR_WHITE, "You are no longer spectating; the specified player ID is unavailable.");

    	KillTimer(refresher);
    	SetCameraBehindPlayer(playerid);

    	SetPlayerInterior(playerid, Unspec[playerid][sPint]);
    	SetPlayerVirtualWorld(playerid, Unspec[playerid][sVw]);
    	SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
    	SetPlayerFacingAngle(playerid, Unspec[playerid][sAngle]);
	}

	SetPlayerInterior(playerid, GetPlayerInterior(otherplayer));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherplayer));

    if(IsPlayerInAnyVehicle(otherplayer)==1){
	    if(SpecNewState[playerid] != 1){
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherplayer));
			SpecNewState[playerid] = 1;
		}
	}
    else
	{
	    if(SpecNewState[playerid] != 2){
			PlayerSpectatePlayer(playerid, otherplayer);
			SpecNewState[playerid] = 2;
		}
	}
}
public Specover(playerid){
    TogglePlayerSpectating(playerid, 0);
    return 1;
}
public Specstart(playerid){
    TogglePlayerSpectating(playerid, 1);
    PlayerSpectatePlayer(playerid, hitid[playerid]);
    SetTimerEx("Specover",10000, false, "i", playerid);
}
public DMTimer(){
    DMTime --;
    new tmp[256];
    TextDrawDestroy(Text:Time);
    format(tmp, sizeof tmp, "%s", TimeConvert(DMTime));

    Time = TextDrawCreate(300.0, 10.0, tmp);
    TextDrawUseBox(Text:Time, 1);
    TextDrawTextSize(Text:Time, 350.0, 30.0);
    TextDrawSetShadow(Text:Time, 0);
    TextDrawSetOutline(Text:Time, 1);
    TextDrawShowForAll(Text:Time);

    if (DMTime == 0){
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++ ){
       TogglePlayerControllable(playerid, 0);
    }
    GameTextForAll("Terrorists ran out of time!", 1000, 5);
    GameTextForAll("~w~ The round is over, ~b~Counter Terrorists ~w~win!", 1000, 5);
    SetTimer("Nextmap", 2000, 0);
    }
    return 1;
}
public Nextmap(){
   if(Map == 1)
   {
      GameTextForAll("~g~Next Map ~n~~b~SF Airport ~n~~w~Loading...", 2500 , 0);
      Map = 2;
	  SetTimer("Over", 5000 , 0);
	  ctscore = 0;
	  ttscore = 0;
      for(new i=0; i < MAX_PLAYERS; i++)
      {
	     TogglePlayerControllable(i, 0);
	     ResetPlayerWeaponsEx(i);
	     return 1;
      }
   }
   else if(Map == 2)
   {
      GameTextForAll("~g~Next Map ~n~~b~Dust ~n~~w~Loading...", 2500 , 0);
      Map = 3;
      SetTimer("Over", 5000 , 0);
      ctscore = 0;
	  ttscore = 0;
      for(new i=0; i < MAX_PLAYERS; i++)
      {
         TogglePlayerControllable(i, 0);
         ResetPlayerWeaponsEx(i);
         return 1;
      }
   }
   else if(Map == 3)
   {
      GameTextForAll("~g~Next Map ~n~~b~Grove Street ~n~~w~Loading...", 2500 , 0);
      Map = 4;
      SetTimer("Over", 5000 , 0);
      ctscore = 0;
	  ttscore = 0;
      for(new i=0; i < MAX_PLAYERS; i++)
      {
         TogglePlayerControllable(i, 0);
         ResetPlayerWeaponsEx(i);
         return 1;
      }
   }
   else if(Map == 4)
   {
      GameTextForAll("~g~Next Map ~n~~b~Abandoned Island ~n~~w~Loading...", 2500 , 0);
      Map = 1;
      SetTimer("Over", 5000 , 0);
      ctscore = 0;
	  ttscore = 0;
      for(new i=0; i < MAX_PLAYERS; i++)
      {
         TogglePlayerControllable(i, 0);
         ResetPlayerWeaponsEx(i);
         return 1;
      }
   }
   return 1;
}
public Over(){
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++ ){
       SetPlayerSpawn(playerid);
    }
}
TimeConvert(seconds) {
new tmp[256];
new minutes = floatround(seconds/60);
seconds -= minutes*60;
format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
return tmp;
}
public HeadShot(){
	for(new i; i<=200; i++){
	    if(IsPlayerConnected(i) && GetPlayerState(i) != PLAYER_STATE_NONE){
	        if(!IsPlayerInAnyVehicle(i))
	        {
	        	GetPlayerKeys(i, Kchecker, Thing2[i], Thing[i]);
	        	GetPlayerPos(i, nx[i], ny[i], nz[i]);
	        	GetPlayerHealth(i, NHP[i]);
	        	RHP[i] = NHP[i] - SHP[i];
	        	GetPlayerArmour(i, NARM[i]);
	        	RARM[i] = NARM[i] - SARM[i];
	        	GetPlayerPos(i, sx[i], sy[i], sz[i]);
	        	GetPlayerHealth(i, SHP[i]);
				GetPlayerArmour(i, SARM[i]);
	        	if(nx[i] != sx[i] && ny[i] != sy[i] && nz[i] == sz[i] && Thing[i] == 0 && Thing2[i] == 0 && (RHP[i] <= -20) || (RARM[i] <= -20) && Checking[i] == false)
	        	{
	            	SetPlayerHealth(i, 0);
	            	GameTextForAll("~b~Head ~g~Shot!", 2000, 5);
	        	}
	        }
	        else if(IsPlayerInAnyVehicle(i) && !IsPlayerOnBike(i) && !IsPlayerInBoat(i) && !IsPlayerOnBicycle(i))
	        {
	        	GetPlayerHealth(i, NHP[i]);
	        	GetPlayerArmour(i, NARM[i]);
	        	GetPlayerHealth(i, SHP[i]);
	            GetPlayerArmour(i, SARM[i]);
	        	if((NHP[i] < SHP[i]) || (NARM[i] < SARM[i]) && Checking[i] == false)
	        	{
	                SetPlayerHealth(i, 0);
	            	GameTextForAll("~b~Head ~g~Shot!", 2000, 5);
	        	}
	        }
		}
	}
}
public HS(playerid){
	Checking[playerid] = false;
	KillTimer(Checking2[playerid]);
	return 1;
}
IsPlayerOnBike(playerid){
 if(IsPlayerInAnyVehicle(playerid))
 {
  new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
  switch(vehicleclass)
  {
   case 448:return 1;
   case 461:return 1;
   case 462:return 1;
   case 463:return 1;
   case 468:return 1;
   case 521:return 1;
   case 522:return 1;
   case 523:return 1;
   case 581:return 1;
   case 586:return 1;
   case 471:return 1;
  }
 }
 return 0;
}
IsPlayerInBoat(playerid){
 if(IsPlayerInAnyVehicle(playerid))
 {
  new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
  switch(vehicleclass)
  {
   case 430:return 1;
   case 446:return 1;
   case 452:return 1;
   case 453:return 1;
   case 454:return 1;
   case 472:return 1;
   case 473:return 1;
   case 484:return 1;
   case 493:return 1;
   case 595:return 1;
  }
 }
 return 0;
}
IsPlayerOnBicycle(playerid){
 if(IsPlayerInAnyVehicle(playerid))
 {
  new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
  switch(vehicleclass)
  {
   case 481:return 1;
   case 509:return 1;
   case 510:return 1;
  }
 }
 return 0;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]){
    if(dialogid == DIALOGID){
		if(response)
		{
			if(listitem == 0){
			    if(GetPlayerCash(playerid) > 4999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a vest for $5000.");
				   GivePlayerCash(playerid, -5000);
				   SetPlayerArmour(playerid, 100);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 1){
			    if(GetPlayerCash(playerid) > 999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a knife for $1000.");
				   PlayerInfo[playerid][pKnife] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -1000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 2){
			    if(GetPlayerCash(playerid) > 2499)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a colt45 for $2,500.");
				   PlayerInfo[playerid][pColt] = 1;
				   PlayerInfo[playerid][pDeagle] = 0;
				   PlayerInfo[playerid][pSdpistol] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -2500);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 3){
			    if(GetPlayerCash(playerid) > 3499)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Desert Eagle for $3,500.");
				   PlayerInfo[playerid][pColt] = 0;
				   PlayerInfo[playerid][pDeagle] = 1;
				   PlayerInfo[playerid][pSdpistol] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -3500);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 4){
			    if(GetPlayerCash(playerid) > 999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Silenced Pistol for $1,000.");
				   PlayerInfo[playerid][pColt] = 0;
				   PlayerInfo[playerid][pDeagle] = 0;
				   PlayerInfo[playerid][pSdpistol] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -1000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 5){
			    if(GetPlayerCash(playerid) > 4499)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Mac-10 for $4,500.");
				   PlayerInfo[playerid][pMac10] = 1;
				   PlayerInfo[playerid][pMP5] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -4500);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 6){
			    if(GetPlayerCash(playerid) > 4999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a MP5 for $5,000.");
				   PlayerInfo[playerid][pMac10] = 0;
				   PlayerInfo[playerid][pMP5] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -5000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 7){
			    if(GetPlayerCash(playerid) > 4999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Ak-47 for $5,000.");
				   PlayerInfo[playerid][pM4] = 0;
				   PlayerInfo[playerid][pAK47] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -5000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 8){
			    if(GetPlayerCash(playerid) > 4999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a M4 for $5,000.");
				   PlayerInfo[playerid][pM4] = 1;
				   PlayerInfo[playerid][pAK47] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -5000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 9){
			    if(GetPlayerCash(playerid) > 2499)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Shotgun for $2,500.");
				   PlayerInfo[playerid][pShotgun] = 1;
				   PlayerInfo[playerid][pSPAS12] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -2500);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 10){
			    if(GetPlayerCash(playerid) > 49999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Spas-12 for $50,000.");
				   PlayerInfo[playerid][pShotgun] = 0;
				   PlayerInfo[playerid][pSPAS12] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -50000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 11){
			    if(GetPlayerCash(playerid) > 9999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Rifle for $10,000.");
				   PlayerInfo[playerid][pSniperRifle] = 0;
				   PlayerInfo[playerid][pRifle] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -10000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 12){
			    if(GetPlayerCash(playerid) > 14999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought a Sniper Rifle for $15,000.");
				   PlayerInfo[playerid][pSniperRifle] = 1;
				   PlayerInfo[playerid][pRifle] = 0;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -150000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 13){
			    if(GetPlayerCash(playerid) > 9999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought some Grenades for $1,0000.");
				   PlayerInfo[playerid][pTear] = 0;
				   PlayerInfo[playerid][pGrenade] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -10000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 14){
			    if(GetPlayerCash(playerid) > 4999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought some Tear Gas for $5,000.");
				   PlayerInfo[playerid][pGrenade] = 0;
				   PlayerInfo[playerid][pTear] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -5000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
			if(listitem == 15){
			    if(GetPlayerCash(playerid) > 999999)
			    {
				   SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have bought some Rocket Launcher for $1,000,000.");
				   PlayerInfo[playerid][pRocket] = 1;
				   RestoreWeapons(playerid);
				   GivePlayerCash(playerid, -1000000);
				}
				else
			    {
			       SendClientMessage(playerid, COLOR_GREY, " Not enough cash for that !");
			    }
			}
		}
		return 1;
	}
	return 0;
}
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z){
    if(IsPlayerConnected(playerid)){
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public IsAtShop(playerid){
    if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(3.0,playerid,3175.3003, -1141.0750, 30.6428) || PlayerToPoint(3.0,playerid,3149.7278, -1252.8730, 58.2263))
		{
		    return 1;
        }
        else if(PlayerToPoint(3.0,playerid,-1345.4269, -57.1077, 14.1484) || PlayerToPoint(3.0,playerid,-1237.0514, -165.4621, 14.1484))
		{
            return 1;
        }
        else if(PlayerToPoint(3.0,playerid,-1936.9550, 1616.3103, 27.5018) || PlayerToPoint(3.0,playerid,-2268.6216, 1644.3895, 48.3878))
		{
            return 1;
        }
        else if(PlayerToPoint(3.0,playerid,2233.5200,-1724.4127,13.5524) || PlayerToPoint(3.0,playerid,2499.7739,-1685.5599,13.4582))
		{
            return 1;
        }
	}
	return 0;
}
public OnPlayerEnterCheckpoint(playerid){
    if(IsPlayerInCheckpoint(playerid) && gTeam[playerid] == TEAM_TT){
    SendClientMessage(playerid, COLOR_GREY, "Type /plantbomb to plant the bomb!");
	}
	else if(IsPlayerInCheckpoint(playerid) && gTeam[playerid] == TEAM_CT){
    SendClientMessage(playerid, COLOR_GREY, "Type /defuse to defuse the bomb!");
    }
    return 1;
}
public Counter(){
    Count --;
    new tmp[256];
    TextDrawHideForAll(Text:C);
    format(tmp, sizeof tmp, "Bomb will blow in : %s", TimeConvert(Count));
	C = TextDrawCreate(220.0, 310.0, tmp);
	TextDrawSetOutline(Text:C, 1);
	TextDrawShowForAll(Text:C);
	if(Defused){
        GameTextForAll("~w~ The round is over, ~b~Counter Terrorists ~w~win!", 3000, 5);
        TextDrawHideForAll(Text:C);
        return 1;
 	}
	else if (Count < 0.1){
        CreateExplosion(3200.0686, -1114.0719, 34.3727, 7, 200000.0); // Map 1
        CreateExplosion(-1395.678833, -107.936225, 30.302179, 7, 200000000.0); // Map 2
        CreateExplosion(-1954.502685, 1681.233032, 27.429172, 7, 200000000.0); // Map 3
        CreateExplosion(2266.4419, -1699.7832, 13.6901, 7, 200000000.0); // Map
        TextDrawHideForAll(Text:C);
        GameTextForAll("~w~ The round is over, ~r~Terrorists ~w~win!", 1000, 5);
        SetTimer("Nextmap", 2000, 0);
	}
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid){
    if(pickupid == cshop){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == tshop){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == cshop2){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == tshop2){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == cshop3){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == tshop3){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == cshop4){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    else if (pickupid == tshop4){
       GameTextForPlayer(playerid, "~w~TYPE /SHOP TO BUY ~n~~r~WEAPONS", 5000, 3);
    }
    return 1;
}
// By Chuck and Eddie
